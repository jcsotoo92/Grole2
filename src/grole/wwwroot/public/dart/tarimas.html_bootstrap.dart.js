// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $ = Isolate.$isolateProperties;
var $$ = {};

// Classes
$$.Modal = {"": "WebComponent;_root,__t,_isShown,_element,_shadowRoots",
  created_autogenerated$0: function() {
    this._root = this.createShadowRoot$0(this);
    this.__t = $.Template$(this._root);
    $.add$1$ax($.get$nodes$x(this._root), $.clone$1$x($.get$Modal___shadowTemplate(), true));
    this.__t.create$0();
  },
  inserted_autogenerated$0: function() {
    var t1 = this.__t;
    t1.insert$0(t1);
  },
  removed_autogenerated$0: function() {
    var t1 = this.__t;
    t1.remove$0(t1);
    this.__t = null;
  },
  composeChildren$0: function() {
    $.WebComponent.prototype.composeChildren$0.call(this);
    var t1 = this._root;
    if (!(typeof t1 === "object" && t1 !== null && t1.$isShadowRoot()))
      this._root = this;
  },
  get$isShown: function() {
    return this._isShown;
  },
  set$isShown: function(value) {
    var modal, effect;
    if ($.$eq(value, this._isShown) !== true) {
      this._isShown = value;
      modal = this._getModalElement$0();
      if (modal != null) {
        effect = $.ScaleEffect_ScaleEffect(null, null, null);
        if (this._isShown === true)
          $.ModalManager_show(modal, this.get$_onBackdropClicked(), null, effect, null);
        else
          $.ModalManager_hide(modal, null, effect, null);
      }
      $.ShowHideComponent_dispatchToggleEvent(this);
    }
  },
  show$0: function(_) {
    this.set$isShown(true);
  },
  created$0: function() {
    this.get$onClick(this).listen$1(this.get$_onClick());
  },
  inserted$0: function() {
    var modal = $.query$1$x(this._element, "x-modal > .modal");
    if (modal != null && this.get$isShown() !== true)
      $.ModalManager_hide(modal, null, null, null);
  },
  _getModalElement$0: function() {
    return $.query$1$x(this._element, "x-modal > .modal");
  },
  _onClick$1: function($event) {
    var t1, target;
    t1 = $.getInterceptor$x($event);
    if (t1.get$defaultPrevented($event) !== true) {
      target = $.callTypeCast(t1.get$target($event), "$isElement");
      if (target != null && $.$eq($.$index$asx($.get$dataset$x(target), "dismiss"), "modal") === true)
        this.set$isShown(false);
    }
  },
  get$_onClick: function() {
    return new $.BoundClosure$1(this, "_onClick$1");
  },
  _onBackdropClicked$0: function() {
    this.set$isShown(false);
  },
  get$_onBackdropClicked: function() {
    return new $.BoundClosure$0(this, "_onBackdropClicked$0");
  }
};

$$.Camara = {"": "Object;id>,nombre<"};

$$.DetalleReporteTarima = {"": "Object;Seleccionada@,Folio@,Fecha?,Cajas@,Kilos@,KilosStr@,IP@,Lote@,Status?,Camara@,Ubicacion@,FolioSalida?,FechaSalida?,PesoReal?,PesoRealStr@",
  get$FechaStr: function() {
    var error, t1, exception;
    try {
      t1 = $.DateFormat$("dd/MMM/yyyy", null);
      t1 = t1.format$1(t1, this.Fecha);
      return t1;
    } catch (exception) {
      t1 = $.unwrapException(exception);
      error = t1;
      $.print($.S(error));
      return "???";
    }

  },
  get$Estatus: function() {
    if ($.$eq(this.Status, "C") === true)
      return "Cerrado";
    if ($.$eq(this.Status, "S") === true)
      return "Embarcada";
    else
      return "En uso";
  },
  get$FolioSalidaStr: function() {
    if ($.$eq(this.FolioSalida, "null") === true)
      return "";
    else
      return this.FolioSalida;
  },
  get$FechaSalidaStr: function() {
    var t1, exception;
    try {
      t1 = $.DateFormat$("dd/MMM/yyyy", null);
      t1 = t1.format$1(t1, this.FechaSalida);
      return t1;
    } catch (exception) {
      $.unwrapException(exception);
      return "";
    }

  }
};

$$.filtrar_anon = {"": "Closure;",
  call$1: function(x) {
    return x.get$Seleccionada() === true;
  },
  $isFunction: true
};

$$.init_autogenerated_anon = {"": "Closure;box_1",
  call$1: function($$event) {
    var t1 = $.get$value$x(this.box_1.__txtLote_3);
    $.lote_tarima0(t1);
  },
  $isFunction: true
};

$$.init_autogenerated_anon0 = {"": "Closure;",
  call$0: function() {
    return $.lote_tarima();
  },
  $isFunction: true
};

$$.init_autogenerated_anon1 = {"": "Closure;box_1",
  call$1: function(e) {
    $.set$value$x(this.box_1.__txtLote_3, e);
  },
  $isFunction: true
};

$$.init_autogenerated_anon2 = {"": "Closure;box_1",
  call$1: function($$event) {
    var t1 = $.get$checked$x(this.box_1.__e0_1);
    $.todos_los_lotes(t1);
  },
  $isFunction: true
};

$$.init_autogenerated_anon3 = {"": "Closure;",
  call$0: function() {
    return $._todos;
  },
  $isFunction: true
};

$$.init_autogenerated_anon4 = {"": "Closure;box_1",
  call$1: function(e) {
    $.set$checked$x(this.box_1.__e0_1, e);
  },
  $isFunction: true
};

$$.init_autogenerated_anon5 = {"": "Closure;",
  call$0: function() {
    return $.get$Camaras();
  },
  $isFunction: true
};

$$.init_autogenerated_anon6 = {"": "Closure;__html0_2",
  call$2: function(camara, __t) {
    var t1, __binding1;
    t1 = {};
    t1.__e2_0 = null;
    t1.__e2_0 = $.clone$1$x(this.__html0_2, true);
    __binding1 = __t.contentBind$2(new $.init_autogenerated__anon13(camara), false);
    $.add$1$ax($.get$nodes$x(t1.__e2_0), __binding1);
    __t.oneWayBind$4(new $.init_autogenerated__anon14(camara), new $.init_autogenerated__anon15(t1), false, false);
    $.addAll$1$ax(__t, [document.createTextNode("\n          "), t1.__e2_0, document.createTextNode("\n        ")]);
  },
  $isFunction: true
};

$$.init_autogenerated__anon13 = {"": "Closure;camara_3",
  call$0: function() {
    return this.camara_3.get$nombre();
  },
  $isFunction: true
};

$$.init_autogenerated__anon14 = {"": "Closure;camara_4",
  call$0: function() {
    return $.get$id$x(this.camara_4);
  },
  $isFunction: true
};

$$.init_autogenerated__anon15 = {"": "Closure;box_0",
  call$1: function(e) {
    $.set$value$x(this.box_0.__e2_0, e);
  },
  $isFunction: true
};

$$.init_autogenerated_anon7 = {"": "Closure;box_1",
  call$1: function($$event) {
    var t1 = $.get$checked$x(this.box_1.__e3_2);
    $.camaras_todas(t1);
  },
  $isFunction: true
};

$$.init_autogenerated_anon8 = {"": "Closure;",
  call$0: function() {
    return $._camaras_todas;
  },
  $isFunction: true
};

$$.init_autogenerated_anon9 = {"": "Closure;box_1",
  call$1: function(e) {
    $.set$checked$x(this.box_1.__e3_2, e);
  },
  $isFunction: true
};

$$.init_autogenerated_anon10 = {"": "Closure;",
  call$1: function($$event) {
    $.obtener_reporte();
  },
  $isFunction: true
};

$$.init_autogenerated_anon11 = {"": "Closure;",
  call$1: function($$event) {
    $.filtrar();
  },
  $isFunction: true
};

$$.init_autogenerated_anon12 = {"": "Closure;",
  call$0: function() {
    return $.get$Reporte();
  },
  $isFunction: true
};

$$.init_autogenerated_anon13 = {"": "Closure;__html1_5",
  call$2: function(item, __t) {
    var __e30, t1, __e6, __binding5, __e8, __binding7, __e10, __binding9, __e12, __binding11, __e14, __binding13, __e16, __binding15, __e18, __binding17, __e20, __binding19, __e22, __binding21, __e24, __binding23, __e26, __binding25, __e28, __binding27;
    __e30 = $.clone$1$x(this.__html1_5, true);
    t1 = $.getInterceptor$x(__e30);
    __t.listen$2($.get$onClick$x(t1.query$1(__e30, "#__e-4")), new $.init_autogenerated__anon(item));
    __e6 = t1.query$1(__e30, "#__e-6");
    __binding5 = __t.contentBind$2(new $.init_autogenerated__anon0(item), false);
    $.add$1$ax($.get$nodes$x(__e6), __binding5);
    __e8 = t1.query$1(__e30, "#__e-8");
    __binding7 = __t.contentBind$2(new $.init_autogenerated__anon1(item), false);
    $.add$1$ax($.get$nodes$x(__e8), __binding7);
    __e10 = t1.query$1(__e30, "#__e-10");
    __binding9 = __t.contentBind$2(new $.init_autogenerated__anon2(item), false);
    $.add$1$ax($.get$nodes$x(__e10), __binding9);
    __e12 = t1.query$1(__e30, "#__e-12");
    __binding11 = __t.contentBind$2(new $.init_autogenerated__anon3(item), false);
    $.add$1$ax($.get$nodes$x(__e12), __binding11);
    __e14 = t1.query$1(__e30, "#__e-14");
    __binding13 = __t.contentBind$2(new $.init_autogenerated__anon4(item), false);
    $.add$1$ax($.get$nodes$x(__e14), __binding13);
    __e16 = t1.query$1(__e30, "#__e-16");
    __binding15 = __t.contentBind$2(new $.init_autogenerated__anon5(item), false);
    $.add$1$ax($.get$nodes$x(__e16), __binding15);
    __e18 = t1.query$1(__e30, "#__e-18");
    __binding17 = __t.contentBind$2(new $.init_autogenerated__anon6(item), false);
    $.add$1$ax($.get$nodes$x(__e18), __binding17);
    __e20 = t1.query$1(__e30, "#__e-20");
    __binding19 = __t.contentBind$2(new $.init_autogenerated__anon7(item), false);
    $.add$1$ax($.get$nodes$x(__e20), __binding19);
    __e22 = t1.query$1(__e30, "#__e-22");
    __binding21 = __t.contentBind$2(new $.init_autogenerated__anon8(item), false);
    $.add$1$ax($.get$nodes$x(__e22), __binding21);
    __e24 = t1.query$1(__e30, "#__e-24");
    __binding23 = __t.contentBind$2(new $.init_autogenerated__anon9(item), false);
    $.add$1$ax($.get$nodes$x(__e24), __binding23);
    __e26 = t1.query$1(__e30, "#__e-26");
    __binding25 = __t.contentBind$2(new $.init_autogenerated__anon10(item), false);
    $.add$1$ax($.get$nodes$x(__e26), __binding25);
    __e28 = t1.query$1(__e30, "#__e-28");
    __binding27 = __t.contentBind$2(new $.init_autogenerated__anon11(item), false);
    $.add$1$ax($.get$nodes$x(__e28), __binding27);
    __t.listen$2($.get$onClick$x(t1.query$1(__e30, "#__e-29")), new $.init_autogenerated__anon12(item));
    $.addAll$1$ax(__t, [document.createTextNode("\n          "), __e30, document.createTextNode("  \n       ")]);
  },
  $isFunction: true
};

$$.init_autogenerated__anon = {"": "Closure;item_6",
  call$1: function($$event) {
    var t1 = this.item_6;
    t1.set$Seleccionada(t1.get$Seleccionada() !== true);
  },
  $isFunction: true
};

$$.init_autogenerated__anon0 = {"": "Closure;item_7",
  call$0: function() {
    return this.item_7.get$Folio();
  },
  $isFunction: true
};

$$.init_autogenerated__anon1 = {"": "Closure;item_8",
  call$0: function() {
    return this.item_8.get$FechaStr();
  },
  $isFunction: true
};

$$.init_autogenerated__anon2 = {"": "Closure;item_9",
  call$0: function() {
    return this.item_9.get$Cajas();
  },
  $isFunction: true
};

$$.init_autogenerated__anon3 = {"": "Closure;item_10",
  call$0: function() {
    return this.item_10.get$KilosStr();
  },
  $isFunction: true
};

$$.init_autogenerated__anon4 = {"": "Closure;item_11",
  call$0: function() {
    return this.item_11.get$IP();
  },
  $isFunction: true
};

$$.init_autogenerated__anon5 = {"": "Closure;item_12",
  call$0: function() {
    return this.item_12.get$Lote();
  },
  $isFunction: true
};

$$.init_autogenerated__anon6 = {"": "Closure;item_13",
  call$0: function() {
    return this.item_13.get$Estatus();
  },
  $isFunction: true
};

$$.init_autogenerated__anon7 = {"": "Closure;item_14",
  call$0: function() {
    return this.item_14.get$Camara();
  },
  $isFunction: true
};

$$.init_autogenerated__anon8 = {"": "Closure;item_15",
  call$0: function() {
    return this.item_15.get$Ubicacion();
  },
  $isFunction: true
};

$$.init_autogenerated__anon9 = {"": "Closure;item_16",
  call$0: function() {
    return this.item_16.get$FolioSalidaStr();
  },
  $isFunction: true
};

$$.init_autogenerated__anon10 = {"": "Closure;item_17",
  call$0: function() {
    return this.item_17.get$FechaSalidaStr();
  },
  $isFunction: true
};

$$.init_autogenerated__anon11 = {"": "Closure;item_18",
  call$0: function() {
    return this.item_18.get$PesoRealStr();
  },
  $isFunction: true
};

$$.init_autogenerated__anon12 = {"": "Closure;item_19",
  call$1: function($$event) {
    $.detalles(this.item_19);
  },
  $isFunction: true
};

$$.init_autogenerated_anon14 = {"": "Closure;",
  call$0: function() {
    return $.TotalCajas;
  },
  $isFunction: true
};

$$.init_autogenerated_anon15 = {"": "Closure;",
  call$0: function() {
    return $.TotalPeso;
  },
  $isFunction: true
};

$$.ListIterable = {"": "Iterable;",
  get$iterator: function(_) {
    return $.ListIterator$(this);
  },
  forEach$1: function(_, action) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      return this.forEach$1$bailout1(1, action, $length);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw $.$$throw($.ConcurrentModificationError$(this));
    }
  },
  forEach$1$bailout1: function(state0, action, $length) {
    var t1, i;
    for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
      action.call$1(this.elementAt$1(this, i));
      if (t1.$eq($length, this.get$length(this)) !== true)
        throw $.$$throw($.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return $.$eq(this.get$length(this), 0);
  },
  contains$1: function(_, element) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      return this.contains$1$bailout1(1, element, $length);
    for (i = 0; i < $length; ++i) {
      if ($.$eq(this.elementAt$1(this, i), element) === true)
        return true;
      if ($length !== this.get$length(this))
        throw $.$$throw($.ConcurrentModificationError$(this));
    }
    return false;
  },
  contains$1$bailout1: function(state0, element, $length) {
    var t1, i;
    for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
      if ($.$eq(this.elementAt$1(this, i), element) === true)
        return true;
      if (t1.$eq($length, this.get$length(this)) !== true)
        throw $.$$throw($.ConcurrentModificationError$(this));
    }
    return false;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  where$1: function(_, test) {
    return $.Iterable.prototype.where$1.call(this, this, test);
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    var t1, result, i;
    if (growable === true) {
      t1 = this.get$length(this);
      result = $.List_List($);
      $.JSArray_methods.set$length(result, t1);
    } else
      result = $.List_List(this.get$length(this));
    for (i = 0; $.JSNumber_methods.$lt(i, this.get$length(this)); ++i) {
      t1 = this.elementAt$1(this, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  $asIterable: function() {
    return null;
  }
};

$$.ListIterator = {"": "Object;_iterable,_length,_index,_current",
  get$current: function() {
    return this._current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._length;
    t2 = this._iterable;
    if ($.$eq(t1, $.get$length$asx(t2)) !== true)
      throw $.$$throw($.ConcurrentModificationError$(t2));
    t3 = this._index;
    if (t3 === t1) {
      this._current = null;
      return false;
    }
    this._current = $.elementAt$1$ax(t2, t3);
    this._index = this._index + 1;
    return true;
  }
};

$$.MappedIterable = {"": "Iterable;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function(_) {
    var t1 = this._iterable;
    return $.MappedIterator$(t1.get$iterator(t1), this._f);
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  get$isEmpty: function(_) {
    var t1 = this._iterable;
    return t1.get$isEmpty(t1);
  },
  elementAt$1: function(_, index) {
    var t1 = this._iterable;
    return this._f$1(t1.elementAt$1(t1, index));
  },
  $asIterable: function() {
    return function (S, T) { return [T]; };
  }
};

$$.MappedIterator = {"": "Iterator;_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0() === true) {
      this._current = this._f$1(t1.get$current());
      return true;
    }
    this._current = null;
    return false;
  },
  get$current: function() {
    return this._current;
  }
};

$$.MappedListIterable = {"": "ListIterable;_liblib7$_source,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$length: function(_) {
    return $.get$length$asx(this._liblib7$_source);
  },
  elementAt$1: function(_, index) {
    return this._f$1($.elementAt$1$ax(this._liblib7$_source, index));
  },
  $asIterable: function() {
    return function (S, T) { return [T]; };
  }
};

$$.WhereIterable = {"": "Iterable;_iterable,_f",
  get$iterator: function(_) {
    return $.WhereIterator$($.get$iterator$ax(this._iterable), this._f);
  },
  $asIterable: function() {
    return null;
  }
};

$$.WhereIterator = {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0() === true;)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  }
};

$$.ToString__emitMap_anon = {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (!t1.first_0)
      $.write$1$x(this.result_1, ", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.ToString__emitObject(k, t1, t2);
    $.write$1$x(t1, ": ");
    $.ToString__emitObject(v, t1, t2);
  },
  $isFunction: true
};

$$.ConstantMap = {"": "Object;length>,_jsObject,_keys<",
  containsKey$1: function(_, key) {
    if ($.$eq(key, "__proto__") === true)
      return false;
    return this._jsObject.hasOwnProperty(key);
  },
  $index: function(_, key) {
    if (!this.containsKey$1(this, key))
      return;
    return this._jsObject[key];
  },
  forEach$1: function(_, f) {
    $.forEach$1$ax(this._keys, new $.ConstantMap_forEach_anon(this, f));
  },
  get$keys: function(_) {
    return $._ConstantMapKeyIterable$(this);
  },
  get$values: function(_) {
    return $.map$1$ax(this._keys, new $.ConstantMap_values_anon(this));
  },
  get$isEmpty: function(_) {
    return $.$eq(this.length, 0);
  },
  toString$0: function(_) {
    return $.ToString_mapToString(this);
  },
  _throwUnmodifiable$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot modify unmodifiable Map"));
  },
  $indexSet: function(_, key, val) {
    return this._throwUnmodifiable$0();
  },
  putIfAbsent$2: function(_, key, ifAbsent) {
    return this._throwUnmodifiable$0();
  },
  remove$1: function(_, key) {
    return this._throwUnmodifiable$0();
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  clear$0: function(_) {
    return this._throwUnmodifiable$0();
  },
  $isMap: function() {
    return true;
  },
  $asMap: function() {
    return function (V) { return [$.String, V]; };
  }
};

$$.ConstantMap_forEach_anon = {"": "Closure;this_0,f_1",
  call$1: function(key) {
    return this.f_1.call$2(key, $.$index$asx(this.this_0, key));
  },
  $isFunction: true
};

$$.ConstantMap_values_anon = {"": "Closure;this_0",
  call$1: function(key) {
    return $.$index$asx(this.this_0, key);
  },
  $isFunction: true
};

$$._ConstantMapKeyIterable = {"": "Iterable;_liblib6$_map",
  get$iterator: function(_) {
    return $.get$iterator$ax(this._liblib6$_map._keys);
  },
  $asIterable: function() {
    return function () { return [$.String]; };
  }
};

$$.NoSuchMethodError_toString_anon = {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1, t2;
    t1 = this.box_0;
    if ($.$gt$n(t1.i_1, 0) === true) {
      t2 = t1.sb_0;
      t2.write$1(t2, ", ");
    }
    t2 = t1.sb_0;
    t2.write$1(t2, key);
    t2 = t1.sb_0;
    t2.write$1(t2, ": ");
    t2 = t1.sb_0;
    t2.write$1(t2, $.Error_safeToString(value));
    t1.i_1 = $.$add$ns(t1.i_1, 1);
  },
  $isFunction: true
};

$$.JSFunction = {"": "Object;",
  toString$0: function(receiver) {
    return "Closure";
  },
  $isFunction: true
};

$$.JSBool = {"": "Object;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true
};

$$.JSNull = {"": "Object;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  }
};

$$._Manager = {"": "Object;nextIsolateId@,currentManagerId,nextManagerId,currentContext<,rootContext,topEventLoop<,fromCommandLine,isWorker<,supportsWorkers,isolates,mainManager,managers",
  get$useWorkers: function() {
    return this.supportsWorkers;
  },
  get$needSerialization: function() {
    return this.get$useWorkers();
  },
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = $.get$globalWorker() != null && $.get$IsolateNatives_thisScript() != null;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { $.IsolateNatives__processWorkerMessage.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  maybeCloseWorker$0: function() {
    if (this.isWorker === true) {
      var t1 = this.isolates;
      t1 = t1.get$isEmpty(t1) === true && $.$eq(this.topEventLoop.activeTimerCount, 0) === true;
    } else
      t1 = false;
    if (t1) {
      t1 = this.mainManager;
      t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "close"])));
    }
  },
  _Manager$0: function() {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = $._EventLoop$();
    this.isolates = $.Map_Map();
    this.managers = $.Map_Map();
    if (this.isWorker === true) {
      this.mainManager = $._MainManagerStub$();
      this._nativeInitWorkerMessageHandler$0();
    }
  }
};

$$._IsolateContext = {"": "Object;id>,ports,isolateStatics",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(portId, port) {
    var t1 = this.ports;
    if (t1.containsKey$1(t1, portId))
      throw $.$$throw($._ExceptionImplementation$("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    t1 = this.ports;
    if (t1.get$isEmpty(t1) === true) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $._globalState();
    t2 = t1.get$nextIsolateId();
    t1.set$nextIsolateId($.$add$ns(t2, 1));
    this.id = t2;
    this.ports = $.Map_Map();
    this.isolateStatics = new Isolate;
  }
};

$$._EventLoop = {"": "Object;events,activeTimerCount",
  enqueue$3: function(isolate, fn, msg) {
    var t1 = this.events;
    t1.addLast$1(t1, $._IsolateEvent$(isolate, fn, msg));
  },
  dequeue$0: function() {
    var t1 = this.events;
    if (t1.get$isEmpty(t1) === true)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    var t1, t2;
    if ($globalState.rootContext != null) {
      t1 = $globalState.isolates;
      if (t1.containsKey$1(t1, $globalState.rootContext.id))
        if ($globalState.fromCommandLine === true) {
          t1 = $globalState.rootContext.ports;
          t2 = t1.get$isEmpty(t1) === true;
          t1 = t2;
        } else
          t1 = false;
      else
        t1 = false;
    } else
      t1 = false;
    if (t1)
      throw $.$$throw($._ExceptionImplementation$("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      $globalState.maybeCloseWorker$0();
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        t1 = $globalState.mainManager;
        t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)])));
      }

  }
};

$$._EventLoop__runHelper_next = {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    $.Timer_run(this);
  },
  $isFunction: true
};

$$._IsolateEvent = {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
};

$$._MainManagerStub = {"": "Object;",
  get$id: function(_) {
    return 0;
  },
  postMessage$1: function(_, msg) {
    $.get$globalThis().postMessage(msg);
  },
  terminate$0: function(_) {
  }
};

$$.IsolateNatives__processWorkerMessage_function = {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    $.IsolateNatives__startIsolate(this.entryPoint_0, this.replyTo_1);
  },
  $isFunction: true
};

$$._BaseSendPort = {"": "Object;_isolateId<",
  _checkReplyTo$1: function(replyTo) {
    if (replyTo != null && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_NativeJsSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_WorkerSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_BufferingSendPort))
      throw $.$$throw($._ExceptionImplementation$("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, port;
    completer = $._CompleterImpl$();
    port = $.ReceivePortImpl$();
    this.send$2(this, message, port.toSendPort$0());
    port.receive$1(new $._BaseSendPort_call_anon(completer, port));
    return completer.future;
  },
  $isFunction: true,
  $isSendPort: true
};

$$._BaseSendPort_call_anon = {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1 = this.port_1;
    t1.close$0(t1);
    t1 = this.completer_0;
    if (typeof value === "object" && value !== null && !!value.$isException)
      t1.completeError$1(value);
    else
      t1.complete$1(t1, value);
  },
  $isFunction: true
};

$$._NativeJsSendPort = {"": "_BaseSendPort;_receivePort<,_isolateId",
  send$2: function(_, message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, message, replyTo));
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!other.$is_NativeJsSendPort && $.$eq(this._receivePort, other._receivePort) === true;
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
};

$$._NativeJsSendPort_send_anon = {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $globalState.isolates;
    isolate = t4.$index(t4, t2.get$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_callback() == null)
      return;
    shouldSerialize = $globalState.currentContext != null && $.$eq($.get$id$x($globalState.currentContext), t2.get$_isolateId()) !== true;
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    $globalState.topEventLoop.enqueue$3(isolate, new $._NativeJsSendPort_send__anon(t1, t2, shouldSerialize), "receive " + $.S(msg));
  },
  $isFunction: true
};

$$._NativeJsSendPort_send__anon = {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (t1.get$_receivePort().get$_callback() != null) {
      if (this.shouldSerialize_5) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t1 = t1.get$_receivePort();
      t2 = this.box_0;
      t1._callback$2(t2.msg_0, t2.reply_1);
    }
  },
  $isFunction: true
};

$$._WorkerSendPort = {"": "_BaseSendPort;_workerId<,_receivePortId,_isolateId",
  send$2: function(_, message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(this, message, replyTo));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!other.$is_WorkerSendPort)
      t1 = $.$eq(this._workerId, other._workerId) === true && $.$eq(this._isolateId, other._isolateId) === true && $.$eq(this._receivePortId, other._receivePortId) === true;
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = $.$shl$n(this._workerId, 16);
    t2 = $.$shl$n(this._isolateId, 8);
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    return (t1 ^ t2 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
};

$$._WorkerSendPort_send_anon = {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($globalState.isWorker === true) {
      t1 = $globalState.mainManager;
      t1.postMessage$1(t1, workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1.get$_workerId());
      if (manager != null)
        $.postMessage$1$x(manager, workerMessage);
    }
  },
  $isFunction: true
};

$$.ReceivePortImpl = {"": "Object;_id<,_callback<",
  _callback$2: function(arg0, arg1) {
    return this._callback.call$2(arg0, arg1);
  },
  receive$1: function(onMessage) {
    this._callback = onMessage;
  },
  close$0: function(_) {
    this._callback = null;
    $globalState.currentContext.unregister$1(this._id);
  },
  toSendPort$0: function() {
    return $._NativeJsSendPort$(this, $.get$id$x($globalState.currentContext));
  },
  ReceivePortImpl$0: function() {
    $._globalState().get$currentContext().register$2(this._id, this);
  }
};

$$._waitForPendingPorts_anon = {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  $isFunction: true
};

$$._PendingSendPortFinder = {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, list, true);
    $.forEach$1$ax(list, new $._PendingSendPortFinder_visitList_anon(this));
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, map, true);
    $.forEach$1$ax($.get$values$x(map), new $._PendingSendPortFinder_visitMap_anon(this));
  },
  visitSendPort$1: function(port) {
    if (!!port.$is_BufferingSendPort && port.get$_port() == null)
      this.ports.push(port.get$_futurePort());
  },
  _PendingSendPortFinder$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._PendingSendPortFinder_visitList_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  $isFunction: true
};

$$._PendingSendPortFinder_visitMap_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  $isFunction: true
};

$$._JsSerializer = {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!x.$is_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    if (typeof x === "object" && x !== null && !!x.$is_BufferingSendPort)
      return this.visitBufferingSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(x));
  },
  visitNativeJsSendPort$1: function(port) {
    return ["sendport", $globalState.currentManagerId, port._isolateId, port._receivePort.get$_id()];
  },
  visitBufferingSendPort$1: function(port) {
    var t1 = port.get$_port();
    if (t1 != null)
      return this.visitSendPort$1(t1);
    else
      throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
  },
  _JsSerializer$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsCopier = {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!x.$is_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_WorkerSendPort)
      return this.visitWorkerSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_BufferingSendPort)
      return this.visitBufferingSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(this.get$p()));
  },
  visitNativeJsSendPort$1: function(port) {
    return $._NativeJsSendPort$(port._receivePort, port._isolateId);
  },
  visitWorkerSendPort$1: function(port) {
    return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
  },
  visitBufferingSendPort$1: function(port) {
    var t1 = port.get$_port();
    if (t1 != null)
      return this.visitSendPort$1(t1);
    else
      throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
  },
  _JsCopier$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsDeserializer = {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(x) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$asx(x);
    managerId = t1.$index(x, 1);
    isolateId = t1.$index(x, 2);
    receivePortId = t1.$index(x, 3);
    if ($.$eq(managerId, $globalState.currentManagerId) === true) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return $._NativeJsSendPort$(receivePort, isolateId);
    } else
      return $._WorkerSendPort$(managerId, isolateId, receivePortId);
  }
};

$$._JsVisitedMap = {"": "Object;tagged",
  $index: function(_, object) {
    return object['__MessageTraverser__attached_info__'];
  },
  $indexSet: function(_, object, info) {
    $.add$1$ax(this.tagged, object);
    object['__MessageTraverser__attached_info__'] = info;
  },
  reset$0: function(_) {
    this.tagged = $.List_List($);
  },
  cleanup$0: function() {
    var $length, i;
    for ($length = $.get$length$asx(this.tagged), i = 0; i < $length; ++i)
      $.$index$asx(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
    this.tagged = null;
  }
};

$$._MessageTraverserVisitedMap = {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
};

$$._MessageTraverser = {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || x.$isList()))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && x.$isMap())
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!x.$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$isSendPortSync)
      return this.visitSendPortSync$1(x);
    return this.visitObject$1(x);
  },
  visitObject$1: function(x) {
    throw $.$$throw("Message serialization: Illegal value " + $.S(x) + " passed");
  }
};

$$._Copier = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, i;
    if (typeof list !== "object" || list === null || list.constructor !== Array && !list.$isJavaScriptIndexingBehavior())
      return this.visitList$1$bailout1(1, list);
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    len = list.length;
    copy = $.List_List(len);
    t1 = this._visited;
    t1.$indexSet(t1, list, copy);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      copy[i] = this._dispatch$1(list[i]);
    }
    return copy;
  },
  visitList$1$bailout1: function(state0, list) {
    var t1, copy, len, t2, i, t3;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = $.List_List(len);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    for (t2 = copy.length, i = 0; $.JSNumber_methods.$lt(i, len); ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      copy[i] = t3;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = $.HashMap$();
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    $.forEach$1$ax(map, new $._Copier_visitMap_anon(t1, this));
    return t1.copy_0;
  }
};

$$._Copier_visitMap_anon = {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1, t2;
    t1 = this.box_0.copy_0;
    t2 = this.this_1;
    $.$indexSet$ax(t1, t2._dispatch$1(key), t2._dispatch$1(val));
  },
  $isFunction: true
};

$$._Serializer = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    t1 = $.getInterceptor$x(map);
    return ["map", id, this._serializeList$1($.toList$0$ax(t1.get$keys(map))), this._serializeList$1($.toList$0$ax(t1.get$values(map)))];
  },
  _serializeList$1: function(list) {
    var len, result, i;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !list.$isJavaScriptIndexingBehavior()))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      result[i] = this._dispatch$1(list[i]);
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list) {
    var t1, len, result, t2, i, t3;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = $.List_List(len);
    for (t2 = result.length, i = 0; $.JSNumber_methods.$lt(i, len); ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      result[i] = t3;
    }
    return result;
  }
};

$$._Deserializer = {"": "Object;",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._deserialized = $.HashMap$();
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    switch ($.$index$asx(x, 0)) {
      case "ref":
        return this._deserializeRef$1(x);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeRef$1: function(x) {
    var id, t1;
    id = $.$index$asx(x, 1);
    t1 = this._deserialized;
    return t1.$index(t1, id);
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, t2, len, i;
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.$isJavaScriptIndexingBehavior())
      return this._deserializeList$1$bailout(1, dartList, id);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id) {
    var t2, len, i;
    t2 = this._deserialized;
    t2.$indexSet(t2, id, dartList);
    t2 = $.getInterceptor$asx(dartList);
    len = t2.get$length(dartList);
    for (i = 0; $.JSNumber_methods.$lt(i, len); ++i)
      t2.$indexSet(dartList, i, this._deserializeHelper$1(t2.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = $.HashMap$();
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !keys.$isJavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(1, x, result, keys, t1);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !values.$isJavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(2, 0, result, keys, 0, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      result.$indexSet(result, key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, x, result, keys, t1, values) {
    switch (state0) {
      case 0:
        result = $.HashMap$();
        t1 = $.getInterceptor$asx(x);
        id = t1.$index(x, 1);
        t2 = this._deserialized;
        t2.$indexSet(t2, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        var id, t2, t3, len, i;
        state0 = 0;
        t3 = $.getInterceptor$asx(keys);
        len = t3.get$length(keys);
        for (t1 = $.getInterceptor$asx(values), i = 0; $.JSNumber_methods.$lt(i, len); ++i)
          result.$indexSet(result, this._deserializeHelper$1(t3.$index(keys, i)), this._deserializeHelper$1(t1.$index(values, i)));
        return result;
    }
  },
  deserializeObject$1: function(x) {
    throw $.$$throw("Unexpected serialized object");
  }
};

$$.TimerImpl = {"": "Object;_once,_inEventLoop,_handle?",
  cancel$0: function(_) {
    var t1;
    if ($.get$globalThis().setTimeout != null) {
      if (this._inEventLoop)
        throw $.$$throw($.UnsupportedError$("Timer in event loop cannot be canceled."));
      if (this._handle == null)
        return;
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = $.$sub$n(t1.activeTimerCount, 1);
      if (this._once)
        $.get$globalThis().clearTimeout(this._handle);
      else
        $.get$globalThis().clearInterval(this._handle);
      this._handle = null;
    } else
      throw $.$$throw($.UnsupportedError$("Canceling a timer."));
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1;
    if ($.$eq(milliseconds, 0) === true)
      t1 = !$.hasTimer() || $._globalState().get$isWorker() === true;
    else
      t1 = false;
    if (t1) {
      $._globalState().get$topEventLoop().enqueue$3($._globalState().get$currentContext(), callback, "timer");
      this._inEventLoop = true;
    } else if ($.hasTimer()) {
      t1 = $._globalState().get$topEventLoop();
      t1.activeTimerCount = $.$add$ns(t1.activeTimerCount, 1);
      t1 = new $.internalCallback(this, callback);
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(t1, 0), milliseconds);
    } else
      throw $.$$throw($.UnsupportedError$("Timer greater than 0."));
  }
};

$$.internalCallback = {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$0();
    this.this_0.set$_handle(null);
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = $.$sub$n(t1.activeTimerCount, 1);
  },
  $isFunction: true
};

$$.JSArray = {"": "Object;",
  add$1: function(receiver, value) {
    $.checkGrowable(receiver, "add");
    receiver.push(value);
  },
  removeLast$0: function(receiver) {
    $.checkGrowable(receiver, "removeLast");
    if (receiver.length === 0)
      throw $.$$throw($.RangeError$value(-1));
    return receiver.pop();
  },
  remove$1: function(receiver, element) {
    var i;
    $.checkGrowable(receiver, "remove");
    for (i = 0; i < receiver.length; ++i)
      if ($.$eq(receiver[i], element) === true) {
        receiver.splice(i, 1);
        return;
      }
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  addAll$1: function(receiver, collection) {
    var t1, t2;
    for (t1 = $.get$iterator$ax(collection); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      $.checkGrowable(receiver, "add");
      receiver.push(t2);
    }
  },
  addLast$1: function(receiver, value) {
    $.checkGrowable(receiver, "addLast");
    receiver.push(value);
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  elementAt$1: function(receiver, index) {
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  sublist$2: function(receiver, start, end) {
    $.checkNull(start);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (start < 0 || start > receiver.length)
      throw $.$$throw($.RangeError$range(start, 0, receiver.length));
    if (end == null)
      end = receiver.length;
    else {
      if (!(typeof end === "number" && Math.floor(end) === end))
        throw $.$$throw($.ArgumentError$(end));
      if (end < start || end > receiver.length)
        throw $.$$throw($.RangeError$range(end, start, receiver.length));
    }
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  get$last: function(receiver) {
    var t1 = receiver.length;
    if (t1 > 0)
      return receiver[t1 - 1];
    throw $.$$throw($.StateError$("No elements"));
  },
  setRange$4: function(receiver, start, $length, from, startFrom) {
    $.checkMutable(receiver, "set range");
    $.IterableMixinWorkaround_setRangeList(receiver, start, $length, from, startFrom);
  },
  contains$1: function(receiver, other) {
    var t1, i;
    for (t1 = $.getInterceptor(other), i = 0; i < receiver.length; ++i)
      if (t1.$eq(other, receiver[i]) === true)
        return true;
    return false;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return $.ToString_collectionToString(receiver);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  toSet$0: function(receiver) {
    var t1 = $.HashSet$();
    t1.addAll$1(t1, receiver);
    return t1;
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (!(typeof newLength === "number" && Math.floor(newLength) === newLength))
      throw $.$$throw($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.$$throw($.RangeError$value(newLength));
    $.checkGrowable(receiver, "set length");
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.checkMutable(receiver, "indexed set");
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    receiver[index] = value;
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return null;
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return null;
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return null;
  }
};

$$.JSMutableArray = {"": "JSArray;",
  $asList: function() {
    return function () { return [null]; };
  },
  $asCollection: function() {
    return function () { return [null]; };
  },
  $asIterable: function() {
    return function () { return [null]; };
  }
};

$$.JSFixedArray = {"": "JSMutableArray;"};

$$.JSExtendableArray = {"": "JSMutableArray;"};

$$.DartError = {"": "Object;",
  get$stack: function() {
    return this.stack;
  },
  toString$0: function(_) {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.toString$0(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.get$stack());
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper.call$0;
  }
};

$$.StackTrace = {"": "Object;stack",
  toString$0: function(_) {
    var t1 = this.stack;
    return t1 != null ? t1 : "";
  }
};

$$.invokeClosure_anon = {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  },
  $isFunction: true
};

$$.invokeClosure_anon0 = {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  },
  $isFunction: true
};

$$.invokeClosure_anon1 = {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  },
  $isFunction: true
};

$$.Closure = {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  },
  $isFunction: true
};

$$.Null = {"": "Object;"};

$$.CastErrorImplementation = {"": "Object;message",
  toString$0: function(_) {
    return this.message;
  }
};

$$.JSNumber = {"": "Object;",
  compareTo$1: function(receiver, b) {
    var bIsNegative;
    if (!(typeof b === "number"))
      throw $.$$throw($.ArgumentError$(b));
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      if (receiver === 0) {
        bIsNegative = this.get$isNegative(b);
        if ($.$eq(this.get$isNegative(receiver), bIsNegative) === true)
          return 0;
        if (this.get$isNegative(receiver) === true)
          return -1;
        return 1;
      }
      return 0;
    } else if (this.get$isNaN(receiver)) {
      if (this.get$isNaN(b))
        return 0;
      return 1;
    } else
      return -1;
  },
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  get$isInfinite: function(receiver) {
    return receiver == Infinity || receiver == -Infinity;
  },
  remainder$1: function(receiver, b) {
    $.checkNull(b);
    return receiver % b;
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  toInt$0: function(receiver) {
    var truncated;
    if (this.get$isNaN(receiver))
      throw $.$$throw($.UnsupportedError$("NaN"));
    if (this.get$isInfinite(receiver))
      throw $.$$throw($.UnsupportedError$("Infinity"));
    truncated = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
    return truncated == -0.0 ? 0 : truncated;
  },
  truncate$0: function(receiver) {
    return this.toInt$0(receiver);
  },
  round$0: function(receiver) {
    return this.toInt$0(this.roundToDouble$0(receiver));
  },
  roundToDouble$0: function(receiver) {
    if (receiver < 0)
      return -Math.round(-receiver);
    else
      return Math.round(receiver);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && (1 / receiver) < 0)
      return "-0.0";
    else
      return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $negate: function(receiver) {
    return -receiver;
  },
  $add: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver - other;
  },
  $mul: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver * other;
  },
  $mod: function(receiver, other) {
    var result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  $tdiv: function(receiver, other) {
    return this.truncate$0(receiver / other);
  },
  $shl: function(receiver, other) {
    if (other < 0)
      throw $.$$throw($.ArgumentError$(other));
    if (other > 31)
      return 0;
    return (receiver << other) >>> 0;
  },
  $and: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver & other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver >= other;
  },
  $isnum: true
};

$$.JSInt = {"": "JSNumber;", $is$int: true, $isnum: true};

$$.JSDouble = {"": "JSNumber;", $is$double: true, $isnum: true};

$$.JSString = {"": "Object;",
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw $.$$throw($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.$$throw($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  allMatches$1: function(receiver, str) {
    $.checkString(str);
    return $.allMatchesInStringUnchecked(receiver, str);
  },
  $add: function(receiver, other) {
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver + other;
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    $.checkString(other);
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    $.checkString(to);
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  split$1: function(receiver, pattern) {
    $.checkNull(pattern);
    return receiver.split(pattern);
  },
  startsWith$1: function(receiver, other) {
    var otherLength;
    $.checkString(other);
    otherLength = other.length;
    if (otherLength > receiver.length)
      return false;
    return other == receiver.substring(0, otherLength);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    var t1;
    $.checkNum(startIndex);
    if (endIndex == null)
      endIndex = receiver.length;
    $.checkNum(endIndex);
    t1 = $.getInterceptor$n(startIndex);
    if (t1.$lt(startIndex, 0) === true)
      throw $.$$throw($.RangeError$value(startIndex));
    if (t1.$gt(startIndex, endIndex) === true)
      throw $.$$throw($.RangeError$value(startIndex));
    if ($.$gt$n(endIndex, receiver.length) === true)
      throw $.$$throw($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase();
  },
  toUpperCase$0: function(receiver) {
    return receiver.toUpperCase();
  },
  trim$0: function(receiver) {
    return receiver.trim();
  },
  indexOf$2: function(receiver, other, start) {
    $.checkNull(other);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    if (start < 0)
      return -1;
    return receiver.indexOf(other, start);
  },
  contains$2: function(receiver, other, startIndex) {
    $.checkNull(other);
    return $.stringContainsUnchecked(receiver, other, startIndex);
  },
  contains$1: function($receiver, other) {
    return this.contains$2($receiver, other, 0);
  },
  get$contains: function(receiver) {
    return new $.Bound_contains_JSString(this, "contains$2", receiver);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  compareTo$1: function(receiver, other) {
    var t1;
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var hash, i, hash0, hash1;
    for (hash = 0, i = 0; i < receiver.length; ++i, hash = hash1) {
      hash0 = 536870911 & hash + receiver.charCodeAt(i);
      hash1 = 536870911 & hash0 + ((524287 & hash0) << 10 >>> 0);
      hash1 = hash1 ^ (hash1 >> 6);
    }
    hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash0 = hash0 ^ (hash0 >> 11);
    return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $isString: true
};

$$._convertJsonToDart_anon = {"": "Closure;",
  call$2: function(key, value) {
    return value;
  },
  $isFunction: true
};

$$._convertJsonToDart_walk = {"": "Closure;revive_0",
  call$1: function(e) {
    var list, t1, i, keys, map, key, proto;
    if (e == null || typeof e != "object")
      return e;
    if (Object.getPrototypeOf(e) === Array.prototype) {
      list = e;
      for (t1 = this.revive_0, i = 0; i < list.length; ++i)
        list[i]=t1.call$2(i, this.call$1(list[i]));
      return list;
    }
    keys = Object.keys(e);
    map = $.makeLiteralMap([]);
    for (t1 = this.revive_0, i = 0; i < keys.length; ++i) {
      key = keys[i];
      map.$indexSet(map, key, t1.call$2(key, this.call$1(e[key])));
    }
    proto = e.__proto__;
    if (typeof proto !== "undefined" && proto !== Object.prototype)
      map.$indexSet(map, "__proto__", t1.call$2("__proto__", this.call$1(proto)));
    return map;
  },
  $isFunction: true
};

$$.MetaInfo = {"": "Object;_tag<,_tags,_set<"};

$$.JSSyntaxRegExp = {"": "Object;_pattern,_isMultiLine,_isCaseSensitive,_nativeRegExp",
  firstMatch$1: function(str) {
    var m, matchStart, t1;
    m = this._nativeRegExp.exec($.checkString(str));
    if (m == null)
      return;
    matchStart = m.index;
    t1 = $.get$length$asx($.$index$asx(m, 0));
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $._MatchImplementation$(this.get$pattern(this), str, matchStart, matchStart + t1, m);
  },
  hasMatch$1: function(str) {
    return this._nativeRegExp.test($.checkString(str));
  },
  allMatches$1: function(_, str) {
    $.checkString(str);
    return $._AllMatchesIterable$(this, str);
  },
  get$pattern: function(_) {
    return this._pattern;
  },
  get$isMultiLine: function() {
    return this._isMultiLine;
  },
  get$isCaseSensitive: function() {
    return this._isCaseSensitive;
  },
  $isJSSyntaxRegExp: true,
  $isRegExp: true
};

$$._MatchImplementation = {"": "Object;pattern>,str,start,end,_groups",
  group$1: function(index) {
    return $.$index$asx(this._groups, index);
  },
  $index: function(_, index) {
    var t1 = this._groups;
    if (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior())
      return this.$$index$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, index, t1) {
    return $.$index$asx(t1, index);
  }
};

$$._AllMatchesIterable = {"": "Iterable;_re,_str",
  get$iterator: function(_) {
    return $._AllMatchesIterator$(this._re, this._str);
  },
  $asIterable: function() {
    return function () { return [$.Match]; };
  }
};

$$._AllMatchesIterator = {"": "Object;_re,_str,_liblib6$_current",
  get$current: function() {
    return this._liblib6$_current;
  },
  moveNext$0: function() {
    this._liblib6$_current = this._re.firstMatch$1(this._str);
    return this._liblib6$_current != null;
  }
};

$$.StringMatch = {"": "Object;start,str,pattern>",
  $index: function(_, g) {
    return this.group$1(g);
  },
  group$1: function(group_) {
    if ($.$eq(group_, 0) !== true)
      throw $.$$throw($.RangeError$value(group_));
    return this.pattern;
  }
};

$$.AsyncError = {"": "Object;error>,stackTrace<,cause<",
  _writeOn$1: function(buffer) {
    var message, exception, t1;
    buffer.write$1(buffer, "'");
    message = null;
    try {
      message = $.toString$0(this.error);
    } catch (exception) {
      $.unwrapException(exception);
      message = $.Error_safeToString(this.error);
    }

    buffer.write$1(buffer, message);
    buffer.write$1(buffer, "'\n");
    t1 = this.stackTrace;
    if (t1 != null) {
      buffer.write$1(buffer, "Stack trace:\n");
      buffer.writeln$1($.toString$0(t1));
    }
  },
  toString$0: function(_) {
    var buffer, cause;
    buffer = $.StringBuffer$("");
    buffer.write$1(buffer, "AsyncError: ");
    this._writeOn$1(buffer);
    cause = this.cause;
    for (; cause != null;) {
      buffer.write$1(buffer, "Caused by: ");
      cause._writeOn$1(buffer);
      cause = cause.get$cause();
    }
    return buffer.toString$0(buffer);
  },
  throwDelayed$0: function() {
    var reportError, exception;
    reportError = new $.AsyncError_throwDelayed_reportError(this);
    try {
      $.Timer_run(new $.AsyncError_throwDelayed_anon(this, reportError));
    } catch (exception) {
      $.unwrapException(exception);
      reportError.call$0();
    }

  },
  $isAsyncError: true
};

$$.AsyncError_throwDelayed_reportError = {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0;
    $.Primitives_printString("Uncaught Error: " + $.S($.get$error$x(t1)));
    t1 = t1.get$stackTrace();
    if (t1 != null)
      $.Primitives_printString("Stack Trace:\n" + $.S(t1) + "\n");
  },
  $isFunction: true
};

$$.AsyncError_throwDelayed_anon = {"": "Closure;this_1,reportError_2",
  call$0: function() {
    this.reportError_2.call$0();
    throw $.$$throw($.get$error$x(this.this_1));
  },
  $isFunction: true
};

$$._CompleterImpl = {"": "Object;future,_isComplete",
  complete$1: function(_, value) {
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    this.future._liblib1$_setValue$1(value);
  },
  complete$0: function($receiver) {
    return this.complete$1($receiver, null);
  },
  completeError$2: function(error, stackTrace) {
    var asyncError;
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    asyncError = typeof error === "object" && error !== null && !!error.$isAsyncError ? error : $.AsyncError$(error, stackTrace);
    this.future._setError$1(asyncError);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  }
};

$$._FutureListenerWrapper = {"": "Object;future,_nextListener@",
  _sendValue$1: function(value) {
    this.future._liblib1$_setValue$1(value);
  },
  _sendError$1: function(error) {
    this.future._setError$1(error);
  }
};

$$._FutureImpl = {"": "Object;_state@,_resultOrListeners<",
  get$_isComplete: function() {
    return this._state !== 0;
  },
  get$_hasValue: function() {
    return this._state === 1;
  },
  get$_hasError: function() {
    return (this._state & 2) !== 0;
  },
  get$_hasUnhandledError: function() {
    return (this._state & 4) !== 0;
  },
  then$2$onError: function(f, onError) {
    var t1;
    if (this.get$_isComplete() !== true) {
      if (onError == null) {
        t1 = $._ThenFuture$(f);
        t1._subscribeTo$1(this);
        return t1;
      }
      t1 = $._SubscribeFuture$(f, onError);
      t1._subscribeTo$1(this);
      return t1;
    }
    if (this.get$_hasError() === true) {
      if (onError != null)
        return this._handleError$2(onError, null);
      return $._FutureWrapper$(this);
    } else
      return this._handleValue$1(f);
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1;
    if (this.get$_hasValue() === true)
      return $._FutureWrapper$(this);
    if (this.get$_isComplete() !== true) {
      t1 = $._CatchErrorFuture$(f, test);
      t1._subscribeTo$1(this);
      return t1;
    } else
      return this._handleError$2(f, test);
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  whenComplete$1: function(action) {
    var whenFuture = $._WhenFuture$(action);
    if (this.get$_isComplete() !== true)
      this._addListener$1(whenFuture);
    else if (this.get$_hasValue() === true)
      $.Timer_run(new $._FutureImpl_whenComplete_anon(whenFuture, this._resultOrListeners));
    else {
      this._state = (this._state & 4294967291) >>> 0;
      $.Timer_run(new $._FutureImpl_whenComplete_anon0(whenFuture, this._resultOrListeners));
    }
    return whenFuture;
  },
  _handleValue$1: function(onValue) {
    var thenFuture = $._ThenFuture$(onValue);
    $.Timer_run(new $._FutureImpl__handleValue_anon(thenFuture, this._resultOrListeners));
    return thenFuture;
  },
  _handleError$2: function(onError, test) {
    var error, errorFuture;
    this._state = (this._state & 4294967291) >>> 0;
    error = this._resultOrListeners;
    errorFuture = $._CatchErrorFuture$(onError, test);
    $.Timer_run(new $._FutureImpl__handleError_anon(error, errorFuture));
    return errorFuture;
  },
  _liblib1$_setValue$1: function(value) {
    var listeners, listeners0;
    if (this.get$_isComplete() === true)
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 1;
    this._resultOrListeners = value;
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  get$_liblib1$_setValue: function() {
    return new $.BoundClosure$1(this, "_liblib1$_setValue$1");
  },
  _setError$1: function(error) {
    var listeners, listeners0;
    if (this.get$_isComplete() === true)
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 2;
    this._resultOrListeners = error;
    if (listeners == null) {
      this._scheduleUnhandledError$0();
      return;
    }
    do {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
      if (listeners0 != null) {
        listeners = listeners0;
        continue;
      } else
        break;
    } while (true);
  },
  get$_setError: function() {
    return new $.BoundClosure$1(this, "_setError$1");
  },
  _scheduleUnhandledError$0: function() {
    this._state = (this._state | 4) >>> 0;
    $.Timer_run(new $._FutureImpl__scheduleUnhandledError_anon(this));
  },
  _addListener$1: function(listener) {
    listener.set$_nextListener(this._resultOrListeners);
    this._resultOrListeners = listener;
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    if (this.get$_isComplete() !== true)
      this._addListener$1(future._asListener$0());
    else if (this.get$_hasValue() === true)
      future._liblib1$_setValue$1(this._resultOrListeners);
    else {
      this._state = (this._state & 4294967291) >>> 0;
      future._setError$1(this._resultOrListeners);
    }
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!result.$isFuture)
      if (!!result.$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_liblib1$_setValue(), this.get$_setError());
        return;
      }
    else
      this._liblib1$_setValue$1(result);
  },
  _asListener$0: function() {
    return $._FutureListenerWrapper$(this);
  },
  _FutureImpl$immediateError$2: function(error, stackTrace) {
    this._setError$1(typeof error === "object" && error !== null && !!error.$isAsyncError ? error : $.AsyncError$(error, stackTrace));
  },
  _FutureImpl$immediate$1: function(value) {
    this._state = 1;
    this._resultOrListeners = value;
  },
  $is_FutureImpl: true,
  $isFuture: true
};

$$._FutureImpl__FutureImpl$wait_handleError = {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1.completer_0.completeError$2($.get$error$x(error), error.get$stackTrace());
    }
  },
  $isFunction: true
};

$$._FutureImpl__FutureImpl$wait_anon = {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    $.$indexSet$ax(t2, this.pos_1, value);
    t1.remaining_2 = $.$sub$n(t1.remaining_2, 1);
    if ($.$eq(t1.remaining_2, 0) === true) {
      t2 = t1.completer_0;
      t2.complete$1(t2, t1.values_1);
    }
  },
  $isFunction: true
};

$$._FutureImpl_whenComplete_anon = {"": "Closure;whenFuture_0,value_1",
  call$0: function() {
    this.whenFuture_0._sendValue$1(this.value_1);
  },
  $isFunction: true
};

$$._FutureImpl_whenComplete_anon0 = {"": "Closure;whenFuture_2,error_3",
  call$0: function() {
    this.whenFuture_2._sendError$1(this.error_3);
  },
  $isFunction: true
};

$$._FutureImpl__handleValue_anon = {"": "Closure;thenFuture_0,value_1",
  call$0: function() {
    this.thenFuture_0._sendValue$1(this.value_1);
  },
  $isFunction: true
};

$$._FutureImpl__handleError_anon = {"": "Closure;error_0,errorFuture_1",
  call$0: function() {
    this.errorFuture_1._sendError$1(this.error_0);
  },
  $isFunction: true
};

$$._FutureImpl__scheduleUnhandledError_anon = {"": "Closure;this_0",
  call$0: function() {
    var t1, error, t2;
    t1 = this.this_0;
    if (t1.get$_hasUnhandledError() === true) {
      t1.set$_state((t1.get$_state() & 4294967291) >>> 0);
      error = t1.get$_resultOrListeners();
      t1 = $.getInterceptor$x(error);
      $.Primitives_printString("Uncaught Error: " + $.S(t1.get$error(error)));
      t2 = error.get$stackTrace();
      if (t2 != null)
        $.Primitives_printString("Stack Trace:\n" + $.S(t2) + "\n");
      throw $.$$throw(t1.get$error(error));
    }
  },
  $isFunction: true
};

$$._TransformFuture = {"": "_FutureImpl;_nextListener@",
  _subscribeTo$1: function(future) {
    future._addListener$1(this);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._ThenFuture = {"": "_TransformFuture;_onValue,_nextListener,_state,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _sendValue$1: function(value) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$(e0, s));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  _sendError$1: function(error) {
    this._setError$1(error);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._CatchErrorFuture = {"": "_TransformFuture;_test,_onError,_nextListener,_state,_resultOrListeners",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendValue$1: function(value) {
    this._liblib1$_setValue$1(value);
  },
  _sendError$1: function(error) {
    var matchesTest, e, s, result, e0, e1, s0, exception, t1;
    if (this._test != null) {
      matchesTest = null;
      try {
        matchesTest = this._test$1($.get$error$x(error));
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e, s, error));
        return;
      }

      if (matchesTest !== true) {
        this._setError$1(error);
        return;
      }
    }
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e0 = t1;
        this._setError$1(e0);
        return;
      } else {
        e1 = t1;
        s0 = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e1, s0, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  $as_FutureImpl: null,
  $asFuture: null
};

$$._SubscribeFuture = {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendError$1: function(error) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e0, s, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._WhenFuture = {"": "_TransformFuture;_action,_nextListener,_state,_resultOrListeners",
  _action$0: function() {
    return this._action.call$0();
  },
  _sendValue$1: function(value) {
    var result, resultFuture, e, e0, s, t1, exception;
    try {
      result = this._action$0();
      t1 = result;
      if (typeof t1 === "object" && t1 !== null && !!t1.$isFuture) {
        resultFuture = result;
        resultFuture.then$2$onError(new $._WhenFuture__sendValue_anon(this, value), this.get$_setError());
        return;
      }
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$(e0, s));
        return;
      }
    }

    this._liblib1$_setValue$1(value);
  },
  _sendError$1: function(error) {
    var t1, result, resultFuture, e, e0, s, t2, exception;
    t1 = {};
    t1.error_0 = error;
    try {
      result = this._action$0();
      t2 = result;
      if (typeof t2 === "object" && t2 !== null && !!t2.$isFuture) {
        resultFuture = result;
        resultFuture.then$2$onError(new $._WhenFuture__sendError_anon(t1, this), this.get$_setError());
        return;
      }
    } catch (exception) {
      t2 = $.unwrapException(exception);
      if (typeof t2 === "object" && t2 !== null && !!t2.$isAsyncError) {
        e = t2;
        t1.error_0 = e;
      } else {
        e0 = t2;
        s = $.getTraceFromException(exception);
        t1.error_0 = $.AsyncError$withCause(e0, s, t1.error_0);
      }
    }

    this._setError$1(t1.error_0);
  },
  $as_FutureImpl: null,
  $asFuture: null
};

$$._WhenFuture__sendValue_anon = {"": "Closure;this_0,value_1",
  call$1: function(_) {
    this.this_0._liblib1$_setValue$1(this.value_1);
  },
  $isFunction: true
};

$$._WhenFuture__sendError_anon = {"": "Closure;box_0,this_1",
  call$1: function(_) {
    this.this_1._setError$1(this.box_0.error_0);
  },
  $isFunction: true
};

$$._FutureWrapper = {"": "Object;_future",
  then$2$onError: function($function, onError) {
    return this._future.then$2$onError($function, onError);
  },
  then$1: function($function) {
    return this.then$2$onError($function, null);
  },
  catchError$2$test: function($function, test) {
    return this._future.catchError$2$test($function, test);
  },
  catchError$1: function($function) {
    return this.catchError$2$test($function, null);
  },
  whenComplete$1: function(action) {
    return this._future.whenComplete$1(action);
  },
  $isFuture: true
};

$$.Stream = {"": "Object;",
  where$1: function(_, test) {
    return $._WhereStream$(this, test);
  },
  map$1: function(_, convert) {
    return $._MapStream$(this, convert);
  },
  contains$1: function(_, match) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$();
    t1.subscription_0 = null;
    t2 = new $.Stream_contains_anon(t1, match, future);
    t3 = future.get$_setError();
    t1.subscription_0 = this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_contains_anon0(future), t3, true);
    return future;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  get$length: function(_) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$();
    t1.count_0 = 0;
    t2 = new $.Stream_length_anon(t1);
    t3 = future.get$_setError();
    this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_length_anon0(t1, future), t3, true);
    return future;
  },
  get$isEmpty: function(_) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$();
    t1.subscription_0 = null;
    t2 = new $.Stream_isEmpty_anon(t1, future);
    t3 = future.get$_setError();
    t1.subscription_0 = this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_isEmpty_anon0(future), t3, true);
    return future;
  },
  toList$0: function(_) {
    var result, future, t1, t2;
    result = [];
    future = $._FutureImpl$();
    t1 = new $.Stream_toList_anon(result);
    t2 = future.get$_setError();
    this.listen$4$onDone$onError$unsubscribeOnError(t1, new $.Stream_toList_anon0(result, future), t2, true);
    return future;
  },
  elementAt$1: function(_, index) {
    var t1, t2, future, t3;
    t1 = {};
    t1.index_0 = index;
    t2 = t1.index_0;
    if (!(typeof t2 === "number" && Math.floor(t2) === t2) || $.$lt$n(t2, 0) === true)
      throw $.$$throw($.ArgumentError$(t1.index_0));
    future = $._FutureImpl$();
    t1.subscription_1 = null;
    t2 = new $.Stream_elementAt_anon(t1, future);
    t3 = future.get$_setError();
    t1.subscription_1 = this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_elementAt_anon0(future), t3, true);
    return future;
  }
};

$$.Stream_contains_anon = {"": "Closure;box_0,match_1,future_2",
  call$1: function(element) {
    var t1, t2, t3;
    t1 = new $.Stream_contains__anon(this.match_1, element);
    t2 = this.box_0;
    t3 = this.future_2;
    $._runUserCode(t1, new $.Stream_contains__anon0(t2, t3), $._cancelAndError(t2.subscription_0, t3), null);
  },
  $isFunction: true
};

$$.Stream_contains__anon = {"": "Closure;match_3,element_4",
  call$0: function() {
    return $.$eq(this.element_4, this.match_3);
  },
  $isFunction: true
};

$$.Stream_contains__anon0 = {"": "Closure;box_0,future_5",
  call$1: function(isMatch) {
    if (isMatch === true) {
      $.cancel$0$x(this.box_0.subscription_0);
      this.future_5._liblib1$_setValue$1(true);
    }
  },
  $isFunction: true
};

$$.Stream_contains_anon0 = {"": "Closure;future_6",
  call$0: function() {
    this.future_6._liblib1$_setValue$1(false);
  },
  $isFunction: true
};

$$.Stream_length_anon = {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = $.$add$ns(t1.count_0, 1);
  },
  $isFunction: true
};

$$.Stream_length_anon0 = {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._liblib1$_setValue$1(this.box_0.count_0);
  },
  $isFunction: true
};

$$.Stream_isEmpty_anon = {"": "Closure;box_0,future_1",
  call$1: function(_) {
    $.cancel$0$x(this.box_0.subscription_0);
    this.future_1._liblib1$_setValue$1(false);
  },
  $isFunction: true
};

$$.Stream_isEmpty_anon0 = {"": "Closure;future_2",
  call$0: function() {
    this.future_2._liblib1$_setValue$1(true);
  },
  $isFunction: true
};

$$.Stream_toList_anon = {"": "Closure;result_0",
  call$1: function(data) {
    this.result_0.push(data);
  },
  $isFunction: true
};

$$.Stream_toList_anon0 = {"": "Closure;result_1,future_2",
  call$0: function() {
    this.future_2._liblib1$_setValue$1(this.result_1);
  },
  $isFunction: true
};

$$.Stream_elementAt_anon = {"": "Closure;box_0,future_1",
  call$1: function(value) {
    var t1 = this.box_0;
    if ($.$eq(t1.index_0, 0) === true) {
      this.future_1._liblib1$_setValue$1(value);
      $.cancel$0$x(t1.subscription_1);
      return;
    }
    t1.index_0 = $.$sub$n(t1.index_0, 1);
  },
  $isFunction: true
};

$$.Stream_elementAt_anon0 = {"": "Closure;future_2",
  call$0: function() {
    this.future_2._setError$1($.AsyncError$($.StateError$("Not enough elements for elementAt"), null));
  },
  $isFunction: true
};

$$.StreamSubscription = {"": "Object;"};

$$._cancelAndError_anon = {"": "Closure;subscription_0,future_1",
  call$1: function(error) {
    $.cancel$0$x(this.subscription_0);
    this.future_1._setError$1(error);
  },
  $isFunction: true
};

$$._ForwardingStream = {"": "Stream;",
  listen$4$onDone$onError$unsubscribeOnError: function(onData, onDone, onError, unsubscribeOnError) {
    if (onData == null)
      onData = $._nullDataHandler;
    if (onError == null)
      onError = $._nullErrorHandler;
    if (onDone == null)
      onDone = $._nullDoneHandler;
    return this._createSubscription$4(onData, onError, onDone, true === unsubscribeOnError);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, onDone, onError, null);
  },
  listen$1: function(onData) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, null, null, null);
  },
  _createSubscription$4: function(onData, onError, onDone, unsubscribeOnError) {
    return $._ForwardingStreamSubscription$(this, onData, onError, onDone, unsubscribeOnError);
  },
  _handleData$2: function(data, sink) {
    sink._sendData$1(data);
  },
  _handleError$2: function(error, sink) {
    sink._sendError$1(error);
  },
  _handleDone$1: function(sink) {
    sink._sendDone$0();
  }
};

$$._BaseStreamSubscription = {"": "Object;",
  _onData$1: function(arg0) {
    return this._onData.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _onDone$0: function() {
    return this._onDone.call$0();
  },
  onError$1: function(_, handleError) {
    this._onError = handleError == null ? $._nullErrorHandler : handleError;
  },
  get$onError: function(receiver) {
    return new $.BoundClosure$i1(this, "onError$1", receiver);
  },
  _BaseStreamSubscription$3: function(_onData, _onError, _onDone) {
    if (this._onData == null)
      this._onData = $._nullDataHandler;
    if (this._onError == null)
      this._onError = $._nullErrorHandler;
    if (this._onDone == null)
      this._onDone = $._nullDoneHandler;
  }
};

$$._ForwardingStreamSubscription = {"": "_BaseStreamSubscription;_stream,_unsubscribeOnError,_subscription,_onData,_onError,_onDone",
  cancel$0: function(_) {
    var t1 = this._subscription;
    if (t1 == null)
      throw $.$$throw($.StateError$("Subscription has been unsubscribed"));
    $.cancel$0$x(t1);
    this._subscription = null;
  },
  _sendData$1: function(data) {
    this._onData$1(data);
  },
  _sendError$1: function(error) {
    this._onError$1(error);
    if (this._unsubscribeOnError) {
      $.cancel$0$x(this._subscription);
      this._subscription = null;
    }
  },
  _sendDone$0: function() {
    var t1 = this._subscription;
    if (t1 != null) {
      $.cancel$0$x(t1);
      this._subscription = null;
    }
    this._onDone$0();
  },
  _handleData$1: function(data) {
    this._stream._handleData$2(data, this);
  },
  get$_handleData: function() {
    return new $.BoundClosure$1(this, "_handleData$1");
  },
  _handleError$1: function(error) {
    this._stream._handleError$2(error, this);
  },
  get$_handleError: function() {
    return new $.BoundClosure$1(this, "_handleError$1");
  },
  _handleDone$0: function() {
    this._subscription = null;
    this._stream._handleDone$1(this);
  },
  get$_handleDone: function() {
    return new $.BoundClosure$0(this, "_handleDone$0");
  },
  _ForwardingStreamSubscription$5: function(_stream, onData, onError, onDone, _unsubscribeOnError) {
    var t1, t2;
    t1 = this.get$_handleData();
    t2 = this.get$_handleError();
    this._subscription = this._stream._source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
  }
};

$$._WhereStream = {"": "_ForwardingStream;_test,_source",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var satisfies, e, s, exception, t1;
    satisfies = null;
    try {
      satisfies = this._test$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      sink._sendError$1($._asyncError(e, s, null));
      return;
    }

    if (satisfies === true)
      sink._sendData$1(inputEvent);
  }
};

$$._MapStream = {"": "_ForwardingStream;_transform,_source",
  _transform$1: function(arg0) {
    return this._transform.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var outputEvent, e, s, exception, t1;
    outputEvent = null;
    try {
      outputEvent = this._transform$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      sink._sendError$1($._asyncError(e, s, null));
      return;
    }

    sink._sendData$1(outputEvent);
  }
};

$$.Timer_run_anon = {"": "Closure;",
  call$0: function() {
    var runCallbacks, i, callback, newCallbacks, exception;
    runCallbacks = $.get$Timer__runCallbacks();
    $.Timer__runCallbacks = [];
    for (i = 0; $.$lt$n(i, $.get$length$asx(runCallbacks)) === true; i = $.$add$ns(i, 1)) {
      callback = $.$index$asx(runCallbacks, i);
      try {
        callback.call$0();
      } catch (exception) {
        $.unwrapException(exception);
        newCallbacks = $.get$Timer__runCallbacks();
        $.Timer__runCallbacks = [];
        i = $.$add$ns(i, 1);
        $.addAll$1$ax($.get$Timer__runCallbacks(), $.sublist$1$ax(runCallbacks, i));
        $.addAll$1$ax($.get$Timer__runCallbacks(), newCallbacks);
        throw exception;
      }

    }
  },
  $isFunction: true
};

$$._HashMapTable = {"": "_HashTable;_table,_capacity,_entryCount,_deletedCount,_modificationCount,_container",
  get$_entrySize: function() {
    return 2;
  },
  _value$1: function(offset) {
    return $.$index$asx(this._table, $.$add$ns(offset, 1));
  },
  _setValue$2: function(offset, value) {
    $.$indexSet$ax(this._table, $.$add$ns(offset, 1), value);
  },
  _copyEntry$3: function(fromTable, fromOffset, toOffset) {
    var t1, t3, t4;
    if (typeof fromTable !== "object" || fromTable === null || (fromTable.constructor !== Array || !!fromTable.immutable$list) && !fromTable.$isJavaScriptIndexingBehavior())
      return this._copyEntry$3$bailout1(1, fromTable, fromOffset, toOffset);
    if (typeof toOffset !== "number")
      return this._copyEntry$3$bailout1(1, fromTable, fromOffset, toOffset);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._copyEntry$3$bailout1(2, fromTable, fromOffset, toOffset, t1);
    t3 = toOffset + 1;
    t4 = fromOffset + 1;
    if (t4 < 0 || t4 >= fromTable.length)
      throw $.ioore(t4);
    t4 = fromTable[t4];
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    t1[t3] = t4;
  },
  _copyEntry$3$bailout1: function(state0, fromTable, fromOffset, toOffset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        $.$indexSet$ax(t1, $.$add$ns(toOffset, 1), $.$index$asx(fromTable, fromOffset + 1));
    }
  }
};

$$.HashMap = {"": "Object;_hashTable<",
  containsKey$1: function(_, key) {
    return $.$ge$n(this._hashTable._get$1(key), 0);
  },
  addAll$1: function(_, other) {
    $.forEach$1$ax(other, new $.HashMap_addAll_anon(this));
  },
  $index: function(_, key) {
    var t1, offset;
    t1 = this._hashTable;
    offset = t1._get$1(key);
    if ($.$ge$n(offset, 0))
      return t1._value$1(offset);
    return;
  },
  $indexSet: function(_, key, value) {
    var t1 = this._hashTable;
    t1._setValue$2(t1._put$1(key), value);
    t1._checkCapacity$0();
  },
  putIfAbsent$2: function(_, key, ifAbsent) {
    var t1, offset, entry, modificationCount, value;
    t1 = this._hashTable;
    offset = t1._probeForAdd$2(t1._hashCodeOf$1(key), key);
    entry = $.$index$asx(t1._table, offset);
    if (!t1._isFree$1(entry))
      return t1._value$1(offset);
    modificationCount = t1._modificationCount;
    value = ifAbsent.call$0();
    if (modificationCount === t1._modificationCount) {
      t1._setKey$2(offset, key);
      t1._setValue$2(offset, value);
      if (entry == null) {
        t1._entryCount = $.$add$ns(t1._entryCount, 1);
        t1._checkCapacity$0();
      } else
        t1._deletedCount = $.$sub$n(t1._deletedCount, 1);
      t1._recordModification$0();
    } else {
      t1._setValue$2(t1._put$1(key), value);
      t1._checkCapacity$0();
    }
    return value;
  },
  remove$1: function(_, key) {
    var t1, offset, oldValue;
    t1 = this._hashTable;
    offset = t1._liblib0$_remove$1(t1, key);
    if (typeof offset !== "number")
      return this.remove$1$bailout(1, t1, offset);
    if (offset < 0)
      return;
    oldValue = t1._value$1(offset);
    t1._setValue$2(offset, null);
    t1._checkCapacity$0();
    return oldValue;
  },
  remove$1$bailout: function(state0, t1, offset) {
    var oldValue;
    if ($.$lt$n(offset, 0))
      return;
    oldValue = t1._value$1(offset);
    t1._setValue$2(offset, null);
    t1._checkCapacity$0();
    return oldValue;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  clear$0: function(_) {
    this._hashTable._clear$0();
  },
  forEach$1: function(_, action) {
    var t1, modificationCount, table, entrySize, t2, offset, entry;
    t1 = this._hashTable;
    modificationCount = t1._modificationCount;
    table = t1._table;
    if (typeof table !== "object" || table === null || (table.constructor !== Array || !!table.immutable$list) && !table.$isJavaScriptIndexingBehavior())
      return this.forEach$1$bailout(1, action, table, t1, modificationCount);
    entrySize = t1.get$_entrySize();
    for (t2 = table.length, offset = 0; offset < t2; offset += entrySize) {
      if (offset < 0)
        throw $.ioore(offset);
      entry = table[offset];
      if (!t1._isFree$1(entry)) {
        action.call$2(entry, t1._value$1(offset));
        t1._checkModification$1(modificationCount);
      }
    }
  },
  forEach$1$bailout: function(state0, action, table, t1, modificationCount) {
    var entrySize, t2, offset, entry;
    entrySize = t1.get$_entrySize();
    for (t2 = $.getInterceptor$asx(table), offset = 0; offset < t2.get$length(table); offset += entrySize) {
      entry = t2.$index(table, offset);
      if (!t1._isFree$1(entry)) {
        action.call$2(entry, t1._value$1(offset));
        t1._checkModification$1(modificationCount);
      }
    }
  },
  get$keys: function(_) {
    return $._HashTableKeyIterable$(this._hashTable);
  },
  get$values: function(_) {
    return $._HashTableValueIterable$(this._hashTable, 1);
  },
  get$length: function(_) {
    return this._hashTable.get$_elementCount();
  },
  get$isEmpty: function(_) {
    return $.$eq(this._hashTable.get$_elementCount(), 0);
  },
  toString$0: function(_) {
    return $.ToString_mapToString(this);
  },
  HashMap$0: function() {
    this._hashTable._container = this;
  },
  $isMap: function() {
    return true;
  },
  $asMap: function() {
    return null;
  }
};

$$.HashMap_addAll_anon = {"": "Closure;this_0",
  call$2: function(key, value) {
    var t1, offset;
    t1 = this.this_0;
    offset = t1.get$_hashTable()._put$1(key);
    t1.get$_hashTable()._setValue$2(offset, value);
    t1.get$_hashTable()._checkCapacity$0();
  },
  $isFunction: true
};

$$.HashSet = {"": "Collection;_table<",
  get$iterator: function(_) {
    return $._HashTableKeyIterator$(this._table);
  },
  get$length: function(_) {
    return this._table.get$_elementCount();
  },
  get$isEmpty: function(_) {
    return $.$eq(this._table.get$_elementCount(), 0);
  },
  contains$1: function(_, object) {
    return $.$ge$n(this._table._get$1(object), 0);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  add$1: function(_, element) {
    var t1 = this._table;
    t1._put$1(element);
    t1._checkCapacity$0();
  },
  addAll$1: function(_, objects) {
    var t1, t2;
    for (t1 = $.get$iterator$ax(objects), t2 = this._table; t1.moveNext$0() === true;) {
      t2._put$1(t1.get$current());
      t2._checkCapacity$0();
    }
  },
  remove$1: function(_, object) {
    var t1, offset;
    t1 = this._table;
    offset = t1._liblib0$_remove$1(t1, object);
    if (typeof offset !== "number")
      return this.remove$1$bailout1(1, offset, t1);
    t1._checkCapacity$0();
    return offset >= 0;
  },
  remove$1$bailout1: function(state0, offset, t1) {
    t1._checkCapacity$0();
    return $.$ge$n(offset, 0);
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  removeAll$1: function(_, objectsToRemove) {
    var t1, t2;
    for (t1 = $.JSArray_methods.get$iterator(objectsToRemove), t2 = this._table; t1.moveNext$0();) {
      t2._liblib0$_remove$1(t2, t1.get$current());
      t2._checkCapacity$0();
    }
  },
  clear$0: function(_) {
    this._table._clear$0();
  },
  toString$0: function(_) {
    return $.ToString_collectionToString(this);
  },
  HashSet$0: function() {
    this._table._container = this;
  },
  $asCollection: function() {
    return null;
  },
  $asIterable: function() {
    return null;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  }
};

$$._DeadEntry = {"": "Object;"};

$$._NullKey = {"": "Object;",
  get$hashCode: function(_) {
    return $.JSNull_methods.get$hashCode(null);
  }
};

$$._HashTable = {"": "Object;_table<,_capacity,_entryCount,_deletedCount,_modificationCount<,_container",
  _key$1: function(offset) {
    var t1, key;
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._key$1$bailout(1, offset, t1);
    if (offset !== (offset | 0))
      throw $.iae(offset);
    if (offset < 0 || offset >= t1.length)
      throw $.ioore(offset);
    key = t1[offset];
    if (key !== $.CONSTANT3)
      return key;
    return;
  },
  _key$1$bailout: function(state0, offset, t1) {
    var key = $.$index$asx(t1, offset);
    if (key !== $.CONSTANT3)
      return key;
    return;
  },
  _setKey$2: function(offset, key) {
    if (key == null)
      key = $.CONSTANT3;
    $.$indexSet$ax(this._table, offset, key);
  },
  get$_elementCount: function() {
    return $.$sub$n(this._entryCount, this._deletedCount);
  },
  get$_entrySize: function() {
    return 1;
  },
  _checkModification$1: function(expectedModificationCount) {
    if (this._modificationCount !== expectedModificationCount)
      throw $.$$throw($.ConcurrentModificationError$(this._container));
  },
  _recordModification$0: function() {
    this._modificationCount = this._modificationCount + 1 & 1073741823;
  },
  _createTable$1: function(capacity) {
    return $.List_List($.$mul$n(capacity, this.get$_entrySize()));
  },
  _nextProbe$3: function(previousIndex, probeCount, capacity) {
    if (typeof capacity !== "number")
      return this._nextProbe$3$bailout(1, previousIndex, probeCount, capacity);
    return (previousIndex + probeCount & capacity - 1) >>> 0;
  },
  _nextProbe$3$bailout: function(state0, previousIndex, probeCount, capacity) {
    var t1 = $.$sub$n(capacity, 1);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return (previousIndex + probeCount & t1) >>> 0;
  },
  _isFree$1: function(marker) {
    return marker == null || marker === $.CONSTANT2;
  },
  _probeForAdd$2: function(hashCode, object) {
    var entrySize, index, t1, firstTombstone, probeCount, offset, entry;
    entrySize = this.get$_entrySize();
    index = $.$and$n(hashCode, $.$sub$n(this._capacity, 1));
    for (t1 = null == object, firstTombstone = -1, probeCount = 0; true;) {
      offset = index * entrySize;
      entry = $.$index$asx(this._table, offset);
      if (entry === $.CONSTANT2) {
        if (firstTombstone < 0)
          firstTombstone = offset;
      } else if (entry == null) {
        if (firstTombstone < 0)
          return offset;
        return firstTombstone;
      } else if (($.CONSTANT3 === entry ? t1 : $.$eq(entry, object)) === true)
        return offset;
      ++probeCount;
      index = this._nextProbe$3(index, probeCount, this._capacity);
    }
  },
  _probeForLookup$2: function(hashCode, object) {
    var entrySize, index, t1, probeCount, offset, entry;
    entrySize = this.get$_entrySize();
    index = $.$and$n(hashCode, $.$sub$n(this._capacity, 1));
    for (t1 = null == object, probeCount = 0; true;) {
      offset = index * entrySize;
      entry = $.$index$asx(this._table, offset);
      if (entry == null)
        return -1;
      else if ($.CONSTANT2 !== entry)
        if (($.CONSTANT3 === entry ? t1 : $.$eq(entry, object)) === true)
          return offset;
      ++probeCount;
      index = this._nextProbe$3(index, probeCount, this._capacity);
    }
  },
  _hashCodeOf$1: function(object) {
    return $.get$hashCode$(object);
  },
  _checkCapacity$0: function() {
    var freeCount, t1;
    freeCount = $.$sub$n(this._capacity, this._entryCount);
    t1 = $.getInterceptor$n(freeCount);
    if ($.$lt$n(t1.$mul(freeCount, 4), this._capacity) === true || t1.$lt(freeCount, this._deletedCount) === true)
      this._grow$1($.$sub$n(this._entryCount, this._deletedCount));
  },
  _grow$1: function(contentCount) {
    var capacity, minCapacity, oldTable;
    capacity = this._capacity;
    if (typeof capacity !== "number")
      return this._grow$1$bailout(1, contentCount, capacity);
    minCapacity = $.$mul$n(contentCount, 2);
    if (typeof minCapacity !== "number")
      return this._grow$1$bailout(2, 0, capacity, minCapacity);
    for (; capacity < minCapacity;)
      capacity *= 2;
    oldTable = this._table;
    this._table = this._createTable$1(capacity);
    this._capacity = capacity;
    this._entryCount = 0;
    this._deletedCount = 0;
    this._addAllEntries$1(oldTable);
    this._recordModification$0();
  },
  _grow$1$bailout: function(state0, contentCount, capacity, minCapacity) {
    switch (state0) {
      case 0:
        capacity = this._capacity;
      case 1:
        state0 = 0;
        minCapacity = $.$mul$n(contentCount, 2);
      case 2:
        var t1, oldTable;
        state0 = 0;
        for (; t1 = $.getInterceptor$n(capacity), t1.$lt(capacity, minCapacity) === true;)
          capacity = t1.$mul(capacity, 2);
        oldTable = this._table;
        this._table = this._createTable$1(capacity);
        this._capacity = capacity;
        this._entryCount = 0;
        this._deletedCount = 0;
        this._addAllEntries$1(oldTable);
        this._recordModification$0();
    }
  },
  _addAllEntries$1: function(oldTable) {
    var t1, i, object;
    if (typeof oldTable !== "object" || oldTable === null || (oldTable.constructor !== Array || !!oldTable.immutable$list) && !oldTable.$isJavaScriptIndexingBehavior())
      return this._addAllEntries$1$bailout(1, oldTable);
    for (t1 = oldTable.length, i = 0; i < t1; i += this.get$_entrySize()) {
      if (i < 0)
        throw $.ioore(i);
      object = oldTable[i];
      if (!(object == null || object === $.CONSTANT2))
        this._copyEntry$3(oldTable, i, this._put$1(object));
    }
  },
  _addAllEntries$1$bailout: function(state0, oldTable) {
    var t1, i, object;
    for (t1 = $.getInterceptor$asx(oldTable), i = 0; i < t1.get$length(oldTable); i += this.get$_entrySize()) {
      object = t1.$index(oldTable, i);
      if (!(object == null || object === $.CONSTANT2))
        this._copyEntry$3(oldTable, i, this._put$1(object));
    }
  },
  _copyEntry$3: function(fromTable, fromOffset, toOffset) {
  },
  _get$1: function(key) {
    return this._probeForLookup$2($.get$hashCode$(key), key);
  },
  _put$1: function(key) {
    var offset, t1, oldEntry;
    offset = this._probeForAdd$2($.get$hashCode$(key), key);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._put$1$bailout(1, key, t1, offset);
    if (offset !== (offset | 0))
      throw $.iae(offset);
    if (offset < 0 || offset >= t1.length)
      throw $.ioore(offset);
    oldEntry = t1[offset];
    if (oldEntry == null) {
      t1 = this._entryCount;
      if (typeof t1 !== "number")
        return this._put$1$bailout(2, key, t1, offset);
      this._entryCount = t1 + 1;
    } else if (oldEntry === $.CONSTANT2) {
      t1 = this._deletedCount;
      if (typeof t1 !== "number")
        return this._put$1$bailout(3, key, t1, offset);
      this._deletedCount = t1 - 1;
    } else
      return offset;
    if (key == null)
      key = $.CONSTANT3;
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._put$1$bailout(4, key, t1, offset);
    if (offset >= t1.length)
      throw $.ioore(offset);
    t1[offset] = key;
    this._recordModification$0();
    return offset;
  },
  _put$1$bailout: function(state0, key, t1, offset) {
    switch (state0) {
      case 0:
        offset = this._probeForAdd$2($.get$hashCode$(key), key);
        t1 = this._table;
      case 1:
        state0 = 0;
        oldEntry = $.$index$asx(t1, offset);
      default:
        if (state0 === 2 || state0 === 0 && oldEntry == null)
          switch (state0) {
            case 0:
              t1 = this._entryCount;
            case 2:
              state0 = 0;
              this._entryCount = $.$add$ns(t1, 1);
          }
        else
          switch (state0) {
            case 0:
            case 3:
              if (state0 === 3 || state0 === 0 && oldEntry === $.CONSTANT2)
                switch (state0) {
                  case 0:
                    t1 = this._deletedCount;
                  case 3:
                    state0 = 0;
                    this._deletedCount = $.$sub$n(t1, 1);
                }
              else
                return offset;
          }
        if (key == null)
          key = $.CONSTANT3;
        t1 = this._table;
      case 4:
        var oldEntry;
        state0 = 0;
        $.$indexSet$ax(t1, offset, key);
        this._recordModification$0();
        return offset;
    }
  },
  _liblib0$_remove$1: function(_, key) {
    var offset = this._probeForLookup$2($.get$hashCode$(key), key);
    if (typeof offset !== "number")
      return this._liblib0$_remove$1$bailout(1, offset);
    if (offset >= 0)
      this._deleteEntry$1(offset);
    return offset;
  },
  _liblib0$_remove$1$bailout: function(state0, offset) {
    if ($.$ge$n(offset, 0))
      this._deleteEntry$1(offset);
    return offset;
  },
  _clear$0: function() {
    var i;
    if ($.$eq(this.get$_elementCount(), 0) === true)
      return;
    for (var i = 0; i < $.get$length$asx(this._table); ++i)
      $.$indexSet$ax(this._table, i, null);
    this._deletedCount = 0;
    this._entryCount = 0;
    this._recordModification$0();
  },
  _deleteEntry$1: function(offset) {
    var key = $.CONSTANT2.$eq($.CONSTANT2, null) ? $.CONSTANT3 : $.CONSTANT2;
    $.$indexSet$ax(this._table, offset, key);
    this._deletedCount = $.$add$ns(this._deletedCount, 1);
    this._recordModification$0();
  },
  _HashTable$1: function(initialCapacity) {
    this._table = this._createTable$1(initialCapacity);
  }
};

$$._HashTableIterable = {"": "Iterable;_hashTable<",
  get$length: function(_) {
    return this._hashTable.get$_elementCount();
  },
  get$isEmpty: function(_) {
    return $.$eq(this._hashTable.get$_elementCount(), 0);
  },
  forEach$1: function(_, action) {
    var t1, entrySize, table, modificationCount, t2, offset, entry;
    t1 = this._hashTable;
    entrySize = t1.get$_entrySize();
    table = t1._table;
    if (typeof table !== "object" || table === null || (table.constructor !== Array || !!table.immutable$list) && !table.$isJavaScriptIndexingBehavior())
      return this.forEach$1$bailout1(1, action, entrySize, t1, table);
    modificationCount = t1._modificationCount;
    for (t2 = table.length, offset = 0; offset < t2; offset += entrySize) {
      if (offset < 0)
        throw $.ioore(offset);
      entry = table[offset];
      if (!t1._isFree$1(entry))
        action.call$1(this._valueAt$2(offset, entry));
      t1._checkModification$1(modificationCount);
    }
  },
  forEach$1$bailout1: function(state0, action, entrySize, t1, table) {
    var modificationCount, t2, offset, entry;
    modificationCount = t1._modificationCount;
    for (t2 = $.getInterceptor$asx(table), offset = 0; offset < t2.get$length(table); offset += entrySize) {
      entry = t2.$index(table, offset);
      if (!t1._isFree$1(entry))
        action.call$1(this._valueAt$2(offset, entry));
      t1._checkModification$1(modificationCount);
    }
  },
  $asIterable: function() {
    return null;
  }
};

$$._HashTableIterator = {"": "Object;_hashTable<,_modificationCount<",
  moveNext$0: function() {
    var t1, table, entrySize, t2, t3, entry;
    t1 = this._hashTable;
    t1._checkModification$1(this._modificationCount);
    table = t1.get$_table();
    if (typeof table !== "string" && (typeof table !== "object" || table === null || table.constructor !== Array && !table.$isJavaScriptIndexingBehavior()))
      return this.moveNext$0$bailout(1, t1, table);
    entrySize = t1.get$_entrySize();
    for (; t2 = this._offset, t3 = table.length, t2 < t3;) {
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= t3)
        throw $.ioore(t2);
      entry = table[t2];
      this._offset = t2 + entrySize;
      if (!t1._isFree$1(entry)) {
        this._liblib0$_current = this._valueAt$2(t2, entry);
        return true;
      }
    }
    this._liblib0$_current = null;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, table) {
    var entrySize, t2, currentOffset, entry;
    entrySize = t1.get$_entrySize();
    for (t2 = $.getInterceptor$asx(table); $.JSNumber_methods.$lt(this._offset, t2.get$length(table));) {
      currentOffset = this._offset;
      entry = t2.$index(table, currentOffset);
      this._offset = currentOffset + entrySize;
      if (!t1._isFree$1(entry)) {
        this._liblib0$_current = this._valueAt$2(currentOffset, entry);
        return true;
      }
    }
    this._liblib0$_current = null;
    return false;
  },
  get$current: function() {
    return this._liblib0$_current;
  }
};

$$._HashTableKeyIterable = {"": "_HashTableIterable;_hashTable",
  get$iterator: function(_) {
    return $._HashTableKeyIterator$(this._hashTable);
  },
  _valueAt$2: function(offset, key) {
    if (key === $.CONSTANT3)
      return;
    return key;
  },
  contains$1: function(_, value) {
    return $.$ge$n(this._hashTable._get$1(value), 0);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  $asIterable: function() {
    return null;
  }
};

$$._HashTableKeyIterator = {"": "_HashTableIterator;_hashTable,_modificationCount,_offset,_liblib0$_current",
  _valueAt$2: function(offset, key) {
    if (key === $.CONSTANT3)
      return;
    return key;
  }
};

$$._HashTableValueIterable = {"": "_HashTableIterable;_entryIndex,_hashTable",
  get$iterator: function(_) {
    return $._HashTableValueIterator$(this._hashTable, this._entryIndex);
  },
  _valueAt$2: function(offset, key) {
    var t1, t3;
    t1 = this._hashTable._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._valueAt$2$bailout1(1, offset, t1);
    t3 = offset + this._entryIndex;
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  },
  _valueAt$2$bailout1: function(state0, offset, t1) {
    return $.$index$asx(t1, offset + this._entryIndex);
  },
  $asIterable: function() {
    return null;
  }
};

$$._HashTableValueIterator = {"": "_HashTableIterator;_entryIndex,_hashTable,_modificationCount,_offset,_liblib0$_current",
  _valueAt$2: function(offset, key) {
    return $.$index$asx(this._hashTable.get$_table(), $.$add$ns(offset, this._entryIndex));
  }
};

$$._LinkedHashMapTable = {"": "_LinkedHashTable;_table,_capacity,_entryCount,_deletedCount,_modificationCount,_container",
  get$_entrySize: function() {
    return 4;
  },
  _value$1: function(offset) {
    var t1, t3;
    if (typeof offset !== "number")
      return this._value$1$bailout(1, offset);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._value$1$bailout(2, offset, t1);
    t3 = offset + 3;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  },
  _value$1$bailout: function(state0, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        return $.$index$asx(t1, $.$add$ns(offset, 3));
    }
  },
  _setValue$2: function(offset, value) {
    $.$indexSet$ax(this._table, $.$add$ns(offset, 3), value);
  },
  _copyEntry$3: function(oldTable, fromOffset, toOffset) {
    var t1, t3, t4;
    if (typeof oldTable !== "object" || oldTable === null || (oldTable.constructor !== Array || !!oldTable.immutable$list) && !oldTable.$isJavaScriptIndexingBehavior())
      return this._copyEntry$3$bailout1(1, oldTable, fromOffset, toOffset);
    if (typeof fromOffset !== "number")
      return this._copyEntry$3$bailout1(1, oldTable, fromOffset, toOffset);
    if (typeof toOffset !== "number")
      return this._copyEntry$3$bailout1(1, oldTable, fromOffset, toOffset);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._copyEntry$3$bailout1(2, oldTable, fromOffset, toOffset, t1);
    t3 = toOffset + 3;
    t4 = fromOffset + 3;
    if (t4 !== (t4 | 0))
      throw $.iae(t4);
    if (t4 < 0 || t4 >= oldTable.length)
      throw $.ioore(t4);
    t4 = oldTable[t4];
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    t1[t3] = t4;
  },
  _copyEntry$3$bailout1: function(state0, oldTable, fromOffset, toOffset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        $.$indexSet$ax(t1, $.$add$ns(toOffset, 3), $.$index$asx(oldTable, $.$add$ns(fromOffset, 3)));
    }
  }
};

$$.LinkedHashMap = {"": "Object;_hashTable<",
  containsKey$1: function(_, key) {
    return $.$ge$n(this._hashTable._get$1(key), 0);
  },
  addAll$1: function(_, other) {
    $.forEach$1$ax(other, new $.LinkedHashMap_addAll_anon(this));
  },
  $index: function(_, key) {
    var t1, offset;
    t1 = this._hashTable;
    offset = t1._get$1(key);
    if ($.$ge$n(offset, 0))
      return t1._value$1(offset);
    return;
  },
  $indexSet: function(_, key, value) {
    var t1 = this._hashTable;
    t1._setValue$2(t1._put$1(key), value);
    t1._checkCapacity$0();
  },
  putIfAbsent$2: function(_, key, ifAbsent) {
    var t1, offset, entry, modificationCount, value;
    t1 = this._hashTable;
    offset = t1._probeForAdd$2(t1._hashCodeOf$1(key), key);
    entry = $.$index$asx(t1._table, offset);
    if (!t1._isFree$1(entry))
      return t1._value$1(offset);
    modificationCount = t1._modificationCount;
    value = ifAbsent.call$0();
    if (modificationCount === t1._modificationCount) {
      t1._setKey$2(offset, key);
      t1._setValue$2(offset, value);
      t1._linkLast$1(offset);
      if (entry == null) {
        t1._entryCount = $.$add$ns(t1._entryCount, 1);
        t1._checkCapacity$0();
      } else
        t1._deletedCount = $.$sub$n(t1._deletedCount, 1);
      t1._recordModification$0();
    } else {
      t1._setValue$2(t1._put$1(key), value);
      t1._checkCapacity$0();
    }
    return value;
  },
  remove$1: function(_, key) {
    var t1, offset, oldValue;
    t1 = this._hashTable;
    offset = t1._liblib0$_remove$1(t1, key);
    if (typeof offset !== "number")
      return this.remove$1$bailout(1, t1, offset);
    if (offset < 0)
      return;
    oldValue = t1._value$1(offset);
    t1._setValue$2(offset, null);
    t1._checkCapacity$0();
    return oldValue;
  },
  remove$1$bailout: function(state0, t1, offset) {
    var oldValue;
    if ($.$lt$n(offset, 0))
      return;
    oldValue = t1._value$1(offset);
    t1._setValue$2(offset, null);
    t1._checkCapacity$0();
    return oldValue;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  clear$0: function(_) {
    this._hashTable._clear$0();
  },
  forEach$1: function(_, action) {
    var t1, modificationCount, offset;
    t1 = this._hashTable;
    modificationCount = t1._modificationCount;
    offset = t1._next$1(0);
    if (typeof offset !== "number")
      return this.forEach$1$bailout(1, action, t1, modificationCount, offset);
    for (; !$.$eq(offset, 0); offset = t1._next$1(offset)) {
      action.call$2(t1._key$1(offset), t1._value$1(offset));
      t1._checkModification$1(modificationCount);
    }
  },
  forEach$1$bailout: function(state0, action, t1, modificationCount, offset) {
    for (; $.$eq(offset, 0) !== true; offset = t1._next$1(offset)) {
      action.call$2(t1._key$1(offset), t1._value$1(offset));
      t1._checkModification$1(modificationCount);
    }
  },
  get$keys: function(_) {
    return $._LinkedHashTableKeyIterable$(this._hashTable);
  },
  get$values: function(_) {
    return $._LinkedHashTableValueIterable$(this._hashTable, 3);
  },
  get$length: function(_) {
    return this._hashTable.get$_elementCount();
  },
  get$isEmpty: function(_) {
    return $.$eq(this._hashTable.get$_elementCount(), 0);
  },
  toString$0: function(_) {
    return $.ToString_mapToString(this);
  },
  LinkedHashMap$0: function() {
    this._hashTable._container = this;
  },
  $isMap: function() {
    return true;
  },
  $asMap: function() {
    return null;
  }
};

$$.LinkedHashMap_addAll_anon = {"": "Closure;this_0",
  call$2: function(key, value) {
    var t1, offset;
    t1 = this.this_0;
    offset = t1.get$_hashTable()._put$1(key);
    t1.get$_hashTable()._setValue$2(offset, value);
    t1.get$_hashTable()._checkCapacity$0();
  },
  $isFunction: true
};

$$.LinkedHashSet = {"": "Collection;_table<",
  get$iterator: function(_) {
    return $._LinkedHashTableKeyIterator$(this._table);
  },
  forEach$1: function(_, action) {
    var offset, modificationCount;
    offset = this._table._next$1(0);
    if (typeof offset !== "number")
      return this.forEach$1$bailout1(1, action, offset);
    modificationCount = this._table._modificationCount;
    for (; !$.$eq(offset, 0);) {
      action.call$1(this._table._key$1(offset));
      this._table._checkModification$1(modificationCount);
      offset = this._table._next$1(offset);
    }
  },
  forEach$1$bailout1: function(state0, action, offset) {
    var modificationCount = this._table._modificationCount;
    for (; $.$eq(offset, 0) !== true;) {
      action.call$1(this._table._key$1(offset));
      this._table._checkModification$1(modificationCount);
      offset = this._table._next$1(offset);
    }
  },
  get$length: function(_) {
    return this._table.get$_elementCount();
  },
  get$isEmpty: function(_) {
    return $.$eq(this._table.get$_elementCount(), 0);
  },
  contains$1: function(_, object) {
    return $.$ge$n(this._table._get$1(object), 0);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  add$1: function(_, element) {
    this._table._put$1(element);
    this._table._checkCapacity$0();
  },
  addAll$1: function(_, objects) {
    var t1, t2;
    for (t1 = $.get$iterator$ax(objects); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      this._table._put$1(t2);
      this._table._checkCapacity$0();
    }
  },
  remove$1: function(_, object) {
    var t1, offset;
    t1 = this._table;
    offset = t1._liblib0$_remove$1(t1, object);
    if (typeof offset !== "number")
      return this.remove$1$bailout1(1, offset);
    if (offset >= 0) {
      this._table._checkCapacity$0();
      return true;
    }
    return false;
  },
  remove$1$bailout1: function(state0, offset) {
    if ($.$ge$n(offset, 0)) {
      this._table._checkCapacity$0();
      return true;
    }
    return false;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  removeAll$1: function(_, objectsToRemove) {
    var t1, t2, t3;
    for (t1 = $.JSArray_methods.get$iterator(objectsToRemove); t1.moveNext$0();) {
      t2 = t1.get$current();
      t3 = this._table;
      t3._liblib0$_remove$1(t3, t2);
      this._table._checkCapacity$0();
    }
  },
  clear$0: function(_) {
    this._table._clear$0();
  },
  toString$0: function(_) {
    return $.ToString_collectionToString(this);
  },
  LinkedHashSet$0: function() {
    this._table._container = this;
  },
  $asCollection: function() {
    return null;
  },
  $asIterable: function() {
    return null;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  }
};

$$._LinkedHashTableHeadMarker = {"": "Object;"};

$$._LinkedHashTable = {"": "_HashTable;_table,_capacity,_entryCount,_deletedCount,_modificationCount,_container",
  get$_entrySize: function() {
    return 3;
  },
  _createTable$1: function(capacity) {
    var result, t1;
    result = $.List_List($.$mul$n(capacity, this.get$_entrySize()));
    t1 = result.length;
    if (0 >= t1)
      throw $.ioore(0);
    result[0] = $.CONSTANT4;
    if (1 >= t1)
      throw $.ioore(1);
    result[1] = 0;
    if (2 >= t1)
      throw $.ioore(2);
    result[2] = 0;
    return result;
  },
  _next$1: function(offset) {
    var t1, t3;
    if (typeof offset !== "number")
      return this._next$1$bailout(1, offset);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._next$1$bailout(2, offset, t1);
    t3 = offset + 1;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  },
  _next$1$bailout: function(state0, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        return $.$index$asx(t1, $.$add$ns(offset, 1));
    }
  },
  _linkLast$1: function(offset) {
    var last, t1;
    last = $.$index$asx(this._table, 2);
    t1 = $.getInterceptor$ns(offset);
    $.$indexSet$ax(this._table, t1.$add(offset, 1), 0);
    $.$indexSet$ax(this._table, t1.$add(offset, 2), last);
    $.$indexSet$ax(this._table, $.$add$ns(last, 1), offset);
    $.$indexSet$ax(this._table, 2, offset);
  },
  _unlink$1: function(offset) {
    var t1, next, prev;
    t1 = $.getInterceptor$ns(offset);
    next = $.$index$asx(this._table, t1.$add(offset, 1));
    prev = $.$index$asx(this._table, t1.$add(offset, 2));
    $.$indexSet$ax(this._table, t1.$add(offset, 1), null);
    $.$indexSet$ax(this._table, t1.$add(offset, 2), null);
    $.$indexSet$ax(this._table, $.$add$ns(prev, 1), next);
    $.$indexSet$ax(this._table, $.$add$ns(next, 2), prev);
  },
  _addAllEntries$1: function(oldTable) {
    var t1, offset, object, t2, nextOffset;
    if (typeof oldTable !== "object" || oldTable === null || (oldTable.constructor !== Array || !!oldTable.immutable$list) && !oldTable.$isJavaScriptIndexingBehavior())
      return this._addAllEntries$1$bailout1(1, oldTable);
    t1 = oldTable.length;
    if (1 >= t1)
      throw $.ioore(1);
    offset = oldTable[1];
    if (typeof offset !== "number")
      return this._addAllEntries$1$bailout1(2, oldTable, offset, $.JSArray_methods);
    for (; !$.$eq(offset, 0); offset = nextOffset) {
      if (offset !== (offset | 0))
        throw $.iae(offset);
      if (offset < 0 || offset >= t1)
        throw $.ioore(offset);
      object = oldTable[offset];
      t2 = offset + 1;
      if (t2 >= t1)
        throw $.ioore(t2);
      nextOffset = oldTable[t2];
      this._copyEntry$3(oldTable, offset, this._put$1(object));
    }
  },
  _addAllEntries$1$bailout1: function(state0, oldTable, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$asx(oldTable);
        offset = t1.$index(oldTable, 1);
      case 2:
        var t2, object, nextOffset;
        state0 = 0;
        for (; t2 = $.getInterceptor(offset), t2.$eq(offset, 0) !== true; offset = nextOffset) {
          object = t1.$index(oldTable, offset);
          nextOffset = t1.$index(oldTable, t2.$add(offset, 1));
          this._copyEntry$3(oldTable, offset, this._put$1(object));
        }
    }
  },
  _clear$0: function() {
    var i;
    if ($.$eq(this.get$_elementCount(), 0) === true)
      return;
    $.$indexSet$ax(this._table, 1, 0);
    $.$indexSet$ax(this._table, 2, 0);
    for (var i = this.get$_entrySize(); i < $.get$length$asx(this._table); ++i)
      $.$indexSet$ax(this._table, i, null);
    this._deletedCount = 0;
    this._entryCount = 0;
    this._recordModification$0();
  },
  _put$1: function(key) {
    var offset, t1, oldEntry;
    offset = this._probeForAdd$2($.get$hashCode$(key), key);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._put$1$bailout1(1, key, t1, offset);
    if (offset !== (offset | 0))
      throw $.iae(offset);
    if (offset < 0 || offset >= t1.length)
      throw $.ioore(offset);
    oldEntry = t1[offset];
    if (oldEntry === $.CONSTANT2) {
      t1 = this._deletedCount;
      if (typeof t1 !== "number")
        return this._put$1$bailout1(2, key, t1, offset);
      this._deletedCount = t1 - 1;
    } else if (oldEntry == null) {
      t1 = this._entryCount;
      if (typeof t1 !== "number")
        return this._put$1$bailout1(3, key, t1, offset);
      this._entryCount = t1 + 1;
    } else
      return offset;
    this._recordModification$0();
    if (key == null)
      key = $.CONSTANT3;
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._put$1$bailout1(4, key, t1, offset);
    if (offset >= t1.length)
      throw $.ioore(offset);
    t1[offset] = key;
    this._linkLast$1(offset);
    return offset;
  },
  _put$1$bailout1: function(state0, key, t1, offset) {
    switch (state0) {
      case 0:
        offset = this._probeForAdd$2($.get$hashCode$(key), key);
        t1 = this._table;
      case 1:
        state0 = 0;
        oldEntry = $.$index$asx(t1, offset);
      default:
        if (state0 === 2 || state0 === 0 && oldEntry === $.CONSTANT2)
          switch (state0) {
            case 0:
              t1 = this._deletedCount;
            case 2:
              state0 = 0;
              this._deletedCount = $.$sub$n(t1, 1);
          }
        else
          switch (state0) {
            case 0:
            case 3:
              if (state0 === 3 || state0 === 0 && oldEntry == null)
                switch (state0) {
                  case 0:
                    t1 = this._entryCount;
                  case 3:
                    state0 = 0;
                    this._entryCount = $.$add$ns(t1, 1);
                }
              else
                return offset;
          }
        this._recordModification$0();
        if (key == null)
          key = $.CONSTANT3;
        t1 = this._table;
      case 4:
        var oldEntry;
        state0 = 0;
        $.$indexSet$ax(t1, offset, key);
        this._linkLast$1(offset);
        return offset;
    }
  },
  _deleteEntry$1: function(offset) {
    var key;
    this._unlink$1(offset);
    key = $.CONSTANT2.$eq($.CONSTANT2, null) ? $.CONSTANT3 : $.CONSTANT2;
    $.$indexSet$ax(this._table, offset, key);
    this._deletedCount = $.$add$ns(this._deletedCount, 1);
    this._recordModification$0();
  }
};

$$._LinkedHashTableKeyIterable = {"": "Iterable;_table<",
  get$iterator: function(_) {
    return $._LinkedHashTableKeyIterator$(this._table);
  },
  contains$1: function(_, value) {
    return $.$ge$n(this._table._get$1(value), 0);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  get$length: function(_) {
    return this._table.get$_elementCount();
  },
  $asIterable: function() {
    return null;
  }
};

$$._LinkedHashTableKeyIterator = {"": "_LinkedHashTableIterator;_hashTable,_modificationCount,_offset,_liblib0$_current",
  _getCurrent$1: function(offset) {
    return this._hashTable._key$1(offset);
  }
};

$$._LinkedHashTableValueIterable = {"": "Iterable;_hashTable<,_valueIndex",
  get$iterator: function(_) {
    return $._LinkedHashTableValueIterator$(this._hashTable, this._valueIndex);
  },
  get$length: function(_) {
    return this._hashTable.get$_elementCount();
  },
  $asIterable: function() {
    return null;
  }
};

$$._LinkedHashTableValueIterator = {"": "_LinkedHashTableIterator;_valueIndex,_hashTable,_modificationCount,_offset,_liblib0$_current",
  _getCurrent$1: function(offset) {
    return $.$index$asx(this._hashTable.get$_table(), $.$add$ns(offset, this._valueIndex));
  }
};

$$._LinkedHashTableIterator = {"": "Object;_hashTable<,_modificationCount<",
  moveNext$0: function() {
    var t1, t2;
    t1 = this._hashTable;
    t1._checkModification$1(this._modificationCount);
    t2 = this._offset;
    if (typeof t2 !== "number")
      return this.moveNext$0$bailout(1, t1, t2);
    if (t2 === 0) {
      this._liblib0$_current = null;
      return false;
    }
    this._liblib0$_current = this._getCurrent$1(t2);
    this._offset = t1._next$1(this._offset);
    return true;
  },
  moveNext$0$bailout: function(state0, t1, t2) {
    if ($.$eq(t2, 0) === true) {
      this._liblib0$_current = null;
      return false;
    }
    this._liblib0$_current = this._getCurrent$1(this._offset);
    this._offset = t1._next$1(this._offset);
    return true;
  },
  get$current: function() {
    return this._liblib0$_current;
  }
};

$$.ListQueue = {"": "Collection;_table<,_head,_tail,_modificationCount<",
  get$iterator: function(_) {
    return $._ListQueueIterator$(this);
  },
  forEach$1: function(_, action) {
    var modificationCount, i, i0, t1;
    modificationCount = this._modificationCount;
    i = this._head;
    if (i !== (i | 0))
      return this.forEach$1$bailout1(1, action, modificationCount, i);
    for (; i !== this._tail; i0 = (i + 1 & this._table.length - 1) >>> 0, i = i0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      action.call$1(t1[i]);
      this._checkModification$1(modificationCount);
    }
  },
  forEach$1$bailout1: function(state0, action, modificationCount, i) {
    var i0, t1;
    for (; i !== this._tail; i0 = (i + 1 & this._table.length - 1) >>> 0, i = i0) {
      t1 = this._table;
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      action.call$1(t1[i]);
      this._checkModification$1(modificationCount);
    }
  },
  get$isEmpty: function(_) {
    return this._head === this._tail;
  },
  get$length: function(_) {
    var t1, t3;
    t1 = this._tail;
    if (t1 !== (t1 | 0))
      return this.get$length$bailout1(1, t1);
    t3 = this._head;
    if (t3 !== (t3 | 0))
      return this.get$length$bailout1(2, t1, t3);
    return (t1 - t3 & this._table.length - 1) >>> 0;
  },
  get$length$bailout1: function(state0, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this._tail;
      case 1:
        state0 = 0;
        t3 = this._head;
      case 2:
        state0 = 0;
        t3 = $.$sub$n(t1, t3);
      case 3:
        state0 = 0;
        return $.$and$n(t3, this._table.length - 1);
    }
  },
  elementAt$1: function(_, index) {
    var t1, t2, t3, t4;
    t1 = $.getInterceptor$n(index);
    if (t1.$lt(index, 0) === true || t1.$gt(index, this.get$length(this)) === true)
      throw $.$$throw($.RangeError$range(index, 0, this.get$length(this)));
    t1 = this._table;
    t2 = this._head;
    if (typeof index !== "number")
      throw $.iae(index);
    t3 = t1.length;
    t4 = (t2 + index & t3 - 1) >>> 0;
    if (t4 < 0 || t4 >= t3)
      throw $.ioore(t4);
    return t1[t4];
  },
  toList$1$growable: function(_, growable) {
    var t1, list;
    if (growable === true) {
      t1 = this.get$length(this);
      list = $.List_List($);
      $.JSArray_methods.set$length(list, t1);
    } else
      list = $.List_List(this.get$length(this));
    this._writeToList$1(list);
    return list;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(_, element) {
    this._add$1(this, element);
  },
  addAll$1: function(_, elements) {
    var addCount, $length, t1, t2, t3, endSpace, preSpace;
    if (typeof elements === "object" && elements !== null && (elements.constructor === Array || elements.$isList())) {
      addCount = $.get$length$asx(elements);
      $length = this.get$length(this);
      if (typeof addCount !== "number")
        throw $.iae(addCount);
      t1 = $length + addCount;
      t2 = this._table;
      t3 = t2.length;
      if (t1 >= t3) {
        this._preGrow$1(t1);
        $.JSArray_methods.setRange$4(this._table, $length, addCount, elements, 0);
        this._tail = $.$add$ns(this._tail, addCount);
      } else {
        t1 = this._tail;
        if (typeof t1 !== "number")
          throw $.iae(t1);
        endSpace = t3 - t1;
        if (addCount < endSpace) {
          $.JSArray_methods.setRange$4(t2, t1, addCount, elements, 0);
          this._tail = $.$add$ns(this._tail, addCount);
        } else {
          preSpace = addCount - endSpace;
          $.JSArray_methods.setRange$4(t2, t1, endSpace, elements, 0);
          $.JSArray_methods.setRange$4(this._table, 0, preSpace, elements, endSpace);
          this._tail = preSpace;
        }
      }
      this._modificationCount = $.$add$ns(this._modificationCount, 1);
    } else
      for (t1 = $.get$iterator$ax(elements); t1.moveNext$0() === true;)
        this._add$1(this, t1.get$current());
  },
  remove$1: function(_, object) {
    var i, i0, t1;
    i = this._head;
    if (i !== (i | 0))
      return this.remove$1$bailout1(1, object, i);
    for (; i !== this._tail; i0 = (i + 1 & this._table.length - 1) >>> 0, i = i0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      if ($.$eq(t1[i], object) === true) {
        this._liblib0$_remove$1(this, i);
        return;
      }
    }
    t1 = this._modificationCount;
    if (typeof t1 !== "number")
      return this.remove$1$bailout1(2, 0, 0, t1);
    this._modificationCount = t1 + 1;
  },
  remove$1$bailout1: function(state0, object, i, t1) {
    switch (state0) {
      case 0:
        i = this._head;
      case 1:
        state0 = 0;
        for (; i !== this._tail; i0 = (i + 1 & this._table.length - 1) >>> 0, i = i0) {
          t1 = this._table;
          if (i !== (i | 0))
            throw $.iae(i);
          if (i < 0 || i >= t1.length)
            throw $.ioore(i);
          if ($.$eq(t1[i], object) === true) {
            this._liblib0$_remove$1(this, i);
            return;
          }
        }
        t1 = this._modificationCount;
      case 2:
        var i0;
        state0 = 0;
        this._modificationCount = $.$add$ns(t1, 1);
    }
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  removeAll$1: function(_, objectsToRemove) {
    $.IterableMixinWorkaround_removeAllList(this, objectsToRemove);
  },
  _filterWhere$2: function(test, removeMatching) {
    var index, modificationCount, i, t1, remove, i0;
    index = this._head;
    if (index !== (index | 0))
      return this._filterWhere$2$bailout(1, test, removeMatching, index);
    modificationCount = this._modificationCount;
    if (typeof modificationCount !== "number")
      return this._filterWhere$2$bailout(2, test, removeMatching, index, modificationCount);
    for (i = index; !$.$eq(i, this._tail);) {
      t1 = this._table;
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      remove = $.$eq(test.call$1(t1[i]), removeMatching);
      this._checkModification$1(modificationCount);
      if (remove === true) {
        i = this._liblib0$_remove$1(this, i);
        modificationCount = $.$add$ns(this._modificationCount, 1);
        this._modificationCount = modificationCount;
      } else {
        i0 = (i + 1 & this._table.length - 1) >>> 0;
        i = i0;
      }
    }
  },
  _filterWhere$2$bailout: function(state0, test, removeMatching, index, modificationCount) {
    switch (state0) {
      case 0:
        index = this._head;
      case 1:
        state0 = 0;
        modificationCount = this._modificationCount;
      case 2:
        var i, t1, remove, i0;
        state0 = 0;
        for (i = index; !$.$eq(i, this._tail);) {
          t1 = this._table;
          if (i !== (i | 0))
            throw $.iae(i);
          if (i < 0 || i >= t1.length)
            throw $.ioore(i);
          remove = $.$eq(test.call$1(t1[i]), removeMatching);
          this._checkModification$1(modificationCount);
          if (remove === true) {
            i = this._liblib0$_remove$1(this, i);
            modificationCount = $.$add$ns(this._modificationCount, 1);
            this._modificationCount = modificationCount;
          } else {
            i0 = (i + 1 & this._table.length - 1) >>> 0;
            i = i0;
          }
        }
    }
  },
  removeWhere$1: function(_, test) {
    this._filterWhere$2(test, true);
  },
  clear$0: function(_) {
    var t1, t3, t2, t4, t5, i, i0;
    t1 = this._head;
    if (t1 !== (t1 | 0))
      return this.clear$0$bailout1(1, t1);
    t3 = this._tail;
    if (t1 !== t3) {
      for (t2 = this._table, t4 = t2.length, t5 = t4 - 1, i = t1; i !== t3; i0 = (i + 1 & t5) >>> 0, i = i0) {
        if (i < 0 || i >= t4)
          throw $.ioore(i);
        t2[i] = null;
      }
      this._tail = 0;
      this._head = 0;
      this._modificationCount = $.$add$ns(this._modificationCount, 1);
    }
  },
  clear$0$bailout1: function(state0, t1) {
    var t3, t2, t4, t5, i, i0;
    t3 = this._tail;
    if (t1 !== t3) {
      for (t2 = this._table, t4 = t2.length, t5 = t4 - 1, i = t1; i !== t3; i0 = (i + 1 & t5) >>> 0, i = i0) {
        if (i !== (i | 0))
          throw $.iae(i);
        if (i < 0 || i >= t4)
          throw $.ioore(i);
        t2[i] = null;
      }
      this._tail = 0;
      this._head = 0;
      this._modificationCount = $.$add$ns(this._modificationCount, 1);
    }
  },
  toString$0: function(_) {
    return $.ToString_collectionToString(this);
  },
  addLast$1: function(_, element) {
    this._add$1(this, element);
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw $.$$throw($.StateError$("No elements"));
    this._modificationCount = $.$add$ns(this._modificationCount, 1);
    t1 = this._table;
    t2 = this._head;
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  removeLast$0: function(_) {
    var t1, t2;
    if (this._head === this._tail)
      throw $.$$throw($.StateError$("No elements"));
    this._modificationCount = $.$add$ns(this._modificationCount, 1);
    this._tail = $.$and$n($.$sub$n(this._tail, 1), this._table.length - 1);
    t1 = this._table;
    t2 = this._tail;
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    return t1[t2];
  },
  _checkModification$1: function(expectedModificationCount) {
    if ($.$eq(expectedModificationCount, this._modificationCount) !== true)
      throw $.$$throw($.ConcurrentModificationError$(this));
  },
  _add$1: function(_, element) {
    var t1, t2, t3;
    t1 = this._table;
    t2 = this._tail;
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    t1[t2] = element;
    this._tail = (t2 + 1 & t3 - 1) >>> 0;
    if (this._head === this._tail)
      this._grow$0();
    t1 = this._modificationCount;
    if (typeof t1 !== "number")
      return this._add$1$bailout(1, t1);
    this._modificationCount = t1 + 1;
  },
  _add$1$bailout: function(state0, t1) {
    this._modificationCount = $.$add$ns(t1, 1);
  },
  _liblib0$_remove$1: function(_, offset) {
    var t1, t2, mask, t3, startDistance, t4, i, prevOffset, nextOffset;
    t1 = this._table;
    t2 = t1.length;
    mask = t2 - 1;
    t3 = this._head;
    startDistance = (offset - t3 & mask) >>> 0;
    t4 = this._tail;
    if (t4 !== (t4 | 0))
      return this._liblib0$_remove$1$bailout(1, offset, t4, mask, startDistance);
    if (startDistance < (t4 - offset & mask) >>> 0) {
      i = offset;
      while (true) {
        if (t3 !== (t3 | 0))
          return this._liblib0$_remove$1$bailout(3, offset, t1, mask, 0, t3, t2, i);
        if (!(i !== t3))
          break;
        prevOffset = (i - 1 & mask) >>> 0;
        if (prevOffset < 0 || prevOffset >= t2)
          throw $.ioore(prevOffset);
        t4 = t1[prevOffset];
        if (i < 0 || i >= t2)
          throw $.ioore(i);
        t1[i] = t4;
        i = prevOffset;
      }
      if (t3 < 0 || t3 >= t2)
        throw $.ioore(t3);
      t1[t3] = null;
      this._head = (t3 + 1 & mask) >>> 0;
      return (offset + 1 & mask) >>> 0;
    } else {
      this._tail = (t4 - 1 & mask) >>> 0;
      for (t1 = this._table, t2 = t1.length, i = offset; t3 = this._tail, i !== t3; i = nextOffset) {
        nextOffset = (i + 1 & mask) >>> 0;
        if (nextOffset < 0 || nextOffset >= t2)
          throw $.ioore(nextOffset);
        t3 = t1[nextOffset];
        if (i < 0 || i >= t2)
          throw $.ioore(i);
        t1[i] = t3;
      }
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t2)
        throw $.ioore(t3);
      t1[t3] = null;
      return offset;
    }
  },
  _liblib0$_remove$1$bailout: function(state0, offset, t1, mask, startDistance, t3, t2, i) {
    switch (state0) {
      case 0:
        mask = this._table.length - 1;
        startDistance = (offset - this._head & mask) >>> 0;
        t1 = this._tail;
      case 1:
        state0 = 0;
        t1 = $.$sub$n(t1, offset);
      case 2:
        state0 = 0;
      default:
        var prevOffset, nextOffset;
        if (state0 === 3 || state0 === 0 && startDistance < $.$and$n(t1, mask))
          switch (state0) {
            case 0:
              t1 = this._table;
              t2 = t1.length;
              i = offset;
            case 3:
              L0:
                while (true)
                  switch (state0) {
                    case 0:
                      t3 = this._head;
                    case 3:
                      state0 = 0;
                      if (!(i !== t3))
                        break L0;
                      prevOffset = (i - 1 & mask) >>> 0;
                      if (prevOffset < 0 || prevOffset >= t2)
                        throw $.ioore(prevOffset);
                      t3 = t1[prevOffset];
                      if (i < 0 || i >= t2)
                        throw $.ioore(i);
                      t1[i] = t3;
                      i = prevOffset;
                  }
              if (t3 !== (t3 | 0))
                throw $.iae(t3);
              if (t3 < 0 || t3 >= t2)
                throw $.ioore(t3);
              t1[t3] = null;
              this._head = (t3 + 1 & mask) >>> 0;
              return (offset + 1 & mask) >>> 0;
          }
        else
          switch (state0) {
            case 0:
              t1 = this._tail;
            case 4:
              state0 = 0;
              t1 = $.$sub$n(t1, 1);
            case 5:
              state0 = 0;
              this._tail = $.$and$n(t1, mask);
              for (t1 = this._table, t2 = t1.length, i = offset; t3 = this._tail, i !== t3; i = nextOffset) {
                nextOffset = (i + 1 & mask) >>> 0;
                if (nextOffset < 0 || nextOffset >= t2)
                  throw $.ioore(nextOffset);
                t3 = t1[nextOffset];
                if (i < 0 || i >= t2)
                  throw $.ioore(i);
                t1[i] = t3;
              }
              if (t3 !== (t3 | 0))
                throw $.iae(t3);
              if (t3 < 0 || t3 >= t2)
                throw $.ioore(t3);
              t1[t3] = null;
              return offset;
          }
    }
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = $.List_List(this._table.length * 2);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    $.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
    $.JSArray_methods.setRange$4(newTable, split, this._head, this._table, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  _writeToList$1: function(target) {
    var t1, t2, $length, firstPartSize;
    t1 = $.JSNumber_methods.$le(this._head, this._tail);
    t2 = this._head;
    if (t1) {
      $length = $.$sub$n(this._tail, t2);
      $.JSArray_methods.setRange$4(target, 0, $length, this._table, this._head);
      return $length;
    } else {
      t1 = this._table;
      firstPartSize = t1.length - t2;
      $.JSArray_methods.setRange$4(target, 0, firstPartSize, t1, t2);
      $.JSArray_methods.setRange$4(target, firstPartSize, this._tail, this._table, 0);
      return $.$add$ns(this._tail, firstPartSize);
    }
  },
  _preGrow$1: function(newElementCount) {
    var newTable = $.List_List($.ListQueue__nextPowerOf2(newElementCount));
    this._tail = this._writeToList$1(newTable);
    this._table = newTable;
    this._head = 0;
  },
  ListQueue$1: function(initialCapacity) {
    if (initialCapacity == null || $.$lt$n(initialCapacity, 8) === true)
      initialCapacity = 8;
    else if ($.ListQueue__isPowerOf2(initialCapacity) !== true)
      initialCapacity = $.ListQueue__nextPowerOf2(initialCapacity);
    this._table = $.List_List(initialCapacity);
  },
  $asCollection: function() {
    return null;
  },
  $asIterable: function() {
    return null;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  }
};

$$._ListQueueIterator = {"": "Object;_queue,_end,_modificationCount<,_liblib0$_position,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    t1._checkModification$1(this._modificationCount);
    t2 = this._liblib0$_position;
    if (t2 !== (t2 | 0))
      return this.moveNext$0$bailout(1, t2, t1);
    if (t2 === this._end) {
      this._liblib0$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw $.ioore(t2);
    this._liblib0$_current = t3[t2];
    this._liblib0$_position = (this._liblib0$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  },
  moveNext$0$bailout: function(state0, t2, t1) {
    var t3;
    if (t2 === this._end) {
      this._liblib0$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= t3.length)
      throw $.ioore(t2);
    this._liblib0$_current = t3[t2];
    this._liblib0$_position = (this._liblib0$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  }
};

$$._SplayTreeNode = {"": "Object;key>,left*,right*"};

$$._SplayTreeMapNode = {"": "_SplayTreeNode;value*,key,left,right"};

$$._SplayTree = {"": "Object;_liblib0$_root<,_count<,_modificationCount<,_splayCount<",
  _splay$1: function(key) {
    var current, left, right, left0, comp, t1, t2, tmp, current0;
    current = this._liblib0$_root;
    if (current == null)
      return -1;
    left = this._dummy;
    for (right = left, left0 = right, comp = null; true;) {
      t1 = $.getInterceptor$x(current);
      comp = $.compareTo$1$ns(t1.get$key(current), key);
      t2 = $.getInterceptor$n(comp);
      if (t2.$gt(comp, 0) === true) {
        if (t1.get$left(current) == null)
          break;
        comp = $.compareTo$1$ns($.get$key$x(t1.get$left(current)), key);
        if ($.$gt$n(comp, 0) === true) {
          tmp = t1.get$left(current);
          t2 = $.getInterceptor$x(tmp);
          t1.set$left(current, t2.get$right(tmp));
          t2.set$right(tmp, current);
          if (t2.get$left(tmp) == null) {
            current = tmp;
            break;
          }
          current = tmp;
        }
        $.set$left$x(right, current);
        current0 = $.get$left$x(current);
        right = current;
        current = current0;
      } else {
        if (t2.$lt(comp, 0) === true) {
          if (t1.get$right(current) == null)
            break;
          comp = $.compareTo$1$ns($.get$key$x(t1.get$right(current)), key);
          if ($.$lt$n(comp, 0) === true) {
            tmp = t1.get$right(current);
            t2 = $.getInterceptor$x(tmp);
            t1.set$right(current, t2.get$left(tmp));
            t2.set$left(tmp, current);
            if (t2.get$right(tmp) == null) {
              current = tmp;
              break;
            }
            current = tmp;
          }
          $.set$right$x(left0, current);
          current0 = $.get$right$x(current);
        } else
          break;
        left0 = current;
        current = current0;
      }
    }
    t1 = $.getInterceptor$x(current);
    $.set$right$x(left0, t1.get$left(current));
    $.set$left$x(right, t1.get$right(current));
    t1.set$left(current, left.right);
    t1.set$right(current, left.left);
    this._liblib0$_root = current;
    left.right = null;
    left.left = null;
    this._splayCount = this._splayCount + 1;
    return comp;
  },
  _liblib0$_remove$1: function(_, key) {
    var result, t1, t2, right;
    if (this._liblib0$_root == null)
      return;
    if ($.$eq(this._splay$1(key), 0) !== true)
      return;
    result = this._liblib0$_root;
    this._count = this._count - 1;
    t1 = $.get$left$x(this._liblib0$_root);
    t2 = this._liblib0$_root;
    if (t1 == null)
      this._liblib0$_root = $.get$right$x(t2);
    else {
      right = $.get$right$x(t2);
      this._liblib0$_root = $.get$left$x(this._liblib0$_root);
      this._splay$1(key);
      $.set$right$x(this._liblib0$_root, right);
    }
    this._modificationCount = this._modificationCount + 1;
    return result;
  },
  _addNewRoot$2: function(node, comp) {
    var t1, t2;
    this._count = this._count + 1;
    this._modificationCount = this._modificationCount + 1;
    if (this._liblib0$_root == null) {
      this._liblib0$_root = node;
      return;
    }
    t1 = $.$lt$n(comp, 0);
    t2 = this._liblib0$_root;
    if (t1 === true) {
      node.left = t2;
      node.right = $.get$right$x(this._liblib0$_root);
      $.set$right$x(this._liblib0$_root, null);
    } else {
      node.right = t2;
      node.left = $.get$left$x(this._liblib0$_root);
      $.set$left$x(this._liblib0$_root, null);
    }
    this._liblib0$_root = node;
  }
};

$$.SplayTreeMap = {"": "_SplayTree;_comparator,_liblib0$_root,_dummy,_count,_modificationCount,_splayCount",
  $index: function(_, key) {
    var comp;
    if (key == null)
      throw $.$$throw($.ArgumentError$(key));
    if (this._liblib0$_root != null) {
      comp = this._splay$1(key);
      if (typeof comp !== "number")
        return this.$$index$bailout(1, comp);
      if (comp === 0)
        return $.get$value$x(this._liblib0$_root);
    }
    return;
  },
  $$index$bailout: function(state0, comp) {
    switch (state0) {
      case 0:
        if (key == null)
          throw $.$$throw($.ArgumentError$(key));
      case 1:
        if (state0 === 1 || state0 === 0 && this._liblib0$_root != null)
          switch (state0) {
            case 0:
              comp = this._splay$1(key);
            case 1:
              state0 = 0;
              if ($.$eq(comp, 0) === true)
                return $.get$value$x(this._liblib0$_root);
          }
        return;
    }
  },
  remove$1: function(_, key) {
    var t1, root;
    t1 = $.objectIsSubtype(key, $.getRuntimeTypeArgument(this, this["$asSplayTreeMap"], 0));
    if (!t1)
      return;
    root = this._liblib0$_remove$1(this, key);
    if (root != null)
      return $.get$value$x(root);
    return;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  $indexSet: function(_, key, value) {
    var comp;
    if (key == null)
      throw $.$$throw($.ArgumentError$(key));
    comp = this._splay$1(key);
    if (typeof comp !== "number")
      return this.$$indexSet$bailout(1, key, value, comp);
    if (comp === 0) {
      $.set$value$x(this._liblib0$_root, value);
      return;
    }
    this._addNewRoot$2($._SplayTreeMapNode$(key, value), comp);
  },
  $$indexSet$bailout: function(state0, key, value, comp) {
    if ($.$eq(comp, 0) === true) {
      $.set$value$x(this._liblib0$_root, value);
      return;
    }
    this._addNewRoot$2($._SplayTreeMapNode$(key, value), comp);
  },
  putIfAbsent$2: function(_, key, ifAbsent) {
    var comp, modificationCount, splayCount, value;
    if (key == null)
      throw $.$$throw($.ArgumentError$(key));
    comp = this._splay$1(key);
    if ($.$eq(comp, 0) === true)
      return $.get$value$x(this._liblib0$_root);
    modificationCount = this._modificationCount;
    splayCount = this._splayCount;
    value = ifAbsent.call$0();
    if (modificationCount !== this._modificationCount)
      throw $.$$throw($.ConcurrentModificationError$(this));
    if (splayCount !== this._splayCount)
      comp = this._splay$1(key);
    this._addNewRoot$2($._SplayTreeMapNode$(key, value), comp);
    return value;
  },
  get$isEmpty: function(_) {
    return this._liblib0$_root == null;
  },
  forEach$1: function(_, f) {
    var nodes, node, t1;
    nodes = $._SplayTreeNodeIterator$(this);
    for (; nodes.moveNext$0();) {
      node = nodes.get$current();
      t1 = $.getInterceptor$x(node);
      f.call$2(t1.get$key(node), t1.get$value(node));
    }
  },
  get$length: function(_) {
    return this._count;
  },
  clear$0: function(_) {
    this._liblib0$_root = null;
    this._count = 0;
    this._modificationCount = this._modificationCount + 1;
  },
  containsKey$1: function(_, key) {
    return $.$eq(this._splay$1(key), 0);
  },
  get$keys: function(_) {
    return $._SplayTreeKeyIterable$(this);
  },
  get$values: function(_) {
    return $._SplayTreeValueIterable$(this);
  },
  toString$0: function(_) {
    return $.ToString_mapToString(this);
  },
  $as_SplayTree: function (K, V) { return [K]; },
  $asMap: function() {
    return null;
  },
  $isMap: function() {
    return true;
  }
};

$$._SplayTreeIterator = {"": "Object;_modificationCount<,_splayCount<",
  get$current: function() {
    var t1 = this._currentNode;
    if (t1 == null)
      return;
    return this._getValue$1(t1);
  },
  _findLeftMostDescendent$1: function(node) {
    var t1;
    for (t1 = this._workList; node != null;) {
      t1.push(node);
      node = $.get$left$x(node);
    }
  },
  _rebuildWorkList$1: function(currentNode) {
    var t1;
    $.JSArray_methods.clear$0(this._workList);
    t1 = this._tree;
    if (currentNode == null)
      this._findLeftMostDescendent$1(t1.get$_liblib0$_root());
    else {
      t1._splay$1($.get$key$x(currentNode));
      this._findLeftMostDescendent$1($.get$right$x(t1.get$_liblib0$_root()));
    }
  },
  moveNext$0: function() {
    var t1, t2;
    t1 = this._tree;
    if ($.$eq(this._modificationCount, t1.get$_modificationCount()) !== true)
      throw $.$$throw($.ConcurrentModificationError$(t1));
    t2 = this._workList;
    if ($.JSArray_methods.get$isEmpty(t2)) {
      this._currentNode = null;
      return false;
    }
    if ($.$eq(t1.get$_splayCount(), this._splayCount) !== true)
      this._rebuildWorkList$1(this._currentNode);
    if (0 >= t2.length)
      throw $.ioore(0);
    this._currentNode = t2.pop();
    this._findLeftMostDescendent$1($.get$right$x(this._currentNode));
    return true;
  },
  _SplayTreeIterator$1: function(tree) {
    this._findLeftMostDescendent$1(tree.get$_liblib0$_root());
  }
};

$$._SplayTreeKeyIterable = {"": "Iterable;_tree",
  get$length: function(_) {
    return this._tree._count;
  },
  get$isEmpty: function(_) {
    return this._tree._count === 0;
  },
  get$iterator: function(_) {
    return $._SplayTreeKeyIterator$(this._tree);
  },
  $asIterable: function() {
    return null;
  }
};

$$._SplayTreeValueIterable = {"": "Iterable;_map",
  get$length: function(_) {
    return this._map._count;
  },
  get$isEmpty: function(_) {
    return this._map._count === 0;
  },
  get$iterator: function(_) {
    return $._SplayTreeValueIterator$(this._map);
  },
  $asIterable: function() {
    return function (K, V) { return [V]; };
  }
};

$$._SplayTreeKeyIterator = {"": "_SplayTreeIterator;_tree,_workList,_modificationCount,_splayCount,_currentNode",
  _getValue$1: function(node) {
    return $.get$key$x(node);
  }
};

$$._SplayTreeValueIterator = {"": "_SplayTreeIterator;_tree,_workList,_modificationCount,_splayCount,_currentNode",
  _getValue$1: function(node) {
    return $.get$value$x(node);
  }
};

$$._SplayTreeNodeIterator = {"": "_SplayTreeIterator;_tree,_workList,_modificationCount,_splayCount,_currentNode",
  _getValue$1: function(node) {
    return node;
  }
};

$$.Collection = {"": "Iterable;",
  addAll$1: function(_, elements) {
    var t1;
    for (t1 = $.get$iterator$ax(elements); t1.moveNext$0() === true;)
      this.add$1(this, t1.get$current());
  },
  removeAll$1: function(_, elements) {
    $.IterableMixinWorkaround_removeAll(this, elements);
  },
  clear$0: function(_) {
    $.IterableMixinWorkaround_removeWhere(this, new $.Collection_clear_anon());
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return null;
  },
  $asIterable: function() {
    return null;
  }
};

$$.Collection_clear_anon = {"": "Closure;",
  call$1: function(e) {
    return true;
  },
  $isFunction: true
};

$$.DateTime = {"": "Object;millisecondsSinceEpoch<,isUtc",
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && !!other.$isDateTime))
      return false;
    return $.$eq(this.millisecondsSinceEpoch, other.millisecondsSinceEpoch) === true && $.$eq(this.isUtc, other.isUtc) === true;
  },
  $lt: function(_, other) {
    var t1, t3;
    t1 = this.millisecondsSinceEpoch;
    if (typeof t1 !== "number")
      return this.$$lt$bailout(1, other, t1);
    t3 = other.get$millisecondsSinceEpoch();
    if (typeof t3 !== "number")
      return this.$$lt$bailout(2, 0, t1, t3);
    return t1 < t3;
  },
  $$lt$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.millisecondsSinceEpoch;
      case 1:
        state0 = 0;
        t3 = other.get$millisecondsSinceEpoch();
      case 2:
        state0 = 0;
        return $.$lt$n(t1, t3);
    }
  },
  $le: function(_, other) {
    var t1, t3;
    t1 = this.millisecondsSinceEpoch;
    if (typeof t1 !== "number")
      return this.$$le$bailout(1, other, t1);
    t3 = other.get$millisecondsSinceEpoch();
    if (typeof t3 !== "number")
      return this.$$le$bailout(2, 0, t1, t3);
    return t1 <= t3;
  },
  $$le$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.millisecondsSinceEpoch;
      case 1:
        state0 = 0;
        t3 = other.get$millisecondsSinceEpoch();
      case 2:
        state0 = 0;
        return $.$le$n(t1, t3);
    }
  },
  $gt: function(_, other) {
    var t1, t3;
    t1 = this.millisecondsSinceEpoch;
    if (typeof t1 !== "number")
      return this.$$gt$bailout(1, other, t1);
    t3 = other.get$millisecondsSinceEpoch();
    if (typeof t3 !== "number")
      return this.$$gt$bailout(2, 0, t1, t3);
    return t1 > t3;
  },
  $$gt$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.millisecondsSinceEpoch;
      case 1:
        state0 = 0;
        t3 = other.get$millisecondsSinceEpoch();
      case 2:
        state0 = 0;
        return $.$gt$n(t1, t3);
    }
  },
  $ge: function(_, other) {
    return $.$ge$n(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  compareTo$1: function(_, other) {
    return $.compareTo$1$ns(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  get$hashCode: function(_) {
    return this.millisecondsSinceEpoch;
  },
  toString$0: function(_) {
    var t1, t2, t3, y, m, d, h, min, sec, ms;
    t1 = new $.DateTime_toString_fourDigits();
    t2 = new $.DateTime_toString_threeDigits();
    t3 = new $.DateTime_toString_twoDigits();
    y = t1.call$1(this.get$year());
    m = t3.call$1(this.get$month());
    d = t3.call$1(this.get$day());
    h = t3.call$1(this.get$hour());
    min = t3.call$1(this.get$minute());
    sec = t3.call$1(this.get$second());
    ms = t2.call$1(this.get$millisecond());
    if (this.isUtc === true)
      return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms) + "Z";
    else
      return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms);
  },
  add$1: function(_, duration) {
    var ms, t2;
    ms = this.millisecondsSinceEpoch;
    if (typeof ms !== "number")
      return this.add$1$bailout(1, duration, ms);
    t2 = duration.get$inMilliseconds();
    if (typeof t2 !== "number")
      return this.add$1$bailout(2, 0, ms, t2);
    return $.DateTime$fromMillisecondsSinceEpoch(ms + t2, this.isUtc);
  },
  add$1$bailout: function(state0, duration, ms, t2) {
    switch (state0) {
      case 0:
        ms = this.millisecondsSinceEpoch;
      case 1:
        state0 = 0;
        t2 = duration.get$inMilliseconds();
      case 2:
        state0 = 0;
        return $.DateTime$fromMillisecondsSinceEpoch($.$add$ns(ms, t2), this.isUtc);
    }
  },
  get$year: function() {
    return $.Primitives_getYear(this);
  },
  get$month: function() {
    return $.Primitives_getMonth(this);
  },
  get$day: function() {
    return $.Primitives_getDay(this);
  },
  get$hour: function() {
    return $.Primitives_getHours(this);
  },
  get$minute: function() {
    return $.Primitives_getMinutes(this);
  },
  get$second: function() {
    return $.Primitives_getSeconds(this);
  },
  get$millisecond: function() {
    return $.Primitives_getMilliseconds(this);
  },
  get$weekday: function() {
    return $.Primitives_getWeekday(this);
  },
  DateTime$_now$0: function() {
    $.Primitives_lazyAsJsDate(this);
  },
  DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
    if ($.abs$0$n(millisecondsSinceEpoch) > 8640000000000000)
      throw $.$$throw($.ArgumentError$(millisecondsSinceEpoch));
    if (isUtc == null)
      throw $.$$throw($.ArgumentError$(isUtc));
  },
  $isDateTime: true
};

$$.DateTime_parse_parseIntOrZero = {"": "Closure;",
  call$1: function(matched) {
    if (matched == null)
      return 0;
    return $.int_parse(matched, null, null);
  },
  $isFunction: true
};

$$.DateTime_parse_parseDoubleOrZero = {"": "Closure;",
  call$1: function(matched) {
    if (matched == null)
      return 0;
    return $.double_parse(matched, null);
  },
  $isFunction: true
};

$$.DateTime_toString_fourDigits = {"": "Closure;",
  call$1: function(n) {
    var t1, absN, sign;
    t1 = $.getInterceptor$n(n);
    absN = t1.abs$0(n);
    sign = t1.$lt(n, 0) === true ? "-" : "";
    if (absN >= 1000)
      return $.S(n);
    if (absN >= 100)
      return sign + "0" + $.S(absN);
    if (absN >= 10)
      return sign + "00" + $.S(absN);
    return sign + "000" + $.S(absN);
  },
  $isFunction: true
};

$$.DateTime_toString_threeDigits = {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100) === true)
      return $.S(n);
    if (t1.$ge(n, 10) === true)
      return "0" + $.S(n);
    return "00" + $.S(n);
  },
  $isFunction: true
};

$$.DateTime_toString_twoDigits = {"": "Closure;",
  call$1: function(n) {
    if ($.$ge$n(n, 10) === true)
      return $.S(n);
    return "0" + $.S(n);
  },
  $isFunction: true
};

$$.Duration = {"": "Object;_duration<",
  $add: function(_, other) {
    var t1, t3;
    t1 = this._duration;
    if (typeof t1 !== "number")
      return this.$$add$bailout(1, other, t1);
    t3 = other.get$_duration();
    if (typeof t3 !== "number")
      return this.$$add$bailout(2, 0, t1, t3);
    return $.Duration$(0, 0, t1 + t3, 0, 0, 0);
  },
  $$add$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this._duration;
      case 1:
        state0 = 0;
        t3 = other.get$_duration();
      case 2:
        state0 = 0;
        return $.Duration$(0, 0, $.$add$ns(t1, t3), 0, 0, 0);
    }
  },
  $sub: function(_, other) {
    return $.Duration$(0, 0, $.$sub$n(this._duration, other.get$_duration()), 0, 0, 0);
  },
  $mul: function(_, factor) {
    var t1;
    if (typeof factor !== "number")
      return this.$$mul$bailout(1, factor);
    t1 = this._duration;
    if (typeof t1 !== "number")
      return this.$$mul$bailout(2, factor, t1);
    return $.Duration$(0, 0, t1 * factor, 0, 0, 0);
  },
  $$mul$bailout: function(state0, factor, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._duration;
      case 2:
        state0 = 0;
        return $.Duration$(0, 0, $.$mul$n(t1, factor), 0, 0, 0);
    }
  },
  $tdiv: function(_, quotient) {
    if (quotient === 0)
      throw $.$$throw($.IntegerDivisionByZeroException$());
    return $.Duration$(0, 0, $.$tdiv$n(this._duration, quotient), 0, 0, 0);
  },
  $lt: function(_, other) {
    var t1, t3;
    t1 = this._duration;
    if (typeof t1 !== "number")
      return this.$$lt$bailout(1, other, t1);
    t3 = other.get$_duration();
    if (typeof t3 !== "number")
      return this.$$lt$bailout(2, 0, t1, t3);
    return t1 < t3;
  },
  $$lt$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this._duration;
      case 1:
        state0 = 0;
        t3 = other.get$_duration();
      case 2:
        state0 = 0;
        return $.$lt$n(t1, t3);
    }
  },
  $gt: function(_, other) {
    var t1, t3;
    t1 = this._duration;
    if (typeof t1 !== "number")
      return this.$$gt$bailout(1, other, t1);
    t3 = other.get$_duration();
    if (typeof t3 !== "number")
      return this.$$gt$bailout(2, 0, t1, t3);
    return t1 > t3;
  },
  $$gt$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this._duration;
      case 1:
        state0 = 0;
        t3 = other.get$_duration();
      case 2:
        state0 = 0;
        return $.$gt$n(t1, t3);
    }
  },
  $le: function(_, other) {
    var t1, t3;
    t1 = this._duration;
    if (typeof t1 !== "number")
      return this.$$le$bailout(1, other, t1);
    t3 = other.get$_duration();
    if (typeof t3 !== "number")
      return this.$$le$bailout(2, 0, t1, t3);
    return t1 <= t3;
  },
  $$le$bailout: function(state0, other, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this._duration;
      case 1:
        state0 = 0;
        t3 = other.get$_duration();
      case 2:
        state0 = 0;
        return $.$le$n(t1, t3);
    }
  },
  $ge: function(_, other) {
    return $.$ge$n(this._duration, other.get$_duration());
  },
  get$inHours: function() {
    return $.$tdiv$n(this._duration, 3600000000);
  },
  get$inMinutes: function() {
    return $.$tdiv$n(this._duration, 60000000);
  },
  get$inSeconds: function() {
    return $.$tdiv$n(this._duration, 1000000);
  },
  get$inMilliseconds: function() {
    return $.$tdiv$n(this._duration, 1000);
  },
  get$inMicroseconds: function() {
    return this._duration;
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && !!other.$isDuration))
      return false;
    return $.$eq(this._duration, other._duration);
  },
  get$hashCode: function(_) {
    return $.get$hashCode$(this._duration);
  },
  compareTo$1: function(_, other) {
    return $.compareTo$1$ns(this._duration, other.get$_duration());
  },
  toString$0: function(_) {
    var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new $.Duration_toString_sixDigits();
    t2 = new $.Duration_toString_twoDigits();
    if ($.$lt$n(this.get$inMicroseconds(), 0) === true)
      return "-" + $.S($.Duration$(0, 0, $.$negate$n(this.get$inMicroseconds()), 0, 0, 0));
    twoDigitMinutes = t2.call$1($.remainder$1$n(this.get$inMinutes(), 60));
    twoDigitSeconds = t2.call$1($.remainder$1$n(this.get$inSeconds(), 60));
    sixDigitUs = t1.call$1($.remainder$1$n(this.get$inMicroseconds(), 1000000));
    return $.S(this.get$inHours()) + ":" + $.S(twoDigitMinutes) + ":" + $.S(twoDigitSeconds) + "." + $.S(sixDigitUs);
  },
  $isDuration: true
};

$$.Duration_toString_sixDigits = {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100000) === true)
      return $.S(n);
    if (t1.$ge(n, 10000) === true)
      return "0" + $.S(n);
    if (t1.$ge(n, 1000) === true)
      return "00" + $.S(n);
    if (t1.$ge(n, 100) === true)
      return "000" + $.S(n);
    if (t1.$gt(n, 10) === true)
      return "0000" + $.S(n);
    return "00000" + $.S(n);
  },
  $isFunction: true
};

$$.Duration_toString_twoDigits = {"": "Closure;",
  call$1: function(n) {
    if ($.$ge$n(n, 10) === true)
      return $.S(n);
    return "0" + $.S(n);
  },
  $isFunction: true
};

$$.NullThrownError = {"": "Object;",
  toString$0: function(_) {
    return "Throw of null.";
  }
};

$$.ArgumentError = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
};

$$.RangeError = {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
};

$$.NoSuchMethodError = {"": "Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function(_) {
    var t1, t2, t3, t4, actualParameters, i, formalParameters;
    t1 = {};
    t1.sb_0 = $.StringBuffer$("");
    t1.i_1 = 0;
    t2 = this._arguments;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
      return this.toString$0$bailout1(1, t1, t2);
    for (; $.$lt$n(t1.i_1, t2.length) === true; t1.i_1 = $.$add$ns(t1.i_1, 1)) {
      if ($.$gt$n(t1.i_1, 0) === true) {
        t3 = t1.sb_0;
        t3.write$1(t3, ", ");
      }
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= t2.length)
        throw $.ioore(t4);
      t3.write$1(t3, $.Error_safeToString(t2[t4]));
    }
    t2 = this._namedArguments;
    if (t2 != null)
      $.forEach$1$ax(t2, new $.NoSuchMethodError_toString_anon(t1));
    t2 = this._existingArgumentNames;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
      return this.toString$0$bailout1(2, t1, t2);
    t3 = t1.sb_0;
    actualParameters = t3.toString$0(t3);
    t1.sb_0 = $.StringBuffer$("");
    for (i = 0; i < t2.length; ++i) {
      if (i > 0) {
        t3 = t1.sb_0;
        t3.write$1(t3, ", ");
      }
      t3 = t1.sb_0;
      if (i >= t2.length)
        throw $.ioore(i);
      t3.write$1(t3, t2[i]);
    }
    t1 = t1.sb_0;
    formalParameters = t1.toString$0(t1);
    t1 = this._memberName;
    return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t1) + "(" + $.S(formalParameters) + ")";
  },
  toString$0$bailout1: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = {};
        t1.sb_0 = $.StringBuffer$("");
        t1.i_1 = 0;
        t2 = this._arguments;
      case 1:
        state0 = 0;
        if (t2 != null)
          for (t3 = $.getInterceptor$asx(t2); $.$lt$n(t1.i_1, $.get$length$asx(t2)) === true; t1.i_1 = $.$add$ns(t1.i_1, 1)) {
            if ($.$gt$n(t1.i_1, 0) === true) {
              t4 = t1.sb_0;
              t4.write$1(t4, ", ");
            }
            t4 = t1.sb_0;
            t4.write$1(t4, $.Error_safeToString(t3.$index(t2, t1.i_1)));
          }
        t2 = this._namedArguments;
        if (t2 != null)
          $.forEach$1$ax(t2, new $.NoSuchMethodError_toString_anon(t1));
        t2 = this._existingArgumentNames;
      case 2:
        var t3, t4, actualParameters, i, formalParameters;
        state0 = 0;
        if (t2 == null)
          return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Arguments: [" + $.S(t1.sb_0) + "]";
        else {
          t3 = t1.sb_0;
          actualParameters = t3.toString$0(t3);
          t1.sb_0 = $.StringBuffer$("");
          for (t3 = $.getInterceptor$asx(t2), i = 0; $.JSNumber_methods.$lt(i, $.get$length$asx(t2)); ++i) {
            if (i > 0) {
              t4 = t1.sb_0;
              t4.write$1(t4, ", ");
            }
            t4 = t1.sb_0;
            t4.write$1(t4, t3.$index(t2, i));
          }
          t1 = t1.sb_0;
          formalParameters = t1.toString$0(t1);
          t1 = this._memberName;
          return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t1) + "(" + $.S(formalParameters) + ")";
        }
    }
  }
};

$$.UnsupportedError = {"": "Object;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  }
};

$$.UnimplementedError = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
  }
};

$$.StateError = {"": "Object;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  }
};

$$.ConcurrentModificationError = {"": "Object;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.S($.Error_safeToString(t1)) + ".";
  }
};

$$.StackOverflowError = {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  }
};

$$.RuntimeError = {"": "Object;message",
  toString$0: function(_) {
    return "RuntimeError: " + this.message;
  }
};

$$._ExceptionImplementation = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true
};

$$.FormatException = {"": "Object;message",
  toString$0: function(_) {
    return "FormatException: " + $.S(this.message);
  },
  $isException: true
};

$$.IntegerDivisionByZeroException = {"": "Object;",
  toString$0: function(_) {
    return "IntegerDivisionByZeroException";
  },
  $isException: true
};

$$.Expando = {"": "Object;name>",
  toString$0: function(_) {
    return "Expando:" + $.S(this.name);
  },
  $index: function(_, object) {
    var values = $.Primitives_getProperty(object, "expando$values");
    return values == null ? null : $.Primitives_getProperty(values, this._getKey$0());
  },
  $indexSet: function(_, object, value) {
    var values = $.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = $.Object$();
      $.Primitives_setProperty(object, "expando$values", values);
    }
    $.Primitives_setProperty(values, this._getKey$0(), value);
  },
  _getKey$0: function() {
    var key, t1;
    key = $.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = $.$add$ns(t1, 1);
      key = "expando$key$" + $.S(t1);
      $.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  }
};

$$.Iterable = {"": "Object;",
  map$1: function(_, f) {
    return $.MappedIterable$(this, f);
  },
  where$1: function(_, f) {
    return $.WhereIterable$(this, f);
  },
  contains$1: function(_, element) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      if ($.$eq(t1.get$current(), element) === true)
        return true;
    return false;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  join$1: function(_, separator) {
    var iterator, buffer;
    if (typeof separator !== "string")
      return this.join$1$bailout(1, separator);
    iterator = this.get$iterator(this);
    if (iterator.moveNext$0() !== true)
      return "";
    buffer = $.StringBuffer$("");
    if (separator === "")
      do
        buffer.write$1(buffer, $.S(iterator.get$current()));
      while (iterator.moveNext$0() === true);
    else {
      buffer.write$1(buffer, $.S(iterator.get$current()));
      for (; iterator.moveNext$0() === true;) {
        buffer.write$1(buffer, separator);
        buffer.write$1(buffer, $.S(iterator.get$current()));
      }
    }
    return buffer.toString$0(buffer);
  },
  join$1$bailout: function(state0, separator) {
    var iterator, buffer;
    iterator = this.get$iterator(this);
    if (iterator.moveNext$0() !== true)
      return "";
    buffer = $.StringBuffer$("");
    if (separator == null || $.$eq(separator, "") === true)
      do
        buffer.write$1(buffer, $.S(iterator.get$current()));
      while (iterator.moveNext$0() === true);
    else {
      buffer.write$1(buffer, $.S(iterator.get$current()));
      for (; iterator.moveNext$0() === true;) {
        buffer.write$1(buffer, separator);
        buffer.write$1(buffer, $.S(iterator.get$current()));
      }
    }
    return buffer.toString$0(buffer);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  get$isEmpty: function(_) {
    return this.get$iterator(this).moveNext$0() !== true;
  },
  elementAt$1: function(_, index) {
    var t1, remaining, t2;
    if (typeof index !== "number")
      return this.elementAt$1$bailout(1, index);
    if (!(typeof index === "number" && Math.floor(index) === index) || index < 0)
      throw $.$$throw($.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      if (remaining === 0)
        return t2;
      --remaining;
    }
    throw $.$$throw($.RangeError$value(index));
  },
  elementAt$1$bailout: function(state0, index) {
    var t1, remaining, t2, t3;
    if (!(typeof index === "number" && Math.floor(index) === index) || index < 0)
      throw $.$$throw($.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      t3 = $.getInterceptor(remaining);
      if (t3.$eq(remaining, 0) === true)
        return t2;
      remaining = t3.$sub(remaining, 1);
    }
    throw $.$$throw($.RangeError$value(index));
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return null;
  }
};

$$.Iterator = {"": "Object;"};

$$.Object = {"": ";",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(_) {
    return $.Primitives_objectHashCode(_);
  },
  toString$0: function(_) {
    return "Instance of '" + $.S($.Primitives_objectTypeName(_)) + "'";
  }
};

$$.StringBuffer = {"": "Object;_contents",
  get$length: function(_) {
    return $.get$length$asx(this._contents);
  },
  get$isEmpty: function(_) {
    return $.$eq(this.get$length(this), 0);
  },
  write$1: function(_, obj) {
    var str;
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    str = obj;
    this._contents = this._contents + str;
  },
  write$1$bailout: function(state0, obj) {
    var str = typeof obj === "string" ? obj : $.S(obj);
    this._contents = this._contents + str;
  },
  writeln$1: function(obj) {
    this.write$1(this, obj);
    this.write$1(this, "\n");
  },
  clear$0: function(_) {
    this._contents = "";
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    if (typeof $content === "string")
      this._contents = $content;
    else
      this.write$1(this, $content);
  }
};

$$._ChildrenElementList = {"": "Object;_liblib$_element,_childElements",
  toList$1$growable: function(_, growable) {
    var t1, output, len, t3, i, t2;
    t1 = this._childElements;
    if (growable === true) {
      output = [];
      $.JSArray_methods.set$length(output, $.get$length$asx(t1));
    } else
      output = $.List_List($.get$length$asx(t1));
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.toList$1$growable$bailout(1, t1, output);
    len = t1.length;
    t3 = output.length;
    i = 0;
    for (; i < len; ++i) {
      t2 = t1[i];
      if (i >= t3)
        throw $.ioore(i);
      output[i] = t2;
    }
    return output;
  },
  toList$1$growable$bailout: function(state0, t1, output) {
    var len, t3, i, t2;
    len = $.get$length$asx(t1);
    t3 = $.getInterceptor$asx(t1);
    i = 0;
    for (; $.JSNumber_methods.$lt(i, len); ++i) {
      t2 = t3.$index(t1, i);
      if (i >= output.length)
        throw $.ioore(i);
      output[i] = t2;
    }
    return output;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  contains$1: function(_, element) {
    return $.contains$1$asx(this._childElements, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = $.get$iterator$ax(this._childElements); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  where$1: function(_, f) {
    return $.WhereIterable$(this, f);
  },
  get$isEmpty: function(_) {
    return $.get$$$dom_firstElementChild$x(this._liblib$_element) == null;
  },
  elementAt$1: function(_, index) {
    return $.$index$asx(this._childElements, index);
  },
  get$length: function(_) {
    return $.get$length$asx(this._childElements);
  },
  $index: function(_, index) {
    var t1 = this._childElements;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, index, t1) {
    return $.$index$asx(t1, index);
  },
  $indexSet: function(_, index, value) {
    var t1, t2;
    t1 = this._liblib$_element;
    t2 = this._childElements;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
      return this.$$indexSet$bailout(1, index, value, t1, t2);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t2.length)
      throw $.ioore(index);
    $.$$dom_replaceChild$2$x(t1, value, t2[index]);
  },
  $$indexSet$bailout: function(state0, index, value, t1, t2) {
    $.$$dom_replaceChild$2$x(t1, value, $.$index$asx(t2, index));
  },
  add$1: function(_, value) {
    $.append$1$x(this._liblib$_element, value);
    return value;
  },
  get$iterator: function(_) {
    return $.JSArray_methods.get$iterator(this.toList$0(this));
  },
  addAll$1: function(_, iterable) {
    var t1, t2, t3;
    if (typeof iterable === "object" && iterable !== null && !!iterable.$is_ChildNodeListLazy)
      iterable = $.List_List$from(iterable, true);
    for (t1 = $.get$iterator$ax(iterable), t2 = this._liblib$_element, t3 = $.getInterceptor$x(t2); t1.moveNext$0() === true;)
      t3.append$1(t2, t1.get$current());
  },
  remove$1: function(_, object) {
    var t1;
    if (typeof object === "object" && object !== null && object.$isElement()) {
      t1 = this._liblib$_element;
      if ($.get$parentNode$x(object) === t1)
        $.$$dom_removeChild$1$x(t1, object);
    }
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(_, start, end) {
    if (end == null)
      end = this.get$length(this);
    return $._FrozenElementList$_wrap($.Lists_getRange(this, start, end, []));
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  clear$0: function(_) {
    $.set$text$x(this._liblib$_element, "");
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      $.$$dom_removeChild$1$x(this._liblib$_element, result);
    return result;
  },
  get$last: function(_) {
    var result = $.get$$$dom_lastElementChild$x(this._liblib$_element);
    if (result == null)
      throw $.$$throw($.StateError$("No elements"));
    return result;
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [null]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [null]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [null]; };
  }
};

$$._FrozenElementList = {"": "Object;_nodeList",
  contains$1: function(_, element) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      if ($.$eq(t1.get$current(), element) === true)
        return true;
    return false;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  where$1: function(_, f) {
    return $.WhereIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  elementAt$1: function(_, index) {
    return $.$index$asx(this._nodeList, index);
  },
  get$isEmpty: function(_) {
    return $.get$isEmpty$asx(this._nodeList);
  },
  get$length: function(_) {
    return $.get$length$asx(this._nodeList);
  },
  $index: function(_, index) {
    var t1 = this._nodeList;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, index, t1) {
    return $.$index$asx(t1, index);
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  get$iterator: function(_) {
    return $._FrozenElementListIterator$(this);
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  sublist$2: function(_, start, end) {
    return $._FrozenElementList$_wrap($.sublist$2$ax(this._nodeList, start, end));
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  clear$0: function(_) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  remove$1: function(_, element) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [null]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [null]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [null]; };
  }
};

$$._FrozenElementListIterator = {"": "Object;_list,_liblib$_index,_liblib$_current",
  moveNext$0: function() {
    var t1, nextIndex, t2;
    t1 = this._liblib$_index;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    nextIndex = t1 + 1;
    t1 = this._list;
    t2 = t1.get$length(t1);
    if (typeof t2 !== "number")
      return this.moveNext$0$bailout(2, t1, t2, nextIndex);
    if (nextIndex < t2) {
      this._liblib$_current = t1.$index(t1, nextIndex);
      this._liblib$_index = nextIndex;
      return true;
    }
    this._liblib$_index = t1.get$length(t1);
    this._liblib$_current = null;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, t2, nextIndex) {
    switch (state0) {
      case 0:
        t1 = this._liblib$_index;
      case 1:
        state0 = 0;
        nextIndex = $.$add$ns(t1, 1);
        t1 = this._list;
        t2 = t1.get$length(t1);
      case 2:
        state0 = 0;
        if ($.$lt$n(nextIndex, t2) === true) {
          this._liblib$_current = t1.$index(t1, nextIndex);
          this._liblib$_index = nextIndex;
          return true;
        }
        this._liblib$_index = t1.get$length(t1);
        this._liblib$_current = null;
        return false;
    }
  },
  get$current: function() {
    return this._liblib$_current;
  }
};

$$._ElementCssClassSet = {"": "CssClassSet;_liblib$_element",
  readClasses$0: function() {
    var s, t1, trimmed;
    s = $.LinkedHashSet$();
    for (t1 = $.JSArray_methods.get$iterator($.split$1$s($.get$$$dom_className$x(this._liblib$_element), " ")); t1.moveNext$0();) {
      trimmed = $.trim$0$s(t1.get$current());
      if (!$.JSString_methods.get$isEmpty(trimmed))
        s.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    $.List_List$from(s, true);
    $.set$$$dom_className$x(this._liblib$_element, s.join$1(s, " "));
  }
};

$$._ElementFactoryProvider__getColgroup_anon = {"": "Closure;",
  call$1: function(n) {
    return $.$eq($.get$tagName$x(n), "COLGROUP");
  },
  $isFunction: true
};

$$.Entry_remove_anon = {"": "Closure;completer_0",
  call$0: function() {
    var t1 = this.completer_0;
    t1.complete$0(t1);
  },
  $isFunction: true
};

$$.Entry_remove_anon0 = {"": "Closure;completer_1",
  call$1: function(error) {
    this.completer_1.completeError$1(error);
  },
  $isFunction: true
};

$$.HttpRequest_getString_anon = {"": "Closure;",
  call$1: function(xhr) {
    return $.get$responseText$x(xhr);
  },
  $isFunction: true
};

$$.HttpRequest_request_anon = {"": "Closure;completer_0,xhr_1",
  call$1: function(e) {
    var t1, t2, t3;
    t1 = this.xhr_1;
    t2 = $.getInterceptor$x(t1);
    t2 = $.$ge$n(t2.get$status(t1), 200) === true && $.$lt$n(t2.get$status(t1), 300) === true || $.$eq(t2.get$status(t1), 0) === true || $.$eq(t2.get$status(t1), 304) === true;
    t3 = this.completer_0;
    if (t2)
      t3.complete$1(t3, t1);
    else
      t3.completeError$1(e);
  },
  $isFunction: true
};

$$.HttpRequest_request_anon0 = {"": "Closure;completer_2",
  call$1: function(e) {
    this.completer_2.completeError$1(e);
  },
  $isFunction: true
};

$$._ChildNodeListLazy = {"": "Object;_this",
  get$last: function(_) {
    var result = this._this.lastChild;
    if (result == null)
      throw $.$$throw($.StateError$("No elements"));
    return result;
  },
  add$1: function(_, value) {
    $.append$1$x(this._this, value);
  },
  addAll$1: function(_, iterable) {
    var t1, len, t3, i, t2;
    if (typeof iterable === "object" && iterable !== null && !!iterable.$is_ChildNodeListLazy) {
      t1 = this._this;
      if (iterable._this !== t1) {
        len = iterable.get$length(iterable);
        if (typeof len !== "number")
          return this.addAll$1$bailout(1, iterable, len, t1);
        t3 = $.getInterceptor$x(t1);
        i = 0;
        for (; i < len; ++i)
          t3.append$1(t1, iterable.$index(iterable, 0));
      }
      return;
    }
    for (t1 = $.get$iterator$ax(iterable), t2 = this._this, t3 = $.getInterceptor$x(t2); t1.moveNext$0() === true;)
      t3.append$1(t2, t1.get$current());
  },
  addAll$1$bailout: function(state0, iterable, len, t1) {
    switch (state0) {
      case 0:
      case 1:
        var t3, i, t2;
        if (state0 === 1 || state0 === 0 && typeof iterable === "object" && iterable !== null && !!iterable.$is_ChildNodeListLazy)
          switch (state0) {
            case 0:
              t1 = this._this;
            case 1:
              if (state0 === 1 || state0 === 0 && iterable._this !== t1)
                switch (state0) {
                  case 0:
                    len = iterable.get$length(iterable);
                  case 1:
                    state0 = 0;
                    t3 = $.getInterceptor$x(t1);
                    i = 0;
                    for (; $.JSNumber_methods.$lt(i, len); ++i)
                      t3.append$1(t1, iterable.$index(iterable, 0));
                }
              return;
          }
        for (t1 = $.get$iterator$ax(iterable), t2 = this._this, t3 = $.getInterceptor$x(t2); t1.moveNext$0() === true;)
          t3.append$1(t2, t1.get$current());
    }
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      $.$$dom_removeChild$1$x(this._this, result);
    return result;
  },
  remove$1: function(_, object) {
    var t1;
    if (!(typeof object === "object" && object !== null && object.$isNode()))
      return;
    t1 = this._this;
    if (t1 !== $.get$parentNode$x(object))
      return;
    $.$$dom_removeChild$1$x(t1, object);
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  clear$0: function(_) {
    $.set$text$x(this._this, "");
  },
  $indexSet: function(_, index, value) {
    var t1, t2, t3;
    t1 = this._this;
    t2 = $.getInterceptor$x(t1);
    t3 = t2.get$$$dom_childNodes(t1);
    if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !t3.$isJavaScriptIndexingBehavior()))
      return this.$$indexSet$bailout(1, t2, t1, value, index, t3);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t3.length)
      throw $.ioore(index);
    t2.$$dom_replaceChild$2(t1, value, t3[index]);
  },
  $$indexSet$bailout: function(state0, t2, t1, value, index, t3) {
    t2.$$dom_replaceChild$2(t1, value, $.$index$asx(t3, index));
  },
  get$iterator: function(_) {
    return $.get$iterator$ax($.get$$$dom_childNodes$x(this._this));
  },
  contains$1: function(_, element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f);
  },
  where$1: function(_, f) {
    return $.WhereIterable$(this, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return $.$eq(this.get$length(this), 0);
  },
  elementAt$1: function(_, index) {
    return $.$index$asx($.get$$$dom_childNodes$x(this._this), index);
  },
  sublist$2: function(_, start, end) {
    if (end == null)
      $.$eq(end, this.get$length(this));
    return $.Lists_getRange(this, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  get$length: function(_) {
    return $.get$length$asx($.get$$$dom_childNodes$x(this._this));
  },
  $index: function(_, index) {
    var t1 = $.get$$$dom_childNodes$x(this._this);
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, index, t1) {
    return $.$index$asx(t1, index);
  },
  $is_ChildNodeListLazy: true,
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [null]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [null]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [null]; };
  }
};

$$.Storage_keys_anon = {"": "Closure;keys_0",
  call$2: function(k, v) {
    return this.keys_0.push(k);
  },
  $isFunction: true
};

$$.Storage_values_anon = {"": "Closure;values_0",
  call$2: function(k, v) {
    return this.values_0.push(v);
  },
  $isFunction: true
};

$$._AttributeMap = {"": "Object;",
  putIfAbsent$2: function(_, key, ifAbsent) {
    if (this.containsKey$1(this, key) !== true)
      this.$indexSet(this, key, ifAbsent.call$0());
    return this.$index(this, key);
  },
  clear$0: function(_) {
    var t1;
    for (t1 = $.JSArray_methods.get$iterator(this.get$keys(this)); t1.moveNext$0();)
      this.remove$1(this, t1.get$current());
  },
  forEach$1: function(_, f) {
    var t1, t2;
    for (t1 = $.JSArray_methods.get$iterator(this.get$keys(this)); t1.moveNext$0();) {
      t2 = t1.get$current();
      f.call$2(t2, this.$index(this, t2));
    }
  },
  get$keys: function(_) {
    var attributes, keys, len, i;
    attributes = $.get$$$dom_attributes$x(this._liblib$_element);
    if (typeof attributes !== "string" && (typeof attributes !== "object" || attributes === null || attributes.constructor !== Array && !attributes.$isJavaScriptIndexingBehavior()))
      return this.get$keys$bailout(1, attributes);
    keys = $.List_List($);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      if (this._matches$1(attributes[i]) === true) {
        if (i >= attributes.length)
          throw $.ioore(i);
        keys.push($.get$$$dom_localName$x(attributes[i]));
      }
    }
    return keys;
  },
  get$keys$bailout: function(state0, attributes) {
    var keys, t1, len, i;
    keys = $.List_List($);
    for (t1 = $.getInterceptor$asx(attributes), len = t1.get$length(attributes), i = 0; $.JSNumber_methods.$lt(i, len); ++i)
      if (this._matches$1(t1.$index(attributes, i)) === true)
        keys.push($.get$$$dom_localName$x(t1.$index(attributes, i)));
    return keys;
  },
  get$values: function(_) {
    var attributes, values, len, i;
    attributes = $.get$$$dom_attributes$x(this._liblib$_element);
    if (typeof attributes !== "string" && (typeof attributes !== "object" || attributes === null || attributes.constructor !== Array && !attributes.$isJavaScriptIndexingBehavior()))
      return this.get$values$bailout(1, attributes);
    values = $.List_List($);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      if (this._matches$1(attributes[i]) === true) {
        if (i >= attributes.length)
          throw $.ioore(i);
        values.push($.get$value$x(attributes[i]));
      }
    }
    return values;
  },
  get$values$bailout: function(state0, attributes) {
    var values, t1, len, i;
    values = $.List_List($);
    for (t1 = $.getInterceptor$asx(attributes), len = t1.get$length(attributes), i = 0; $.JSNumber_methods.$lt(i, len); ++i)
      if (this._matches$1(t1.$index(attributes, i)) === true)
        values.push($.get$value$x(t1.$index(attributes, i)));
    return values;
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  $isMap: function() {
    return true;
  },
  $asMap: function() {
    return function () { return [$.String, $.String]; };
  }
};

$$._ElementAttributeMap = {"": "_AttributeMap;_liblib$_element",
  containsKey$1: function(_, key) {
    return $.$$dom_hasAttribute$1$x(this._liblib$_element, key);
  },
  $index: function(_, key) {
    return $.$$dom_getAttribute$1$x(this._liblib$_element, key);
  },
  $indexSet: function(_, key, value) {
    $.$$dom_setAttribute$2$x(this._liblib$_element, key, $.S(value));
  },
  remove$1: function(_, key) {
    var t1, t2, value;
    t1 = this._liblib$_element;
    t2 = $.getInterceptor$x(t1);
    value = t2.$$dom_getAttribute$1(t1, key);
    t2.$$dom_removeAttribute$1(t1, key);
    return value;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  get$length: function(_) {
    return this.get$keys(this).length;
  },
  _matches$1: function(node) {
    return $.get$$$dom_namespaceUri$x(node) == null;
  }
};

$$._DataAttributeMap = {"": "Object;$$dom_attributes>",
  containsKey$1: function(_, key) {
    var t1 = this.$$dom_attributes;
    return t1.containsKey$1(t1, "data-" + $.S(key));
  },
  $index: function(_, key) {
    var t1 = this.$$dom_attributes;
    return t1.$index(t1, "data-" + $.S(key));
  },
  $indexSet: function(_, key, value) {
    var t1 = this.$$dom_attributes;
    t1.$indexSet(t1, "data-" + $.S(key), $.S(value));
  },
  putIfAbsent$2: function(_, key, ifAbsent) {
    var t1 = this.$$dom_attributes;
    return t1.putIfAbsent$2(t1, "data-" + $.S(key), ifAbsent);
  },
  remove$1: function(_, key) {
    var t1 = this.$$dom_attributes;
    return t1.remove$1(t1, "data-" + $.S(key));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  clear$0: function(_) {
    var t1, t2;
    for (t1 = $.JSArray_methods.get$iterator(this.get$keys(this)), t2 = this.$$dom_attributes; t1.moveNext$0();)
      t2.remove$1(t2, "data-" + $.S(t1.get$current()));
  },
  forEach$1: function(_, f) {
    var t1 = this.$$dom_attributes;
    t1.forEach$1(t1, new $._DataAttributeMap_forEach_anon(this, f));
  },
  get$keys: function(_) {
    var keys, t1;
    keys = $.List_List($);
    t1 = this.$$dom_attributes;
    t1.forEach$1(t1, new $._DataAttributeMap_keys_anon(this, keys));
    return keys;
  },
  get$values: function(_) {
    var values, t1;
    values = $.List_List($);
    t1 = this.$$dom_attributes;
    t1.forEach$1(t1, new $._DataAttributeMap_values_anon(this, values));
    return values;
  },
  get$length: function(_) {
    return this.get$keys(this).length;
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  $isMap: function() {
    return true;
  },
  $asMap: function() {
    return function () { return [$.String, $.String]; };
  }
};

$$._DataAttributeMap_forEach_anon = {"": "Closure;this_0,f_1",
  call$2: function(key, value) {
    var t1 = $.getInterceptor$s(key);
    if (t1.startsWith$1(key, "data-"))
      this.f_1.call$2(t1.substring$1(key, 5), value);
  },
  $isFunction: true
};

$$._DataAttributeMap_keys_anon = {"": "Closure;this_0,keys_1",
  call$2: function(key, value) {
    var t1 = $.getInterceptor$s(key);
    if (t1.startsWith$1(key, "data-"))
      this.keys_1.push(t1.substring$1(key, 5));
  },
  $isFunction: true
};

$$._DataAttributeMap_values_anon = {"": "Closure;this_0,values_1",
  call$2: function(key, value) {
    if ($.startsWith$1$s(key, "data-"))
      this.values_1.push(value);
  },
  $isFunction: true
};

$$.CssClassSet = {"": "Object;",
  toString$0: function(_) {
    var t1 = this.readClasses$0();
    return t1.join$1(t1, " ");
  },
  get$iterator: function(_) {
    var t1 = this.readClasses$0();
    return t1.get$iterator(t1);
  },
  forEach$1: function(_, f) {
    var t1 = this.readClasses$0();
    t1.forEach$1(t1, f);
  },
  map$1: function(_, f) {
    var t1 = this.readClasses$0();
    return t1.map$1(t1, f);
  },
  where$1: function(_, f) {
    var t1 = this.readClasses$0();
    return t1.where$1(t1, f);
  },
  get$isEmpty: function(_) {
    var t1 = this.readClasses$0();
    return t1.get$isEmpty(t1);
  },
  get$length: function(_) {
    var t1 = this.readClasses$0();
    return t1.get$length(t1);
  },
  contains$1: function(_, value) {
    var t1 = this.readClasses$0();
    return t1.contains$1(t1, value);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  add$1: function(_, value) {
    var t1, s;
    t1 = new $.CssClassSet_add_anon(value);
    s = this.readClasses$0();
    t1.call$1(s);
    this.writeClasses$1(s);
  },
  remove$1: function(_, value) {
    var s, result;
    if (!(typeof value === "string"))
      return false;
    s = this.readClasses$0();
    result = s.remove$1(s, value);
    this.writeClasses$1(s);
    return result;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  addAll$1: function(_, iterable) {
    var t1, s;
    t1 = new $.CssClassSet_addAll_anon(iterable);
    s = this.readClasses$0();
    t1.call$1(s);
    this.writeClasses$1(s);
  },
  toList$1$growable: function(_, growable) {
    var t1 = this.readClasses$0();
    return t1.toList$1$growable(t1, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  elementAt$1: function(_, index) {
    var t1 = this.readClasses$0();
    return t1.elementAt$1(t1, index);
  },
  clear$0: function(_) {
    var t1, s;
    t1 = new $.CssClassSet_clear_anon();
    s = this.readClasses$0();
    t1.call$1(s);
    this.writeClasses$1(s);
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.String]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.String]; };
  }
};

$$.CssClassSet_add_anon = {"": "Closure;value_0",
  call$1: function(s) {
    return $.add$1$ax(s, this.value_0);
  },
  $isFunction: true
};

$$.CssClassSet_addAll_anon = {"": "Closure;iterable_0",
  call$1: function(s) {
    return $.addAll$1$ax(s, this.iterable_0);
  },
  $isFunction: true
};

$$.CssClassSet_clear_anon = {"": "Closure;",
  call$1: function(s) {
    return $.clear$0$ax(s);
  },
  $isFunction: true
};

$$._EventStream = {"": "Stream;_target,_eventType,_useCapture",
  listen$4$onDone$onError$unsubscribeOnError: function(onData, onDone, onError, unsubscribeOnError) {
    return $._EventStreamSubscription$(this._target, this._eventType, onData, this._useCapture);
  },
  listen$1: function(onData) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, onDone, onError, null);
  }
};

$$._EventStreamSubscription = {"": "StreamSubscription;_pauseCount,_target,_eventType,_liblib$_onData,_useCapture",
  cancel$0: function(_) {
    var t1;
    if (this.get$_canceled() === true)
      throw $.$$throw($.StateError$("Subscription has been canceled."));
    t1 = this._liblib$_onData;
    if (t1 != null)
      $.$$dom_removeEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
    this._target = null;
    this._liblib$_onData = null;
  },
  get$_canceled: function() {
    return this._target == null;
  },
  onError$1: function(_, handleError) {
  },
  get$onError: function(receiver) {
    return new $.BoundClosure$i1(this, "onError$1", receiver);
  },
  get$_paused: function() {
    return this._pauseCount > 0;
  },
  _tryResume$0: function() {
    if (this._liblib$_onData != null && !this.get$_paused())
      $.$$dom_addEventListener$3$x(this._target, this._eventType, this._liblib$_onData, this._useCapture);
  },
  _EventStreamSubscription$4: function(_target, _eventType, _onData, _useCapture) {
    this._tryResume$0();
  }
};

$$.EventStreamProvider = {"": "Object;_eventType",
  forTarget$2$useCapture: function(e, useCapture) {
    return $._EventStream$(e, this._eventType, useCapture);
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  }
};

$$.Rect = {"": "Object;left>,top>,width>,height>",
  get$right: function(_) {
    var t1, t3;
    t1 = this.left;
    if (typeof t1 !== "number")
      return this.get$right$bailout(1, t1);
    t3 = this.width;
    if (typeof t3 !== "number")
      return this.get$right$bailout(2, t1, t3);
    return t1 + t3;
  },
  get$right$bailout: function(state0, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.left;
      case 1:
        state0 = 0;
        t3 = this.width;
      case 2:
        state0 = 0;
        return $.$add$ns(t1, t3);
    }
  },
  toString$0: function(_) {
    return "(" + $.S(this.left) + ", " + $.S(this.top) + ", " + $.S(this.width) + ", " + $.S(this.height) + ")";
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && other.$isRect()))
      return false;
    t1 = $.getInterceptor$x(other);
    return $.$eq(this.left, t1.get$left(other)) === true && $.$eq(this.top, t1.get$top(other)) === true && $.$eq(this.width, t1.get$width(other)) === true && $.$eq(this.height, t1.get$height(other)) === true;
  },
  round$0: function(_) {
    return $.Rect$($.round$0$nx(this.left), $.round$0$nx(this.top), $.round$0$nx(this.width), $.round$0$nx(this.height));
  },
  $isRect: function() {
    return true;
  },
  $asRect: function() {
    return null;
  }
};

$$._WrappedList = {"": "Object;_list",
  get$iterator: function(_) {
    return $._WrappedIterator$($.get$iterator$ax(this._list));
  },
  map$1: function(_, f) {
    return $.map$1$ax(this._list, f);
  },
  where$1: function(_, f) {
    return $.where$1$ax(this._list, f);
  },
  contains$1: function(_, element) {
    return $.contains$1$asx(this._list, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(_, f) {
    $.forEach$1$ax(this._list, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this._list, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    return $.get$length$asx(this._list);
  },
  get$isEmpty: function(_) {
    return $.get$isEmpty$asx(this._list);
  },
  elementAt$1: function(_, index) {
    return $.elementAt$1$ax(this._list, index);
  },
  add$1: function(_, element) {
    $.add$1$ax(this._list, element);
  },
  addAll$1: function(_, elements) {
    $.addAll$1$ax(this._list, elements);
  },
  remove$1: function(_, element) {
    $.remove$1$ax(this._list, element);
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  clear$0: function(_) {
    $.clear$0$ax(this._list);
  },
  $index: function(_, index) {
    var t1 = this._list;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, index, t1) {
    return $.$index$asx(t1, index);
  },
  $indexSet: function(_, index, value) {
    var t1 = this._list;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this.$$indexSet$bailout(1, index, value, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    t1[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, t1) {
    $.$indexSet$ax(t1, index, value);
  },
  removeLast$0: function(_) {
    return $.removeLast$0$ax(this._list);
  },
  sublist$2: function(_, start, end) {
    return $.sublist$2$ax(this._list, start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return null;
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return null;
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return null;
  }
};

$$._WrappedIterator = {"": "Object;_liblib$_iterator",
  moveNext$0: function() {
    return this._liblib$_iterator.moveNext$0();
  },
  get$current: function() {
    return this._liblib$_iterator.get$current();
  }
};

$$._DOMWindowCrossFrame = {"": "Object;_window",
  get$parent: function(_) {
    return $._DOMWindowCrossFrame__createSafe(this._window.parent);
  }
};

$$.FixedSizeListIterator = {"": "Object;_array,_liblib$_length,_position,_liblib$_current",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._position;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    nextPosition = t1 + 1;
    t1 = this._liblib$_length;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(2, t1, nextPosition);
    if (nextPosition < t1) {
      this._liblib$_current = $.$index$asx(this._array, nextPosition);
      this._position = nextPosition;
      return true;
    }
    this._liblib$_current = null;
    this._position = t1;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, nextPosition) {
    switch (state0) {
      case 0:
        t1 = this._position;
      case 1:
        state0 = 0;
        nextPosition = $.$add$ns(t1, 1);
        t1 = this._liblib$_length;
      case 2:
        state0 = 0;
        if ($.$lt$n(nextPosition, t1) === true) {
          this._liblib$_current = $.$index$asx(this._array, nextPosition);
          this._position = nextPosition;
          return true;
        }
        this._liblib$_current = null;
        this._position = t1;
        return false;
    }
  },
  get$current: function() {
    return this._liblib$_current;
  }
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"": "Closure;values_1,copies_2",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_1;
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t1.push(value);
    this.copies_2.push(null);
    return $length;
  },
  $isFunction: true
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"": "Closure;copies_3",
  call$1: function(i) {
    var t1 = this.copies_3;
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  },
  $isFunction: true
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"": "Closure;copies_4",
  call$2: function(i, x) {
    var t1 = this.copies_4;
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    t1[i] = x;
  },
  $isFunction: true
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {"": "Closure;",
  call$0: function() {
  },
  $isFunction: true
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"": "Closure;findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var t1, slot, t2, $length, copy, t3, i, element, elementCopy, copy0, j, t4;
    t1 = {};
    if (e == null)
      return e;
    if (typeof e === "boolean")
      return e;
    if (typeof e === "number")
      return e;
    if (typeof e === "string")
      return e;
    if (typeof e === "object" && e !== null && !!e.$isDateTime)
      throw $.$$throw($.UnimplementedError$("structured clone of DateTime"));
    if (typeof e === "object" && e !== null && !!e.$isRegExp)
      throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
    if (typeof e === "object" && e !== null && e.$isFile())
      return e;
    if (typeof e === "object" && e !== null && e.$isBlob())
      return e;
    if (typeof e === "object" && e !== null && e.$isFileList())
      return e;
    if (typeof e === "object" && e !== null && e.$isImageData())
      return e;
    if (typeof e === "object" && e !== null && e.$isArrayBuffer())
      return e;
    if (typeof e === "object" && e !== null && e.$isArrayBufferView())
      return e;
    if (typeof e === "object" && e !== null && e.$isMap()) {
      slot = this.findSlot_5.call$1(e);
      t1.copy_0 = this.readSlot_6.call$1(slot);
      t2 = t1.copy_0;
      if (t2 != null)
        return t2;
      t1.copy_0 = {};
      this.writeSlot_7.call$2(slot, t1.copy_0);
      $.forEach$1$ax(e, new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
      return t1.copy_0;
    }
    if (typeof e === "object" && e !== null && (e.constructor === Array || e.$isList())) {
      if (typeof e !== "object" || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.$isJavaScriptIndexingBehavior())
        return this.call$1$bailout(1, e);
      $length = e.length;
      slot = this.findSlot_5.call$1(e);
      t2 = this.readSlot_6;
      copy = t2.call$1(slot);
      if (copy != null) {
        if (true === copy) {
          copy = new Array($length);
          this.writeSlot_7.call$2(slot, copy);
        }
        return copy;
      }
      t1 = e instanceof Array && !!!(e.immutable$list);
      t3 = this.writeSlot_7;
      if (t1) {
        t3.call$2(slot, true);
        for (i = 0; i < $length; ++i) {
          if (i >= e.length)
            throw $.ioore(i);
          element = e[i];
          elementCopy = this.call$1(element);
          if (elementCopy == null ? element != null : elementCopy !== element) {
            copy0 = t2.call$1(slot);
            if (true === copy0) {
              copy0 = new Array($length);
              t3.call$2(slot, copy0);
            }
            if (typeof copy0 !== "object" || copy0 === null || (copy0.constructor !== Array || !!copy0.immutable$list) && !copy0.$isJavaScriptIndexingBehavior())
              return this.call$1$bailout(2, e, t3, elementCopy, $.JSArray_methods, copy0, $length, slot, t2, copy, i);
            for (t1 = e.length, t2 = copy0.length, j = 0; j < i; ++j) {
              if (j >= t1)
                throw $.ioore(j);
              t4 = e[j];
              if (j >= t2)
                throw $.ioore(j);
              copy0[j] = t4;
            }
            if (i >= t2)
              throw $.ioore(i);
            copy0[i] = elementCopy;
            ++i;
            copy = copy0;
            break;
          }
        }
        if (copy == null) {
          t3.call$2(slot, e);
          copy = e;
        }
      } else {
        copy = new Array($length);
        t3.call$2(slot, copy);
        i = 0;
      }
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.$isJavaScriptIndexingBehavior())
        return this.call$1$bailout(3, e, 0, 0, $.JSArray_methods, 0, $length, 0, 0, copy, i);
      for (; i < $length; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    throw $.$$throw($.UnimplementedError$("structured clone of other type"));
  },
  call$1$bailout: function(state0, e, t4, elementCopy, t2, copy0, $length, slot, t3, copy, i) {
    switch (state0) {
      case 0:
        t1 = {};
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (typeof e === "object" && e !== null && !!e.$isDateTime)
          throw $.$$throw($.UnimplementedError$("structured clone of DateTime"));
        if (typeof e === "object" && e !== null && !!e.$isRegExp)
          throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
        if (typeof e === "object" && e !== null && e.$isFile())
          return e;
        if (typeof e === "object" && e !== null && e.$isBlob())
          return e;
        if (typeof e === "object" && e !== null && e.$isFileList())
          return e;
        if (typeof e === "object" && e !== null && e.$isImageData())
          return e;
        if (typeof e === "object" && e !== null && e.$isArrayBuffer())
          return e;
        if (typeof e === "object" && e !== null && e.$isArrayBufferView())
          return e;
        if (typeof e === "object" && e !== null && e.$isMap()) {
          slot = this.findSlot_5.call$1(e);
          t1.copy_0 = this.readSlot_6.call$1(slot);
          t2 = t1.copy_0;
          if (t2 != null)
            return t2;
          t1.copy_0 = {};
          this.writeSlot_7.call$2(slot, t1.copy_0);
          $.forEach$1$ax(e, new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
          return t1.copy_0;
        }
      default:
        var t1, element, j;
        if (state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof e === "object" && e !== null && (e.constructor === Array || e.$isList()))
          switch (state0) {
            case 0:
            case 1:
              state0 = 0;
              t2 = $.getInterceptor$asx(e);
              $length = t2.get$length(e);
              slot = this.findSlot_5.call$1(e);
              t3 = this.readSlot_6;
              copy = t3.call$1(slot);
              if (copy != null) {
                if (true === copy) {
                  copy = new Array($length);
                  this.writeSlot_7.call$2(slot, copy);
                }
                return copy;
              }
              t1 = e instanceof Array && !!!(e.immutable$list);
              t4 = this.writeSlot_7;
            case 2:
              if (state0 === 2 || state0 === 0 && t1)
                switch (state0) {
                  case 0:
                    t4.call$2(slot, true);
                    i = 0;
                  case 2:
                    L0:
                      while (true)
                        switch (state0) {
                          case 0:
                            if (!$.JSNumber_methods.$lt(i, $length))
                              break L0;
                            element = t2.$index(e, i);
                            elementCopy = this.call$1(element);
                          case 2:
                            if (state0 === 2 || state0 === 0 && (elementCopy == null ? element != null : elementCopy !== element))
                              switch (state0) {
                                case 0:
                                  copy0 = t3.call$1(slot);
                                  if (true === copy0) {
                                    copy0 = new Array($length);
                                    t4.call$2(slot, copy0);
                                  }
                                case 2:
                                  state0 = 0;
                                  for (t1 = $.getInterceptor$ax(copy0), j = 0; j < i; ++j)
                                    t1.$indexSet(copy0, j, t2.$index(e, j));
                                  t1.$indexSet(copy0, i, elementCopy);
                                  ++i;
                                  copy = copy0;
                                  break L0;
                              }
                            ++i;
                        }
                    if (copy == null) {
                      t4.call$2(slot, e);
                      copy = e;
                    }
                }
              else {
                copy = new Array($length);
                t4.call$2(slot, copy);
                i = 0;
              }
            case 3:
              state0 = 0;
              for (t1 = $.getInterceptor$ax(copy); $.JSNumber_methods.$lt(i, $length); ++i)
                t1.$indexSet(copy, i, this.call$1(t2.$index(e, i)));
              return copy;
          }
        throw $.$$throw($.UnimplementedError$("structured clone of other type"));
    }
  },
  $isFunction: true
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {"": "Closure;box_0,walk_8",
  call$2: function(key, value) {
    this.box_0.copy_0[key] = this.walk_8.call$1(value);
  },
  $isFunction: true
};

$$.convertNativeToDart_AcceptStructuredClone_findSlot = {"": "Closure;values_0,copies_1",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_0;
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t1.push(value);
    this.copies_1.push(null);
    return $length;
  },
  $isFunction: true
};

$$.convertNativeToDart_AcceptStructuredClone_readSlot = {"": "Closure;copies_2",
  call$1: function(i) {
    var t1 = this.copies_2;
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  },
  $isFunction: true
};

$$.convertNativeToDart_AcceptStructuredClone_writeSlot = {"": "Closure;copies_3",
  call$2: function(i, x) {
    var t1 = this.copies_3;
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    t1[i] = x;
  },
  $isFunction: true
};

$$.convertNativeToDart_AcceptStructuredClone_walk = {"": "Closure;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var slot, copy, t1, t2, $length, i;
    if (typeof e !== "object" || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.$isJavaScriptIndexingBehavior())
      return this.call$1$bailout(1, e);
    if (e instanceof Date)
      throw $.$$throw($.UnimplementedError$("structured clone of DateTime"));
    if (e instanceof RegExp)
      throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
    if (Object.getPrototypeOf(e) === Object.prototype) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      copy = $.makeLiteralMap([]);
      this.writeSlot_7.call$2(slot, copy);
      for (t1 = $.JSArray_methods.get$iterator(Object.keys(e)); t1.moveNext$0();) {
        t2 = t1.get$current();
        copy.$indexSet(copy, t2, this.call$1(e[t2]));
      }
      return copy;
    }
    if (e instanceof Array) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      $length = e.length;
      if (this.mustCopy_4 === true)
        copy = new Array($length);
      else
        copy = e;
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.$isJavaScriptIndexingBehavior())
        return this.call$1$bailout(2, e, $length, copy, $.JSArray_methods, slot);
      this.writeSlot_7.call$2(slot, copy);
      for (i = 0; i < $length; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    return e;
  },
  call$1$bailout: function(state0, e, $length, copy, t1, slot) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor(e);
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (e instanceof Date)
          throw $.$$throw($.UnimplementedError$("structured clone of DateTime"));
        if (e instanceof RegExp)
          throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
        if (Object.getPrototypeOf(e) === Object.prototype) {
          slot = this.findSlot_5.call$1(e);
          copy = this.readSlot_6.call$1(slot);
          if (copy != null)
            return copy;
          copy = $.makeLiteralMap([]);
          this.writeSlot_7.call$2(slot, copy);
          for (t1 = $.JSArray_methods.get$iterator(Object.keys(e)); t1.moveNext$0();) {
            t2 = t1.get$current();
            copy.$indexSet(copy, t2, this.call$1(e[t2]));
          }
          return copy;
        }
      case 2:
        var t2, i;
        if (state0 === 2 || state0 === 0 && e instanceof Array)
          switch (state0) {
            case 0:
              slot = this.findSlot_5.call$1(e);
              copy = this.readSlot_6.call$1(slot);
              if (copy != null)
                return copy;
              $length = t1.get$length(e);
              copy = this.mustCopy_4 === true ? new Array($length) : e;
            case 2:
              state0 = 0;
              this.writeSlot_7.call$2(slot, copy);
              for (t2 = $.getInterceptor$ax(copy), i = 0; $.JSNumber_methods.$lt(i, $length); ++i)
                t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
              return copy;
          }
        return e;
    }
  },
  $isFunction: true
};

$$.FilteredElementList = {"": "Object;_node,_childNodes",
  get$_filtered: function() {
    var t1 = this._childNodes;
    return $.List_List$from(t1.where$1(t1, new $.FilteredElementList__filtered_anon()), true);
  },
  forEach$1: function(_, f) {
    $.JSArray_methods.forEach$1(this.get$_filtered(), f);
  },
  $indexSet: function(_, index, value) {
    var t1 = this.get$_filtered();
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    $.replaceWith$1$x(t1[index], value);
  },
  add$1: function(_, value) {
    var t1 = this._childNodes;
    t1.add$1(t1, value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    for (t1 = $.get$iterator$ax(iterable), t2 = this._childNodes; t1.moveNext$0() === true;)
      t2.add$1(t2, t1.get$current());
  },
  contains$1: function(_, element) {
    var t1;
    if (typeof element === "object" && element !== null && element.$isElement()) {
      t1 = this._childNodes;
      t1 = t1.contains$1(t1, element);
    } else
      t1 = false;
    return t1;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  clear$0: function(_) {
    var t1 = this._childNodes;
    t1.clear$0(t1);
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      $.remove$0$ax(result);
    return result;
  },
  map$1: function(_, f) {
    return $.JSArray_methods.map$1(this.get$_filtered(), f);
  },
  where$1: function(_, f) {
    return $.JSArray_methods.where$1(this.get$_filtered(), f);
  },
  remove$1: function(_, element) {
    var i, t1, indexElement;
    if (!(typeof element === "object" && element !== null && element.$isElement()))
      return;
    i = 0;
    while (true) {
      t1 = this.get$length(this);
      if (typeof t1 !== "number")
        return this.remove$1$bailout(1, i, element, t1);
      if (!(i < t1))
        break;
      t1 = this.get$_filtered();
      if (i >= t1.length)
        throw $.ioore(i);
      indexElement = t1[i];
      if (indexElement === element) {
        $.remove$0$ax(indexElement);
        return;
      }
      ++i;
    }
  },
  remove$1$bailout: function(state0, i, element, t1) {
    switch (state0) {
      case 0:
        if (!(typeof element === "object" && element !== null && element.$isElement()))
          return;
        i = 0;
      case 1:
        var indexElement;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t1 = this.get$length(this);
              case 1:
                state0 = 0;
                if (!$.JSNumber_methods.$lt(i, t1))
                  break L0;
                t1 = this.get$_filtered();
                if (i >= t1.length)
                  throw $.ioore(i);
                indexElement = t1[i];
                if (indexElement === element) {
                  $.remove$0$ax(indexElement);
                  return;
                }
                ++i;
            }
    }
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  elementAt$1: function(_, index) {
    var t1 = this.get$_filtered();
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$isEmpty: function(_) {
    return $.JSArray_methods.get$isEmpty(this.get$_filtered());
  },
  get$length: function(_) {
    return this.get$_filtered().length;
  },
  $index: function(_, index) {
    var t1 = this.get$_filtered();
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$iterator: function(_) {
    return $.JSArray_methods.get$iterator(this.get$_filtered());
  },
  sublist$2: function(_, start, end) {
    return $.JSArray_methods.sublist$2(this.get$_filtered(), start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  get$last: function(_) {
    return $.JSArray_methods.get$last(this.get$_filtered());
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [null]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [null]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [null]; };
  }
};

$$.FilteredElementList__filtered_anon = {"": "Closure;",
  call$1: function(n) {
    return typeof n === "object" && n !== null && n.$isElement();
  },
  $isFunction: true
};

$$._completeRequest_anon = {"": "Closure;request_0,completer_1",
  call$1: function(e) {
    var t1 = this.completer_1;
    t1.complete$1(t1, $.get$result$x(this.request_0));
  },
  $isFunction: true
};

$$._completeRequest_anon0 = {"": "Closure;completer_2",
  call$1: function(e) {
    this.completer_2.completeError$1(e);
  },
  $isFunction: true
};

$$._AttributeClassSet = {"": "CssClassSet;_liblib3$_element",
  readClasses$0: function() {
    var t1, classname, s, trimmed;
    t1 = $.get$attributes$x(this._liblib3$_element);
    classname = t1.$index(t1, "class");
    s = $.LinkedHashSet$();
    if (classname == null)
      return s;
    for (t1 = $.JSArray_methods.get$iterator($.split$1$s(classname, " ")); t1.moveNext$0();) {
      trimmed = $.trim$0$s(t1.get$current());
      if (!$.JSString_methods.get$isEmpty(trimmed))
        s.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    var t1 = $.get$attributes$x(this._liblib3$_element);
    t1.$indexSet(t1, "class", s.join$1(s, " "));
  }
};

$$.Uri = {"": "Object;scheme,userInfo,domain,port,path,query,fragment",
  query$1: function($receiver, arg0) {
    return this.query.call$1(arg0);
  },
  get$hasAuthority: function() {
    return $.$eq(this.userInfo, "") !== true || $.$eq(this.domain, "") !== true || $.$eq(this.port, 0) !== true;
  },
  toString$0: function(_) {
    var sb, t1;
    sb = $.StringBuffer$("");
    t1 = this.scheme;
    $.Uri__addIfNonEmpty(sb, t1, t1, ":");
    if (this.get$hasAuthority() || $.$eq(t1, "file") === true) {
      sb.write$1(sb, "//");
      t1 = this.userInfo;
      $.Uri__addIfNonEmpty(sb, t1, t1, "@");
      t1 = this.domain;
      sb.write$1(sb, t1 == null ? "null" : t1);
      t1 = this.port;
      if ($.$eq(t1, 0) !== true) {
        sb.write$1(sb, ":");
        sb.write$1(sb, $.toString$0(t1));
      }
    }
    t1 = this.path;
    sb.write$1(sb, t1 == null ? "null" : t1);
    t1 = this.query;
    $.Uri__addIfNonEmpty(sb, t1, "?", t1);
    t1 = this.fragment;
    $.Uri__addIfNonEmpty(sb, t1, "#", t1);
    return sb.toString$0(sb);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && !!other.$isUri))
      return false;
    return $.$eq(this.scheme, other.scheme) === true && $.$eq(this.userInfo, other.userInfo) === true && $.$eq(this.domain, other.domain) === true && $.$eq(this.port, other.port) === true && $.$eq(this.path, other.path) === true && $.$eq(this.query, other.query) === true && $.$eq(this.fragment, other.fragment) === true;
  },
  get$hashCode: function(_) {
    var t1 = new $.Uri_hashCode_combine();
    return t1.call$2(this.scheme, t1.call$2(this.userInfo, t1.call$2(this.domain, t1.call$2(this.port, t1.call$2(this.path, t1.call$2(this.query, t1.call$2(this.fragment, 1)))))));
  },
  $isUri: true
};

$$.Uri_hashCode_combine = {"": "Closure;",
  call$2: function(part, current) {
    return $.$and$n($.$add$ns($.$mul$n(current, 31), $.get$hashCode$(part)), 1073741823);
  },
  $isFunction: true
};

$$.DetailedArgumentError = {"": "Object;argument,details",
  get$message: function(_) {
    return "Illegal argument: \"" + this.argument + "\" -- " + this.details;
  },
  toString$0: function(_) {
    return this.get$message(this);
  },
  DetailedArgumentError$2: function(argument, details) {
    if (this.argument.length === 0)
      throw $.$$throw($.InvalidOperationError$("That's just sad. Give me a valid argument"));
    if (this.details.length === 0)
      throw $.$$throw($.InvalidOperationError$("That's just sad. I need details!"));
  }
};

$$.InvalidOperationError = {"": "Object;message", $isException: true};

$$.Size = {"": "Object;width>,height>",
  $eq: function(_, other) {
    var t1, t2;
    t1 = other == null;
    if (t1)
      return false;
    t2 = $.getInterceptor(other);
    return !t1 && $.$eq(this.width, t2.get$width(other)) === true && $.$eq(this.height, t2.get$height(other)) === true;
  },
  get$area: function() {
    return $.$mul$n(this.width, this.height);
  },
  isEmpty$0: function(_) {
    return $.$eq(this.get$area(), 0);
  },
  get$isEmpty: function(receiver) {
    return new $.BoundClosure$i0(this, "isEmpty$0", receiver);
  },
  $mul: function(_, magnitude) {
    var t1, t3;
    if (typeof magnitude !== "number")
      return this.$$mul$bailout(1, magnitude);
    t1 = this.width;
    if (typeof t1 !== "number")
      return this.$$mul$bailout(2, magnitude, t1);
    t1 *= magnitude;
    t3 = this.height;
    if (typeof t3 !== "number")
      return this.$$mul$bailout(3, magnitude, t1, t3);
    return $.Size$(t1, t3 * magnitude);
  },
  $$mul$bailout: function(state0, magnitude, t1, t3) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.width;
      case 2:
        state0 = 0;
        t1 = $.$mul$n(t1, magnitude);
        t3 = this.height;
      case 3:
        state0 = 0;
        return $.Size$(t1, $.$mul$n(t3, magnitude));
    }
  },
  toString$0: function(_) {
    return "(" + $.S(this.width) + " x " + $.S(this.height) + ")";
  }
};

$$.DateFormat = {"": "Object;_locale,_liblib10$_pattern,_formatFieldsPrivate",
  format$1: function(_, date) {
    var result = $.StringBuffer$("");
    $.forEach$1$ax(this.get$_formatFields(), new $.DateFormat_format_anon(date, result));
    return result.toString$0(result);
  },
  get$locale: function(_) {
    return this._locale;
  },
  get$_formatFields: function() {
    if (this._formatFieldsPrivate == null) {
      if (this._liblib10$_pattern == null)
        this._useDefaultPattern$0();
      this._formatFieldsPrivate = this.parsePattern$1(this._liblib10$_pattern);
    }
    return this._formatFieldsPrivate;
  },
  _useDefaultPattern$0: function() {
    this.addPattern$1("yMMMMd");
    this.addPattern$1("jms");
  },
  _appendPattern$2: function(inputPattern, separator) {
    var t1 = this._liblib10$_pattern;
    if (t1 == null)
      this._liblib10$_pattern = inputPattern;
    else
      this._liblib10$_pattern = $.S(t1) + $.S(separator) + $.S(inputPattern);
  },
  addPattern$2: function(inputPattern, separator) {
    this._formatFieldsPrivate = null;
    if (inputPattern == null)
      return this;
    if ($.containsKey$1$x(this.get$_availableSkeletons(), inputPattern) !== true)
      this._appendPattern$2(inputPattern, separator);
    else
      this._appendPattern$2($.$index$asx(this.get$_availableSkeletons(), inputPattern), separator);
    return this;
  },
  addPattern$1: function(inputPattern) {
    return this.addPattern$2(inputPattern, " ");
  },
  get$pattern: function(_) {
    return this._liblib10$_pattern;
  },
  get$_availableSkeletons: function() {
    return $.$index$asx($.get$dateTimePatterns(), this.get$locale(this));
  },
  parsePattern$1: function(pattern) {
    if (pattern == null)
      return;
    return this._reverse$1(this._parsePatternHelper$1(pattern));
  },
  _parsePatternHelper$1: function(pattern) {
    var t1, matched, parsed;
    t1 = $.getInterceptor$asx(pattern);
    if (t1.get$isEmpty(pattern) === true)
      return [];
    matched = this._match$1(pattern);
    if (matched == null)
      return [];
    parsed = this._parsePatternHelper$1(t1.substring$1(pattern, $.get$length$asx(matched.fullPattern$0())));
    $.add$1$ax(parsed, matched);
    return parsed;
  },
  _match$1: function(pattern) {
    var i, match;
    for (i = 0; $.JSNumber_methods.$lt(i, $.get$length$asx($.get$DateFormat__matchers())); ++i) {
      match = $.$index$asx($.get$DateFormat__matchers(), i).firstMatch$1(pattern);
      if (match != null)
        return $.$index$asx($.DateFormat__fieldConstructors(), i).call$2(match.group$1(0), this);
    }
  },
  _reverse$1: function(list) {
    var result, i;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !list.$isJavaScriptIndexingBehavior()))
      return this._reverse$1$bailout(1, list);
    result = $.List_List($);
    for (i = list.length - 1; i >= 0; --i) {
      if (i >= list.length)
        throw $.ioore(i);
      $.JSArray_methods.addLast$1(result, list[i]);
    }
    return result;
  },
  _reverse$1$bailout: function(state0, list) {
    var result, t1, i, t2;
    result = $.List_List($);
    for (t1 = $.getInterceptor$asx(list), i = $.$sub$n(t1.get$length(list), 1); t2 = $.getInterceptor$n(i), t2.$ge(i, 0) === true; i = t2.$sub(i, 1))
      $.JSArray_methods.addLast$1(result, t1.$index(list, i));
    return result;
  },
  DateFormat$2: function(newPattern, locale) {
    this._locale = $.Intl_verifiedLocale(locale, $.DateFormat_localeExists, $.Intl__throwLocaleError);
    this.addPattern$1(newPattern);
  }
};

$$.DateFormat_format_anon = {"": "Closure;date_0,result_1",
  call$1: function(field) {
    var t1 = this.result_1;
    return t1.write$1(t1, $.format$1$x(field, this.date_0));
  },
  $isFunction: true
};

$$.DateFormat__fieldConstructors_anon = {"": "Closure;",
  call$2: function(pattern, $parent) {
    return $._DateFormatQuotedField$(pattern, $parent);
  },
  $isFunction: true
};

$$.DateFormat__fieldConstructors_anon0 = {"": "Closure;",
  call$2: function(pattern, $parent) {
    return $._DateFormatPatternField$(pattern, $parent);
  },
  $isFunction: true
};

$$.DateFormat__fieldConstructors_anon1 = {"": "Closure;",
  call$2: function(pattern, $parent) {
    return $._DateFormatLiteralField$(pattern, $parent);
  },
  $isFunction: true
};

$$.DateSymbols = {"": "Object;NAME,ERAS<,ERANAMES<,NARROWMONTHS<,STANDALONENARROWMONTHS<,MONTHS<,STANDALONEMONTHS<,SHORTMONTHS<,STANDALONESHORTMONTHS<,WEEKDAYS<,STANDALONEWEEKDAYS<,SHORTWEEKDAYS<,STANDALONESHORTWEEKDAYS<,NARROWWEEKDAYS,STANDALONENARROWWEEKDAYS<,SHORTQUARTERS<,QUARTERS<,AMPMS<,DATEFORMATS,TIMEFORMATS,AVAILABLEFORMATS,FIRSTDAYOFWEEK,WEEKENDRANGE,FIRSTWEEKCUTOFFDAY",
  toString$0: function(_) {
    return this.NAME;
  }
};

$$._DateFormatField = {"": "Object;pattern>,parent>",
  get$width: function(_) {
    return $.get$length$asx(this.pattern);
  },
  fullPattern$0: function() {
    return this.pattern;
  },
  toString$0: function(_) {
    return this.pattern;
  },
  format$1: function(_, date) {
    return this.pattern;
  }
};

$$._DateFormatLiteralField = {"": "_DateFormatField;pattern,parent"};

$$._DateFormatQuotedField = {"": "_DateFormatField;_fullPattern,pattern,parent",
  fullPattern$0: function() {
    return this._fullPattern;
  },
  patchQuotes$0: function() {
    var t1, twoEscapedQuotes;
    if ($.$eq(this.pattern, "''") === true)
      this.pattern = "'";
    else {
      t1 = this.pattern;
      this.pattern = $.substring$2$s(t1, 1, $.$sub$n($.get$length$asx(t1), 1));
      twoEscapedQuotes = $.RegExp_RegExp("''", true, false);
      this.pattern = $.replaceAll$2$s(this.pattern, twoEscapedQuotes, "'");
    }
  },
  _DateFormatQuotedField$2: function(pattern, $parent) {
    this._fullPattern = pattern;
    this.patchQuotes$0();
  }
};

$$._DateFormatPatternField = {"": "_DateFormatField;pattern,parent",
  format$1: function(_, date) {
    return this.formatField$1(date);
  },
  formatField$1: function(date) {
    switch ($.$index$asx(this.pattern, 0)) {
      case "a":
        return this.formatAmPm$1(date);
      case "c":
        return this.formatStandaloneDay$1(date);
      case "d":
        return this.padTo$2(this.get$width(this), date.get$day());
      case "E":
        return this.formatDayOfWeek$1(date);
      case "G":
        return this.formatEra$1(date);
      case "h":
        return this.format1To12Hours$1(date);
      case "H":
        return this.padTo$2(this.get$width(this), date.get$hour());
      case "K":
        return this.padTo$2(this.get$width(this), $.JSInt_methods.$mod(date.get$hour(), 12));
      case "k":
        return this.padTo$2(this.get$width(this), date.get$hour());
      case "L":
        return this.formatStandaloneMonth$1(date);
      case "M":
        return this.formatMonth$1(this, date);
      case "m":
        return this.padTo$2(this.get$width(this), date.get$minute());
      case "Q":
        return this.formatQuarter$1(date);
      case "S":
        return this.formatFractionalSeconds$1(date);
      case "s":
        return this.padTo$2(this.get$width(this), date.get$second());
      case "v":
        return this.formatTimeZoneId$1(date);
      case "y":
        return this.formatYear$1(date);
      case "z":
        return this.formatTimeZone$1(date);
      case "Z":
        return this.formatTimeZoneRFC$1(date);
      default:
        return "";
    }
  },
  get$symbols: function() {
    return $.$index$asx($.get$dateTimeSymbols(), $.get$locale$x(this.parent));
  },
  formatEra$1: function(date) {
    var era = date.get$year() > 0 ? 1 : 0;
    return $.$ge$n(this.get$width(this), 4) === true ? $.$index$asx(this.get$symbols().get$ERANAMES(), era) : $.$index$asx(this.get$symbols().get$ERAS(), era);
  },
  formatYear$1: function(date) {
    var year = date.get$year();
    if (year < 0)
      year = -year;
    return $.$eq(this.get$width(this), 2) === true ? this.padTo$2(2, $.JSNumber_methods.$mod(year, 100)) : $.JSNumber_methods.toString$0(year);
  },
  formatMonth$1: function(_, date) {
    switch (this.get$width(this)) {
      case 5:
        return $.$index$asx(this.get$symbols().get$NARROWMONTHS(), date.get$month() - 1);
      case 4:
        return $.$index$asx(this.get$symbols().get$MONTHS(), date.get$month() - 1);
      case 3:
        return $.$index$asx(this.get$symbols().get$SHORTMONTHS(), date.get$month() - 1);
      default:
        return this.padTo$2(this.get$width(this), date.get$month());
    }
  },
  formatFractionalSeconds$1: function(date) {
    var basic = this.padTo$2(3, date.get$millisecond());
    if ($.$gt$n($.$sub$n(this.get$width(this), 3), 0) === true)
      return $.$add$ns(basic, this.padTo$2($.$sub$n(this.get$width(this), 3), 0));
    else
      return basic;
  },
  formatAmPm$1: function(date) {
    var index;
    date.get$hour();
    index = date.get$hour() >= 12 && date.get$hour() < 24 ? 1 : 0;
    return $.$index$asx(this.get$symbols().get$AMPMS(), index);
  },
  format1To12Hours$1: function(date) {
    var hours = date.get$hour();
    if (date.get$hour() > 12)
      hours -= 12;
    if (hours === 0)
      hours = 12;
    return this.padTo$2(this.get$width(this), hours);
  },
  formatStandaloneDay$1: function(date) {
    switch (this.get$width(this)) {
      case 5:
        return $.$index$asx(this.get$symbols().get$STANDALONENARROWWEEKDAYS(), $.JSNumber_methods.$mod(date.get$weekday(), 7));
      case 4:
        return $.$index$asx(this.get$symbols().get$STANDALONEWEEKDAYS(), $.JSNumber_methods.$mod(date.get$weekday(), 7));
      case 3:
        return $.$index$asx(this.get$symbols().get$STANDALONESHORTWEEKDAYS(), $.JSNumber_methods.$mod(date.get$weekday(), 7));
      default:
        return this.padTo$2(1, date.get$day());
    }
  },
  formatStandaloneMonth$1: function(date) {
    switch (this.get$width(this)) {
      case 5:
        return $.$index$asx(this.get$symbols().get$STANDALONENARROWMONTHS(), date.get$month() - 1);
      case 4:
        return $.$index$asx(this.get$symbols().get$STANDALONEMONTHS(), date.get$month() - 1);
      case 3:
        return $.$index$asx(this.get$symbols().get$STANDALONESHORTMONTHS(), date.get$month() - 1);
      default:
        return this.padTo$2(this.get$width(this), date.get$month());
    }
  },
  formatQuarter$1: function(date) {
    var quarter = $.JSDouble_methods.truncate$0(date.get$month() / 3);
    if ($.$lt$n(this.get$width(this), 4) === true)
      return $.$index$asx(this.get$symbols().get$SHORTQUARTERS(), quarter);
    else
      return $.$index$asx(this.get$symbols().get$QUARTERS(), quarter);
  },
  formatDayOfWeek$1: function(date) {
    var t1 = $.$ge$n(this.get$width(this), 4) === true ? this.get$symbols().get$WEEKDAYS() : this.get$symbols().get$SHORTWEEKDAYS();
    return $.$index$asx(t1, $.JSNumber_methods.$mod(date.get$weekday(), 7));
  },
  formatTimeZoneId$1: function(date) {
    throw $.$$throw($.UnimplementedError$(null));
  },
  formatTimeZone$1: function(date) {
    throw $.$$throw($.UnimplementedError$(null));
  },
  formatTimeZoneRFC$1: function(date) {
    throw $.$$throw($.UnimplementedError$(null));
  },
  padTo$2: function(width, toBePrinted) {
    var basicString, t1, buffer, i;
    if (typeof width !== "number")
      return this.padTo$2$bailout(1, width, toBePrinted);
    basicString = $.JSNumber_methods.toString$0(toBePrinted);
    t1 = basicString.length;
    if (t1 >= width)
      return basicString;
    buffer = $.StringBuffer$("");
    for (i = 0; i < width - t1; ++i)
      buffer.write$1(buffer, "0");
    buffer.write$1(buffer, basicString);
    return buffer.toString$0(buffer);
  },
  padTo$2$bailout: function(state0, width, toBePrinted) {
    var basicString, t1, buffer, i;
    basicString = $.JSNumber_methods.toString$0(toBePrinted);
    t1 = basicString.length;
    if ($.JSInt_methods.$ge(t1, width))
      return basicString;
    buffer = $.StringBuffer$("");
    for (i = 0; $.JSNumber_methods.$lt(i, $.$sub$n(width, t1)); ++i)
      buffer.write$1(buffer, "0");
    buffer.write$1(buffer, basicString);
    return buffer.toString$0(buffer);
  }
};

$$.UninitializedLocaleData = {"": "Object;message,fallbackData",
  $index: function(_, key) {
    if (typeof key !== "string")
      return this.$$index$bailout(1, key);
    return key === "en_US" ? this.fallbackData : this._throwException$0();
  },
  $$index$bailout: function(state0, key) {
    return $.$eq(key, "en_US") === true ? this.fallbackData : this._throwException$0();
  },
  get$keys: function(_) {
    return this._throwException$0();
  },
  containsKey$1: function(_, key) {
    return $.$eq(key, "en_US") === true ? true : this._throwException$0();
  },
  _throwException$0: function() {
    throw $.$$throw($.LocaleDataException$("Locale data has not been initialized, call " + this.message + "."));
  }
};

$$.LocaleDataException = {"": "Object;message",
  toString$0: function(_) {
    return "LocaleDataException: " + this.message;
  },
  $isException: true
};

$$.ChangeNotification = {"": "Object;oldValue,newValue>,changes",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!other.$isChangeNotification)
      t1 = $.$eq(this.oldValue, other.oldValue) === true && $.$eq(this.newValue, other.newValue) === true && $.$eq(this.changes, other.changes) === true;
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    return $.hash3(this.oldValue, this.newValue, this.changes);
  },
  toString$0: function(_) {
    var t1 = this.changes;
    if (t1 != null)
      return "#<ChangeNotification to " + $.S(this.newValue) + ": " + $.S(t1) + ">";
    return "#<ChangeNotification from " + $.S(this.oldValue) + " to " + $.S(this.newValue) + ">";
  },
  $isChangeNotification: true
};

$$.observe_anon = {"": "Closure;callback_0,obs_1",
  call$1: function(changes) {
    var t1, t2;
    t1 = this.callback_0;
    t2 = this.obs_1;
    t1.call$1($.ChangeNotification$(t2, t2, changes));
  },
  $isFunction: true
};

$$._ExpressionObserver = {"": "Object;_liblib5$_id<,_expression,_liblib5$_callback,_debugName,_reads,_unobservers,_scheduled@,_liblib5$_value",
  _expression$0: function() {
    return this._expression.call$0();
  },
  _liblib5$_callback$1: function(arg0) {
    return this._liblib5$_callback.call$1(arg0);
  },
  toString$0: function(_) {
    var t1, t2;
    t1 = this._debugName;
    t2 = this._liblib5$_id;
    return t1 != null ? "<observer " + $.S(t2) + ": " + $.S(t1) + ">" : "<observer " + $.S(t2) + ">";
  },
  _observe$0: function(_) {
    var e, trace, $parent, exception, t1;
    $parent = $._activeObserver;
    $._activeObserver = this;
    try {
      this._liblib5$_value = this._expression$0();
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $.onObserveUnhandledError.call$4(e, trace, this._expression, "from " + $.S(this));
      this._liblib5$_value = null;
    }

    t1 = this._reads;
    t1.forEach$1(t1, this.get$_watchForChange());
    t1.clear$0(t1);
    $._activeObserver = $parent;
    this._observeValue$0();
    return this._unobservers.length > 0;
  },
  _runCallback$1: function(change) {
    var e, trace, exception, t1;
    try {
      this._liblib5$_callback$1(change);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $.onObserveUnhandledError.call$4(e, trace, this._liblib5$_callback, "from " + $.S(this));
    }

  },
  _observeValue$0: function() {
    var value = this._liblib5$_value;
    if (!(typeof value === "object" && value !== null && !!value.$isObservable))
      return;
    this._unobservers.push($.observeChanges(value, new $._ExpressionObserver__observeValue_anon(this, value)));
  },
  _watchForChange$2: function(target, reads) {
    this._unobservers.push($.observeChanges(target, new $._ExpressionObserver__watchForChange_anon(this, reads)));
  },
  get$_watchForChange: function() {
    return new $.BoundClosure$2(this, "_watchForChange$2");
  },
  _unobserve$0: function() {
    for (var t1 = $.JSArray_methods.get$iterator(this._unobservers); t1.moveNext$0();)
      t1.get$current().call$0();
    this._scheduled = false;
  },
  get$_unobserve: function() {
    return new $.BoundClosure$0(this, "_unobserve$0");
  }
};

$$._ExpressionObserver__observeValue_anon = {"": "Closure;this_0,value_1",
  call$1: function(changes) {
    var t1, t2;
    t1 = this.this_0;
    t2 = this.value_1;
    t1._runCallback$1($.ChangeNotification$(t2, t2, changes));
  },
  $isFunction: true
};

$$._ExpressionObserver__watchForChange_anon = {"": "Closure;this_0,reads_1",
  call$1: function(changes) {
    var t1, t2, t3, t4, t5, t6, mask;
    t1 = this.this_0;
    if (t1.get$_scheduled())
      return;
    t2 = $.get$iterator$ax(changes);
    t3 = this.reads_1;
    if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !t3.$isJavaScriptIndexingBehavior()))
      return this.call$1$bailout(1, t2, t1, t3);
    for (; t2.moveNext$0() === true;) {
      t4 = t2.get$current();
      t5 = $.getInterceptor$x(t4);
      t6 = t5.get$key(t4);
      if (t6 !== (t6 | 0))
        throw $.iae(t6);
      if (t6 < 0 || t6 >= t3.length)
        throw $.ioore(t6);
      mask = t3[t6];
      if (mask != null && $.$and$n(mask, t5.get$type(t4)) !== 0) {
        t1.set$_scheduled(true);
        if ($._changedExpressions == null)
          $._changedExpressions = $.SplayTreeMap$(null, null, null);
        $.$indexSet$ax($._changedExpressions, t1.get$_liblib5$_id(), t1);
        return;
      }
    }
  },
  call$1$bailout: function(state0, t2, t1, t3) {
    var t5, t4, t6, mask;
    t5 = $.getInterceptor$asx(t3);
    for (; t2.moveNext$0() === true;) {
      t4 = t2.get$current();
      t6 = $.getInterceptor$x(t4);
      mask = t5.$index(t3, t6.get$key(t4));
      if (mask != null && $.$and$n(mask, t6.get$type(t4)) !== 0) {
        t1.set$_scheduled(true);
        if ($._changedExpressions == null)
          $._changedExpressions = $.SplayTreeMap$(null, null, null);
        $.$indexSet$ax($._changedExpressions, t1.get$_liblib5$_id(), t1);
        return;
      }
    }
  },
  $isFunction: true
};

$$.LinkedListNode = {"": "Object;_previous?,_liblib4$_next?,_liblib4$_list<,_liblib4$_value",
  get$next: function(_) {
    return this._liblib4$_next;
  },
  get$value: function(_) {
    return this._liblib4$_value;
  },
  set$value: function(_, e) {
    this._liblib4$_value = e;
    return e;
  },
  _link$2: function(p, n) {
    this._liblib4$_next = n;
    this._previous = p;
    if (p != null)
      p.set$_liblib4$_next(this);
    if (n != null)
      n.set$_previous(this);
    return this;
  },
  append$1: function(_, e) {
    return $.LinkedListNode$_(e, this._liblib4$_list)._link$2(this, this._liblib4$_next);
  },
  remove$0: function(_) {
    var t1, t2;
    t1 = this._liblib4$_list;
    if (t1 == null)
      return;
    t2 = t1._liblib4$_length;
    if (typeof t2 !== "number")
      return this.remove$0$bailout(1, t2, t1);
    t1._liblib4$_length = t2 - 1;
    t1 = this._previous;
    t2 = this._liblib4$_next;
    if (t1 != null)
      t1.set$_liblib4$_next(t2);
    else
      this._liblib4$_list._liblib4$_head = t2;
    t1 = this._liblib4$_next;
    t2 = this._previous;
    if (t1 != null)
      t1.set$_previous(t2);
    else
      this._liblib4$_list._liblib4$_tail = t2;
    this._liblib4$_next = null;
    this._previous = null;
    this._liblib4$_list = null;
  },
  remove$0$bailout: function(state0, t2, t1) {
    t1._liblib4$_length = $.$sub$n(t2, 1);
    t1 = this._previous;
    t2 = this._liblib4$_next;
    if (t1 != null)
      t1.set$_liblib4$_next(t2);
    else
      this._liblib4$_list._liblib4$_head = t2;
    t1 = this._liblib4$_next;
    t2 = this._previous;
    if (t1 != null)
      t1.set$_previous(t2);
    else
      this._liblib4$_list._liblib4$_tail = t2;
    this._liblib4$_next = null;
    this._previous = null;
    this._liblib4$_list = null;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  },
  LinkedListNode$_$2: function(value, _list) {
    var t1 = this._liblib4$_list;
    if (t1 != null)
      t1._liblib4$_length = $.$add$ns(t1._liblib4$_length, 1);
  }
};

$$.LinkedList = {"": "Iterable;_liblib4$_head,_liblib4$_tail,_liblib4$_length",
  get$length: function(_) {
    return this._liblib4$_length;
  },
  get$head: function(_) {
    return this._liblib4$_head;
  },
  add$1: function(_, e) {
    var node, t1;
    node = $.LinkedListNode$_(e, this);
    t1 = this._liblib4$_tail;
    if (t1 == null) {
      this._liblib4$_tail = node;
      this._liblib4$_head = node;
      return node;
    }
    t1 = node._link$2(t1, null);
    this._liblib4$_tail = t1;
    return t1;
  },
  get$add: function(receiver) {
    return new $.BoundClosure$i1(this, "add$1", receiver);
  },
  addAll$1: function(_, e) {
    return $.forEach$1$ax(e, this.get$add(this));
  },
  get$iterator: function(_) {
    return $.LinkedListIterator$(this);
  },
  $asIterable: function() {
    return null;
  }
};

$$.LinkedListIterator = {"": "Object;_copy,_liblib4$_list<,_liblib4$_current,_pos",
  get$current: function() {
    return this._liblib4$_current;
  },
  moveNext$0: function() {
    var t1, t3, t4, t2;
    do {
      this._pos = this._pos + 1;
      t1 = this._pos;
      if (t1 !== (t1 | 0))
        return this.moveNext$0$bailout(1, t1);
      t3 = this._copy;
      t4 = t3.length;
      if (t1 < t4) {
        if (t1 < 0)
          throw $.ioore(t1);
        t2 = $.$eq(t3[t1].get$_liblib4$_list(), this._liblib4$_list) !== true;
        t1 = t2;
      } else
        t1 = false;
    } while (t1);
    t1 = this._pos;
    if (t1 !== (t1 | 0))
      return this.moveNext$0$bailout(2, t1);
    t3 = this._copy;
    t4 = t3.length;
    if (t1 < t4) {
      if (t1 < 0)
        throw $.ioore(t1);
      this._liblib4$_current = $.get$value$x(t3[t1]);
      return true;
    } else {
      this._liblib4$_current = null;
      return false;
    }
  },
  moveNext$0$bailout: function(state0, t1) {
    switch (state0) {
      case 0:
      case 1:
        L0:
          while (true)
            switch (state0) {
              case 0:
                this._pos = this._pos + 1;
                t1 = this._pos;
              case 1:
                state0 = 0;
                t3 = this._copy;
                t4 = t3.length;
                if (t1 < t4) {
                  if (t1 !== (t1 | 0))
                    throw $.iae(t1);
                  if (t1 < 0 || t1 >= t4)
                    throw $.ioore(t1);
                  t2 = $.$eq(t3[t1].get$_liblib4$_list(), this._liblib4$_list) !== true;
                  t1 = t2;
                } else
                  t1 = false;
                if (!t1)
                  break L0;
            }
        t1 = this._pos;
      case 2:
        var t3, t4, t2;
        state0 = 0;
        t3 = this._copy;
        t4 = t3.length;
        if (t1 < t4) {
          if (t1 !== (t1 | 0))
            throw $.iae(t1);
          if (t1 < 0 || t1 >= t4)
            throw $.ioore(t1);
          this._liblib4$_current = $.get$value$x(t3[t1]);
          return true;
        } else {
          this._liblib4$_current = null;
          return false;
        }
    }
  },
  LinkedListIterator$1: function(_list) {
    var t1, t2, node, i, i0;
    t1 = this._liblib4$_list;
    this._copy = $.List_List(t1.get$length(t1));
    t2 = this._liblib4$_list;
    node = t2.get$head(t2);
    for (i = 0; node != null; i = i0) {
      t1 = this._copy;
      i0 = i + 1;
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = node;
      node = $.get$next$x(node);
    }
  }
};

$$.TemplateItem = {"": "Object;",
  create$0: function() {
  }
};

$$.Listener = {"": "TemplateItem;eventStream,_liblib8$_subscription,listener",
  insert$0: function(_) {
    this._liblib8$_subscription = this.eventStream.listen$1(this.listener);
  },
  remove$0: function(_) {
    $.cancel$0$x(this._liblib8$_subscription);
    this._liblib8$_subscription = null;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  }
};

$$.Binding = {"": "TemplateItem;exp,action,isFinal,stopper",
  exp$0: function() {
    return this.exp.call$0();
  },
  action$1: function($receiver, arg0) {
    return this.action.call$1(arg0);
  },
  stopper$0: function() {
    return this.stopper.call$0();
  },
  insert$0: function(_) {
    if (this.isFinal)
      this.action$1(this, $.ChangeNotification$(null, this.exp$0(), null));
    else if (this.stopper != null)
      throw $.$$throw($.StateError$("binding already attached"));
    else
      this.stopper = $.watchAndInvoke(this.exp, this.action, "generic-binding");
  },
  remove$0: function(_) {
    if (!this.isFinal) {
      this.stopper$0();
      this.stopper = null;
    }
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  }
};

$$.DomPropertyBinding = {"": "TemplateItem;setter,getter,isUrl<,isFinal,stopper",
  setter$1: function(arg0) {
    return this.setter.call$1(arg0);
  },
  getter$0: function() {
    return this.getter.call$0();
  },
  stopper$0: function() {
    return this.stopper.call$0();
  },
  insert$0: function(_) {
    var t1;
    if (this.isFinal === true) {
      t1 = this.getter$0();
      this.setter$1(this.isUrl === true ? $.sanitizeUri(t1) : t1);
    } else if (this.stopper != null)
      throw $.$$throw($.StateError$("data binding already attached."));
    else
      this.stopper = $.watchAndInvoke(this.getter, new $.DomPropertyBinding_insert_anon(this), "dom-property-binding");
  },
  remove$0: function(_) {
    if (this.isFinal !== true) {
      this.stopper$0();
      this.stopper = null;
    }
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  }
};

$$.DomPropertyBinding_insert_anon = {"": "Closure;this_0",
  call$1: function(e) {
    var t1, t2;
    t1 = $.get$newValue$x(e);
    t2 = this.this_0;
    t2.setter$1(t2.get$isUrl() === true ? $.sanitizeUri(t1) : t1);
    return;
  },
  $isFunction: true
};

$$.ComponentItem = {"": "TemplateItem;component",
  create$0: function() {
    var t1 = this.component;
    t1.created_autogenerated$0();
    t1.created$0();
    t1.composeChildren$0();
  },
  insert$0: function(_) {
    var t1 = this.component;
    t1.inserted$0();
    t1.inserted_autogenerated$0();
  },
  remove$0: function(_) {
    var t1 = this.component;
    t1.removed_autogenerated$0();
    t1.removed$0();
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  }
};

$$.Template = {"": "TemplateItem;node<,children>,nodes>",
  listen$2: function(stream, listener) {
    this.children.push($.Listener$(stream, new $.Template_listen_anon(listener)));
  },
  contentBind$2: function(exp, isFinal) {
    var t1 = {};
    t1.bindNode_0 = document.createTextNode("");
    this.children.push($.Binding$(new $.Template_contentBind_anon(exp), new $.Template_contentBind_anon0(t1, exp), isFinal));
    return t1.bindNode_0;
  },
  oneWayBind$4: function(exp, setter, isFinal, isUrl) {
    this.children.push($.DomPropertyBinding$(exp, setter, isUrl, isFinal));
  },
  loop$4$isTemplateElement: function(_, template, exp, iterSetup, isTemplateElement) {
    var t1 = isTemplateElement === true ? $.LoopTemplate$(template, exp, iterSetup) : $.LoopTemplateInAttribute$(template, exp, iterSetup);
    this.children.push(t1);
  },
  component$1: function(component) {
    this.children.push($.ComponentItem$(component));
  },
  add$1: function(_, n) {
    return this.nodes.push(n);
  },
  addAll$1: function(_, list) {
    return $.JSArray_methods.addAll$1(this.nodes, list);
  },
  create$0: function() {
    var t1, len, i;
    for (t1 = this.children, len = t1.length, i = 0; i < len; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i].create$0();
    }
  },
  insert$0: function(_) {
    var t1, len, i;
    for (t1 = this.children, len = t1.length, i = 0; i < len; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      $.insert$0$ax(t1[i]);
    }
  },
  remove$0: function(_) {
    var t1, i;
    for (t1 = this.children, i = t1.length - 1; i >= 0; --i) {
      if (i >= t1.length)
        throw $.ioore(i);
      $.remove$0$ax(t1[i]);
    }
    $.JSArray_methods.clear$0(t1);
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  }
};

$$.Template_listen_anon = {"": "Closure;listener_0",
  call$1: function(e) {
    this.listener_0.call$1(e);
    $.dispatch();
  },
  $isFunction: true
};

$$.Template_contentBind_anon = {"": "Closure;exp_1",
  call$0: function() {
    return $.S(this.exp_1.call$0());
  },
  $isFunction: true
};

$$.Template_contentBind_anon0 = {"": "Closure;box_0,exp_2",
  call$1: function(e) {
    var t1, t2;
    t1 = this.exp_2.call$0();
    t2 = this.box_0;
    t2.bindNode_0 = $.updateBinding(t1, t2.bindNode_0, $.get$newValue$x(e));
  },
  $isFunction: true
};

$$.PlaceholderTemplate = {"": "Template;",
  stopper$0: function() {
    return this.stopper.call$0();
  },
  create$0: function() {
  },
  insert$0: function(_) {
    var t1, t2, $parent, reference, len, i;
    $.Template.prototype.create$0.call(this);
    t1 = this.nodes;
    if (t1.length > 0) {
      t2 = this.node;
      $parent = $.get$parentNode$x(t2);
      reference = $.get$nextNode$x(t2);
      for (len = t1.length, t2 = $.getInterceptor$x($parent), i = 0; i < len; ++i) {
        if (i >= t1.length)
          throw $.ioore(i);
        t2.insertBefore$2($parent, t1[i], reference);
      }
    }
    $.Template.prototype.insert$0.call(this, this);
  },
  remove$0: function(_) {
    var t1, i;
    $.Template.prototype.remove$0.call(this, this);
    for (t1 = this.nodes, i = t1.length - 1; i >= 0; --i) {
      if (i >= t1.length)
        throw $.ioore(i);
      $.remove$0$ax(t1[i]);
    }
    $.JSArray_methods.clear$0(t1);
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  }
};

$$.LoopTemplate = {"": "PlaceholderTemplate;iterSetup,exp,stopper,node,children,nodes",
  iterSetup$2: function(arg0, arg1) {
    return this.iterSetup.call$2(arg0, arg1);
  },
  insert$0: function(_) {
    this.stopper = $.watchAndInvoke(this.exp, new $.LoopTemplate_insert_anon(this), "loop-binding");
  },
  remove$0: function(_) {
    $.PlaceholderTemplate.prototype.remove$0.call(this, this);
    this.stopper$0();
    this.stopper = null;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  }
};

$$.LoopTemplate_insert_anon = {"": "Closure;this_0",
  call$1: function(e) {
    var t1, t2;
    t1 = this.this_0;
    $.PlaceholderTemplate.prototype.remove$0.call(t1, t1);
    for (t2 = $.get$iterator$ax($.get$newValue$x(e)); t2.moveNext$0() === true;)
      t1.iterSetup$2(t2.get$current(), t1);
    $.PlaceholderTemplate.prototype.insert$0.call(t1, t1);
  },
  $isFunction: true
};

$$.LoopTemplateInAttribute = {"": "Template;iterSetup,exp,stopper,node,children,nodes",
  iterSetup$2: function(arg0, arg1) {
    return this.iterSetup.call$2(arg0, arg1);
  },
  stopper$0: function() {
    return this.stopper.call$0();
  },
  create$0: function() {
  },
  insert$0: function(_) {
    this.stopper = $.watchAndInvoke(this.exp, new $.LoopTemplateInAttribute_insert_anon(this), "loop-attribute-binding");
  },
  remove$0: function(_) {
    $.Template.prototype.remove$0.call(this, this);
    $.clear$0$ax($.get$nodes$x(this.node));
    $.JSArray_methods.clear$0(this.nodes);
    this.stopper$0();
    this.stopper = null;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  }
};

$$.LoopTemplateInAttribute_insert_anon = {"": "Closure;this_0",
  call$1: function(e) {
    var t1, t2, t3;
    t1 = this.this_0;
    $.Template.prototype.remove$0.call(t1, t1);
    $.clear$0$ax($.get$nodes$x(t1.get$node()));
    t2 = $.getInterceptor$x(t1);
    $.clear$0$ax(t2.get$nodes(t1));
    for (t3 = $.get$iterator$ax($.get$newValue$x(e)); t3.moveNext$0() === true;)
      t1.iterSetup$2(t3.get$current(), t1);
    $.Template.prototype.create$0.call(t1);
    $.addAll$1$ax($.get$nodes$x(t1.get$node()), t2.get$nodes(t1));
    $.Template.prototype.insert$0.call(t1, t1);
  },
  $isFunction: true
};

$$.watch_anon = {"": "Closure;",
  call$0: function() {
  },
  $isFunction: true
};

$$.watch_anon0 = {"": "Closure;target_0",
  call$0: function() {
    return $.toList$0$ax(this.target_0.call$0());
  },
  $isFunction: true
};

$$.watch_anon1 = {"": "Closure;target_1",
  call$0: function() {
    return this.target_1;
  },
  $isFunction: true
};

$$.watch_anon2 = {"": "Closure;target_2",
  call$0: function() {
    return $.toList$0$ax(this.target_2);
  },
  $isFunction: true
};

$$._Watcher = {"": "Object;debugName,_getter,_liblib9$_callback,_lastValue",
  _getter$0: function() {
    return this._getter.call$0();
  },
  _liblib9$_callback$1: function(arg0) {
    return this._liblib9$_callback.call$1(arg0);
  },
  toString$0: function(_) {
    var t1 = this.debugName;
    return t1 == null ? "<unnamed>" : t1;
  },
  compareAndNotify$0: function() {
    var currentValue, oldValue;
    currentValue = this._safeRead$0();
    if (this._compare$1(currentValue) === true) {
      oldValue = this._lastValue;
      this._update$1(currentValue);
      this._liblib9$_callback$1($.ChangeNotification$(oldValue, currentValue, null));
      return true;
    }
    return false;
  },
  _compare$1: function(currentValue) {
    return $.$eq(this._lastValue, currentValue) !== true;
  },
  _update$1: function(currentValue) {
    this._lastValue = currentValue;
  },
  _safeRead$0: function() {
    var e, trace, t1, exception;
    try {
      t1 = this._getter$0();
      return t1;
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $.Primitives_printString("error: evaluating " + $.S(this) + " watcher threw an exception (" + $.S(e) + ", " + $.S(trace) + ")");
    }

    return this._lastValue;
  },
  _Watcher$3: function(_getter, _callback, debugName) {
    this._lastValue = this._getter$0();
  }
};

$$._ListWatcher = {"": "_Watcher;debugName,_getter,_liblib9$_callback,_lastValue",
  _compare$1: function(currentValue) {
    var i, t1;
    if (typeof currentValue !== "string" && (typeof currentValue !== "object" || currentValue === null || currentValue.constructor !== Array && !currentValue.$isJavaScriptIndexingBehavior()))
      return this._compare$1$bailout1(1, currentValue);
    if ($.$eq($.get$length$asx(this._lastValue), currentValue.length) !== true)
      return true;
    for (i = 0; $.JSNumber_methods.$lt(i, $.get$length$asx(this._lastValue)); ++i) {
      t1 = $.$index$asx(this._lastValue, i);
      if (i >= currentValue.length)
        throw $.ioore(i);
      if ($.$eq(t1, currentValue[i]) !== true)
        return true;
    }
    return false;
  },
  _compare$1$bailout1: function(state0, currentValue) {
    var t1, i;
    t1 = $.getInterceptor$asx(currentValue);
    if ($.$eq($.get$length$asx(this._lastValue), t1.get$length(currentValue)) !== true)
      return true;
    for (i = 0; $.JSNumber_methods.$lt(i, $.get$length$asx(this._lastValue)); ++i)
      if ($.$eq($.$index$asx(this._lastValue, i), t1.$index(currentValue, i)) !== true)
        return true;
    return false;
  },
  _update$1: function(currentValue) {
    this._lastValue = $.List_List$from(currentValue, true);
  },
  _ListWatcher$3: function(getter, callback, debugName) {
    this._update$1(this._safeRead$0());
  }
};

$$.WebComponent = {"": "Object;",
  createShadowRoot$0: function(_) {
    if ($.useShadowDom === true && $.ShadowRoot_supported() === true)
      return $.createShadowRoot$0$x(this._element);
    if (this._shadowRoots == null)
      this._shadowRoots = [];
    $.add$1$ax(this._shadowRoots, $.$$dom_createElement$1$x(document, "div"));
    return $.get$last$ax(this._shadowRoots);
  },
  created$0: function() {
  },
  inserted$0: function() {
  },
  removed$0: function() {
  },
  composeChildren$0: function() {
    var treeStack, t1, tree, pool, shadowInsertionPoints, shadowInsertionTrees, tree0, point, i;
    if ($.useShadowDom === true && $.ShadowRoot_supported() === true)
      return;
    if ($.get$length$asx(this._shadowRoots) === 0)
      throw $.$$throw($.StateError$("Distribution algorithm requires at least one shadow root and can only be run once."));
    treeStack = this._shadowRoots;
    t1 = $.getInterceptor$ax(treeStack);
    tree = t1.removeLast$0(treeStack);
    pool = $.List_List$from(this.get$nodes(this), true);
    shadowInsertionPoints = [];
    shadowInsertionTrees = [];
    for (tree0 = tree; true;) {
      pool = this._distributeNodes$2(tree0, pool);
      point = $.query$1$x(tree0, "shadow");
      if (point != null)
        if (t1.get$length(treeStack) > 0) {
          tree0 = t1.removeLast$0(treeStack);
          shadowInsertionPoints.push(point);
          shadowInsertionTrees.push(tree0);
        } else {
          $.WebComponent__distribute(point, pool);
          break;
        }
      else
        break;
    }
    for (i = 0; i < shadowInsertionPoints.length; ++i) {
      point = shadowInsertionPoints[i];
      if (i >= shadowInsertionTrees.length)
        throw $.ioore(i);
      $.WebComponent__distribute(point, $.get$nodes$x(shadowInsertionTrees[i]));
    }
    $.clear$0$ax(this.get$nodes(this));
    $.addAll$1$ax(this.get$nodes(this), $.get$nodes$x(tree));
  },
  _distributeNodes$2: function(tree, pool) {
    var t1, t2, t3, select, matching, notMatching, t4, t5;
    if (typeof pool !== "object" || pool === null || pool.constructor !== Array || !!pool.fixed$length)
      return this._distributeNodes$2$bailout(1, tree, pool);
    for (t1 = $.get$iterator$ax($.queryAll$1$x(tree, "content")); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      if (!$.WebComponent__isActive(t2))
        continue;
      t3 = $.getInterceptor$x(t2);
      select = $.$index$asx(t3.get$attributes(t2), "select");
      if (typeof select !== "string")
        return this._distributeNodes$2$bailout(2, 0, pool, t2, select, t3, t1);
      if (select === "")
        select = "*";
      matching = [];
      notMatching = [];
      for (t4 = $.JSArray_methods.get$iterator(pool); t4.moveNext$0();) {
        t5 = t4.get$current();
        ($.WebComponent__matches(t5, select) === true ? matching : notMatching).push(t5);
      }
      if (matching.length === 0) {
        matching = t3.get$nodes(t2);
        if (typeof matching !== "object" || matching === null || matching.constructor !== Array || !!matching.fixed$length)
          return this._distributeNodes$2$bailout(3, 0, 0, t2, 0, 0, t1, matching, notMatching);
      }
      $.WebComponent__distribute(t2, matching);
      pool = notMatching;
    }
    return pool;
  },
  _distributeNodes$2$bailout: function(state0, tree, pool, t2, select, t3, t1, matching, notMatching) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.get$iterator$ax($.queryAll$1$x(tree, "content"));
      default:
        var t4, t5;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(t1.moveNext$0() === true))
                  break L0;
              default:
                c$0: {
                  switch (state0) {
                    case 0:
                      t2 = t1.get$current();
                      if (!$.WebComponent__isActive(t2))
                        break c$0;
                      t3 = $.getInterceptor$x(t2);
                      select = $.$index$asx(t3.get$attributes(t2), "select");
                    case 2:
                      state0 = 0;
                      if (select == null || $.$eq(select, "") === true)
                        select = "*";
                      matching = [];
                      notMatching = [];
                      for (t4 = $.get$iterator$ax(pool); t4.moveNext$0() === true;) {
                        t5 = t4.get$current();
                        ($.WebComponent__matches(t5, select) === true ? matching : notMatching).push(t5);
                      }
                    case 3:
                      if (state0 === 3 || state0 === 0 && matching.length === 0)
                        switch (state0) {
                          case 0:
                            matching = t3.get$nodes(t2);
                          case 3:
                            state0 = 0;
                        }
                      $.WebComponent__distribute(t2, matching);
                      pool = notMatching;
                  }
                }
            }
        return pool;
    }
  },
  get$nodes: function(_) {
    return $.get$nodes$x(this._element);
  },
  replaceWith$1: function(_, otherNode) {
    $.replaceWith$1$x(this._element, otherNode);
  },
  remove$0: function(_) {
    return $.remove$0$ax(this._element);
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  },
  get$nextNode: function(_) {
    return $.get$nextNode$x(this._element);
  },
  get$document: function(_) {
    return $.get$document$x(this._element);
  },
  set$text: function(_, v) {
    $.set$text$x(this._element, v);
  },
  contains$1: function(_, other) {
    return $.contains$1$asx(this._element, other);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  insertBefore$2: function(_, newChild, refChild) {
    return $.insertBefore$2$x(this._element, newChild, refChild);
  },
  insertAllBefore$2: function(_, newChild, refChild) {
    return $.insertAllBefore$2$x(this._element, newChild, refChild);
  },
  get$attributes: function(_) {
    return $.get$attributes$x(this._element);
  },
  get$children: function(_) {
    return $.get$children$x(this._element);
  },
  get$classes: function(_) {
    return $.get$classes$x(this._element);
  },
  getComputedStyle$1: function(_, pseudoElement) {
    return $.getComputedStyle$1$x(this._element, pseudoElement);
  },
  clone$1: function(_, deep) {
    return $.clone$1$x(this._element, deep);
  },
  get$parent: function(_) {
    return $.get$parent$x(this._element);
  },
  get$parentNode: function(_) {
    return $.get$parentNode$x(this._element);
  },
  get$id: function(_) {
    return $.get$id$x(this._element);
  },
  set$innerHtml: function(_, v) {
    $.set$innerHtml$x(this._element, v);
  },
  get$dataset: function(_) {
    return $.get$dataset$x(this._element);
  },
  get$style: function(_) {
    return $.get$style$x(this._element);
  },
  get$tagName: function(_) {
    return $.get$tagName$x(this._element);
  },
  matches$1: function(_, selectors) {
    return $.matches$1$x(this._element, selectors);
  },
  query$1: function(_, selectors) {
    return $.query$1$x(this._element, selectors);
  },
  queryAll$1: function(_, selectors) {
    return $.queryAll$1$x(this._element, selectors);
  },
  get$$$dom_className: function(_) {
    return $.get$$$dom_className$x(this._element);
  },
  set$$$dom_className: function(_, value) {
    $.set$$$dom_className$x(this._element, value);
  },
  get$$$dom_lastElementChild: function(_) {
    return $.get$$$dom_lastElementChild$x(this._element);
  },
  $$dom_getAttribute$1: function(_, $name) {
    return $.$$dom_getAttribute$1$x(this._element, $name);
  },
  $$dom_hasAttribute$1: function(_, $name) {
    return $.$$dom_hasAttribute$1$x(this._element, $name);
  },
  $$dom_setAttribute$2: function(_, $name, value) {
    return $.$$dom_setAttribute$2$x(this._element, $name, value);
  },
  get$$$dom_attributes: function(_) {
    return $.get$$$dom_attributes$x(this._element);
  },
  get$$$dom_childNodes: function(_) {
    return $.get$$$dom_childNodes$x(this._element);
  },
  get$$$dom_localName: function(_) {
    return $.get$$$dom_localName$x(this._element);
  },
  get$$$dom_namespaceUri: function(_) {
    return $.get$$$dom_namespaceUri$x(this._element);
  },
  $$dom_addEventListener$3: function(_, type, listener, useCapture) {
    $.$$dom_addEventListener$3$x(this._element, type, listener, useCapture);
  },
  dispatchEvent$1: function(_, $event) {
    return $.dispatchEvent$1$x(this._element, $event);
  },
  $$dom_removeChild$1: function(_, oldChild) {
    return $.$$dom_removeChild$1$x(this._element, oldChild);
  },
  $$dom_removeEventListener$3: function(_, type, listener, useCapture) {
    $.$$dom_removeEventListener$3$x(this._element, type, listener, useCapture);
  },
  $$dom_replaceChild$2: function(_, newChild, oldChild) {
    return $.$$dom_replaceChild$2$x(this._element, newChild, oldChild);
  },
  get$xtag: function(_) {
    return $.get$xtag$x(this._element);
  },
  set$xtag: function(_, value) {
    $.set$xtag$x(this._element, value);
  },
  append$1: function(_, e) {
    return $.append$1$x(this._element, e);
  },
  get$onChange: function(_) {
    return $.get$onChange$x(this._element);
  },
  get$onClick: function(_) {
    return $.get$onClick$x(this._element);
  },
  get$onError: function(_) {
    return $.get$onError$x(this._element);
  },
  get$onInput: function(_) {
    return $.get$onInput$x(this._element);
  },
  WebComponent$forElement$1: function(element) {
    if (element == null || $.get$xtag$x(this._element) != null)
      throw $.$$throw($.ArgumentError$("element must be provided and not have its xtag property set"));
    $.set$xtag$x(this._element, this);
  },
  $isElement: function() {
    return true;
  },
  $asElement: function() {
    return null;
  },
  $isNode: function() {
    return true;
  },
  $asNode: function() {
    return null;
  }
};

$$._Enum = {"": "Object;name>",
  toString$0: function(_) {
    return this.name;
  }
};

$$.Orientation = {"": "_Enum;name"};

$$.HorizontalAlignment = {"": "_Enum;name"};

$$.VerticalAlignment = {"": "_Enum;name"};

$$.Css3TransitionEffect = {"": "ShowHideEffect;",
  startShow$3: function(element, desiredDuration, timing) {
    return this._startAnimation$6(true, element, desiredDuration, this._hideValue, this._showValue, timing);
  },
  startHide$3: function(element, desiredDuration, timing) {
    return this._startAnimation$6(false, element, desiredDuration, this._showValue, this._hideValue, timing);
  },
  clearAnimation$1: function(element) {
    var restoreValues, t1;
    restoreValues = $._css3TransitionEffectValues_cleanup(element);
    t1 = $.getInterceptor$x(element);
    $.set$transitionTimingFunction$x(t1.get$style(element), "");
    $.set$transitionProperty$x(t1.get$style(element), "");
    $.set$transitionDuration$x(t1.get$style(element), "");
    $.forEach$1$ax(restoreValues, new $.Css3TransitionEffect_clearAnimation_anon(element));
  },
  get$clearAnimation: function() {
    return new $.BoundClosure$1(this, "clearAnimation$1");
  },
  _startAnimation$6: function(doingShow, element, desiredDuration, startValue, endValue, timing) {
    var t1, t2, localPropsToKeep, t3, localValues;
    t1 = {};
    t1.endValue_0 = endValue;
    t2 = this._property;
    localPropsToKeep = [t2];
    t3 = this._animatingOverrides;
    $.JSArray_methods.addAll$1(localPropsToKeep, $.get$keys$x(t3));
    localValues = $.Css3TransitionEffect__recordProperties(element, localPropsToKeep);
    $.forEach$1$ax(t3, new $.Css3TransitionEffect__startAnimation_anon(element));
    t1.endValue_0 = t1.endValue_0;
    $.setProperty$2$x($.get$style$x(element), t2, startValue);
    $._css3TransitionEffectValues_delayStart(element, localValues, new $.Css3TransitionEffect__startAnimation_anon0(t1, this, element, desiredDuration, timing));
    return desiredDuration;
  },
  _setShowValue$4: function(element, value, desiredDuration, timing) {
    var cssTimingValue, t1, t2, t3;
    cssTimingValue = $.CssEffectTiming__getCssValue(timing);
    t1 = $.getInterceptor$x(element);
    $.set$transitionTimingFunction$x(t1.get$style(element), cssTimingValue);
    t2 = this._property;
    $.set$transitionProperty$x(t1.get$style(element), t2);
    t3 = $.S(desiredDuration) + "ms";
    $.set$transitionDuration$x(t1.get$style(element), t3);
    $.setProperty$2$x(t1.get$style(element), t2, value);
  },
  Css3TransitionEffect$4: function(_property, _hideValue, _showValue, animatingOverrides) {
  }
};

$$.Css3TransitionEffect_clearAnimation_anon = {"": "Closure;element_0",
  call$2: function(p, v) {
    $.setProperty$2$x($.get$style$x(this.element_0), p, v);
  },
  $isFunction: true
};

$$.Css3TransitionEffect__startAnimation_anon = {"": "Closure;element_1",
  call$2: function(p, v) {
    $.setProperty$2$x($.get$style$x(this.element_1), p, v);
  },
  $isFunction: true
};

$$.Css3TransitionEffect__startAnimation_anon0 = {"": "Closure;box_0,this_2,element_3,desiredDuration_4,timing_5",
  call$0: function() {
    return this.this_2._setShowValue$4(this.element_3, this.box_0.endValue_0, this.desiredDuration_4, this.timing_5);
  },
  $isFunction: true
};

$$._css3TransitionEffectValues = {"": "Object;element,originalValues,timer",
  _cleanup$0: function() {
    var t1 = this.timer;
    if (t1 != null) {
      t1.cancel$0(t1);
      this.timer = null;
    }
    return this.originalValues;
  }
};

$$._css3TransitionEffectValues_delayStart_anon = {"": "Closure;action_0,value_1",
  call$0: function() {
    this.value_1.timer = null;
    this.action_0.call$0();
  },
  $isFunction: true
};

$$.FadeEffect = {"": "Css3TransitionEffect;_property,_hideValue,_showValue,_animatingOverrides"};

$$.ScaleEffect = {"": "Css3TransitionEffect;_property,_hideValue,_showValue,_animatingOverrides"};

$$.EffectTiming = {"": "Object;"};

$$.CssEffectTiming = {"": "EffectTiming;cssName", $isCssEffectTiming: true};

$$.ModalManager_show_anon = {"": "Closure;backdropClickHandler_0",
  call$1: function(args) {
    return this.backdropClickHandler_0.call$0();
  },
  $isFunction: true
};

$$.ModalManager_hide_anon = {"": "Closure;",
  call$1: function(err) {
    $.Primitives_printString($.toString$0(err));
  },
  $isFunction: true
};

$$.ModalManager_hide_anon0 = {"": "Closure;",
  call$1: function(v) {
    return false;
  },
  $isFunction: true
};

$$.ModalManager_hide_anon1 = {"": "Closure;element_0",
  call$0: function() {
    return $.ModalManager__clearOutBackdrop($.get$document$x(this.element_0));
  },
  $isFunction: true
};

$$.ShowHideAction = {"": "_Enum;name"};

$$.ShowHideResult = {"": "_Enum;name"};

$$.ShowHide__populateState_anon = {"": "Closure;tagDefaultDisplay_0",
  call$0: function() {
    return this.tagDefaultDisplay_0;
  },
  $isFunction: true
};

$$._ShowHideValues = {"": "Object;initialComputedDisplay<,initialLocalDisplay<,currentState@"};

$$._AnimatingValues = {"": "Object;_liblib2$_element,_cleanupAction,_finishFunc,_completer,_timer",
  _cleanupAction$1: function(arg0) {
    return this._cleanupAction.call$1(arg0);
  },
  _finishFunc$1: function(arg0) {
    return this._finishFunc.call$1(arg0);
  },
  _start$1: function(durationMS) {
    this._timer = $.Timer_Timer($.Duration$(0, 0, 0, durationMS, 0, 0), this.get$_complete());
    return this._completer.future;
  },
  _cancel$0: function() {
    var t1 = this._timer;
    t1.cancel$0(t1);
    t1 = this._liblib2$_element;
    this._cleanupAction$1(t1);
    $.$indexSet$ax($.get$_AnimatingValues__aniValues(), t1, null);
    t1 = this._completer;
    t1.complete$1(t1, $.CONSTANT17);
  },
  _complete$0: function() {
    var t1 = this._liblib2$_element;
    this._cleanupAction$1(t1);
    $.$indexSet$ax($.get$_AnimatingValues__aniValues(), t1, null);
    this._finishFunc$1(t1);
    t1 = this._completer;
    t1.complete$1(t1, $.CONSTANT15);
  },
  get$_complete: function() {
    return new $.BoundClosure$0(this, "_complete$0");
  },
  _cleanup$0: function() {
    var t1 = this._liblib2$_element;
    this._cleanupAction$1(t1);
    $.$indexSet$ax($.get$_AnimatingValues__aniValues(), t1, null);
  },
  _AnimatingValues$_internal$3: function(_element, _cleanupAction, _finishFunc) {
    $.$indexSet$ax($.get$_AnimatingValues__aniValues(), this._liblib2$_element, this);
  }
};

$$.ShowHideEffect = {"": "Object;",
  startShow$3: function(element, desiredDuration, timing) {
    return 0;
  },
  startHide$3: function(element, desiredDuration, timing) {
    return 0;
  },
  clearAnimation$1: function(element) {
  },
  get$clearAnimation: function() {
    return new $.BoundClosure$1(this, "clearAnimation$1");
  }
};

$$.ShowHideState = {"": "_Enum;name"};

// Bound closures
$$.BoundClosure$i1 = {"": "Closure;self,target,receiver",
  call$1: function(p0) {
    return this.self[this.target](this.receiver, p0);
  }
};

$$.BoundClosure$i0 = {"": "Closure;self,target,receiver",
  call$0: function() {
    return this.self[this.target](this.receiver);
  }
};

$$.Bound_next_Cursor = {"": "Closure;self,target,receiver",
  call$1: function(p0) {
    return this.self[this.target](this.receiver, p0);
  },
  call$0: function() {
    return this.call$1(null);
  }
};

$$.BoundClosure$1 = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  }
};

$$.BoundClosure$0 = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  }
};

$$.Bound_contains_JSString = {"": "Closure;self,target,receiver",
  call$2: function(p0, p1) {
    return this.self[this.target](this.receiver, p0, p1);
  },
  call$1: function(other) {
    return this.call$2(other, 0);
  }
};

$$.BoundClosure$2 = {"": "Closure;self,target",
  call$2: function(p0, p1) {
    return this.self[this.target](p0, p1);
  }
};

Isolate.$finishClasses($$, $, null);
$$ = null;

$.Modal$forElement = function(e) {
  var t1 = new $.Modal(null, null, false, e, null);
  t1.WebComponent$forElement$1(e);
  return t1;
};

$.Camara$ = function(id, nombre) {
  return new $.Camara(id, nombre);
};

$.DetalleReporteTarima$ = function() {
  return new $.DetalleReporteTarima(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
};

$.todos_los_lotes = function(value) {
  var txtLote, t1;
  $._todos = value;
  txtLote = $.query("#txtLote");
  t1 = $.getInterceptor$x(txtLote);
  if (value === true)
    $.$indexSet$ax(t1.get$attributes(txtLote), "disabled", "disabled");
  else
    $.remove$1$ax(t1.get$attributes(txtLote), "disabled");
};

$.camaras_todas = function(value) {
  var txtCamaras, t1;
  $._camaras_todas = value;
  txtCamaras = $.query("#txtCamaras");
  t1 = $.getInterceptor$x(txtCamaras);
  if (value === true)
    $.$indexSet$ax(t1.get$attributes(txtCamaras), "disabled", "disabled");
  else
    $.remove$1$ax(t1.get$attributes(txtCamaras), "disabled");
};

$.lote_tarima = function() {
  var t1, exception;
  try {
    t1 = $.toString$0($._lote);
    return t1;
  } catch (exception) {
    $.unwrapException(exception);
    return "0";
  }

};

$.lote_tarima0 = function(value) {
  var exception;
  try {
    $._lote = $.int_parse(value, null, null);
  } catch (exception) {
    $.unwrapException(exception);
    $._lote = 0;
  }

};

$.llena_camaras = function(data) {
  var pLista, i, t1, pCamara;
  pLista = $.parse(data, null);
  if (typeof pLista !== "string" && (typeof pLista !== "object" || pLista === null || pLista.constructor !== Array && !pLista.$isJavaScriptIndexingBehavior()))
    return $.llena_camaras$bailout(1, pLista);
  $.clear$0$ax($.get$Camaras());
  for (i = 0; i <= pLista.length - 1; ++i) {
    t1 = $.toString$0($.$index$asx(pLista[i], "id"));
    if (i >= pLista.length)
      throw $.ioore(i);
    pCamara = $.Camara$(t1, $.$index$asx(pLista[i], "descripcion"));
    $.add$1$ax($.get$Camaras(), pCamara);
  }
  $.dispatch();
};

$.llena_camaras$bailout = function(state0, pLista) {
  var t1, i, pCamara;
  $.clear$0$ax($.get$Camaras());
  for (t1 = $.getInterceptor$asx(pLista), i = 0; $.JSNumber_methods.$le(i, $.$sub$n(t1.get$length(pLista), 1)); ++i) {
    pCamara = $.Camara$($.toString$0($.$index$asx(t1.$index(pLista, i), "id")), $.$index$asx(t1.$index(pLista, i), "descripcion"));
    $.add$1$ax($.get$Camaras(), pCamara);
  }
  $.dispatch();
};

$.genera_reporte = function(data) {
  var pLista, i, pDetalle, exception;
  $.Primitives_printString("generando reporte...");
  pLista = $.parse(data, null);
  $.Primitives_printString("items: " + $.S($.toString$0($.get$length$asx(pLista))));
  $.clear$0$ax($.get$Reporte());
  $.Primitives_printString("agregando items...");
  for (i = 0; $.$le$n(i, $.$sub$n($.get$length$asx(pLista), 1)) === true; i = $.$add$ns(i, 1)) {
    pDetalle = $.DetalleReporteTarima$();
    pDetalle.set$Cajas($.toString$0($.$index$asx($.$index$asx(pLista, i), "cajas")));
    pDetalle.set$Camara($.toString$0($.$index$asx($.$index$asx(pLista, i), "contenedor")));
    pDetalle.set$Kilos($.$index$asx($.$index$asx(pLista, i), "kilos"));
    pDetalle.set$KilosStr($.$index$asx($.$index$asx(pLista, i), "kilos_str"));
    pDetalle.set$Fecha($.DateTime_parse($.substring$2$s($.$index$asx($.$index$asx(pLista, i), "fecha"), 0, 10)));
    try {
      pDetalle.set$FechaSalida($.DateTime_parse($.substring$2$s($.$index$asx($.$index$asx(pLista, i), "fecha_salida"), 0, 10)));
    } catch (exception) {
      $.unwrapException(exception);
      pDetalle.set$FechaSalida(null);
    }

    pDetalle.set$Folio($.$index$asx($.$index$asx(pLista, i), "folio"));
    pDetalle.set$FolioSalida($.toString$0($.$index$asx($.$index$asx(pLista, i), "id_salida")));
    pDetalle.set$IP($.toString$0($.$index$asx($.$index$asx(pLista, i), "ip")));
    pDetalle.set$Lote($.toString$0($.$index$asx($.$index$asx(pLista, i), "lote")));
    pDetalle.set$PesoReal($.$index$asx($.$index$asx(pLista, i), "pesoreal"));
    pDetalle.set$PesoRealStr($.$index$asx($.$index$asx(pLista, i), "pesoreal_str"));
    pDetalle.set$Status($.toString$0($.$index$asx($.$index$asx(pLista, i), "estatus")));
    pDetalle.set$Ubicacion($.toString$0($.$index$asx($.$index$asx(pLista, i), "ubicacion")));
    pDetalle.set$Seleccionada(false);
    $.TotalCajas = $.$add$ns($.TotalCajas, 1);
    $.TotalPeso = $.$add$ns($.TotalPeso, pDetalle.get$Kilos());
    $.add$1$ax($.get$Reporte(), pDetalle);
  }
  $.dispatch();
};

$.obtener_reporte = function() {
  var pLoteIni, pLoteFin, pCamaraIni, pCamaraFin, pFechaIni, pFechaFin, pUrl;
  $.Primitives_printString("obteniendo reporte...");
  pLoteIni = $.lote_tarima();
  pLoteFin = $.lote_tarima();
  if ($._todos === true) {
    pLoteIni = "1";
    pLoteFin = "999";
  }
  $.InputElement_InputElement(null);
  pCamaraIni = $.get$value$x($.query$1$x(document, "#txtCamaras"));
  if ($._camaras_todas === true) {
    pCamaraIni = "1";
    pCamaraFin = "999";
  } else
    pCamaraFin = pCamaraIni;
  pFechaIni = $.get$value$x($.query$1$x(document, "#txtFechaInicial"));
  pFechaFin = $.get$value$x($.query$1$x(document, "#txtFechaInicial"));
  pUrl = "/tarimas/lista?lote_ini=" + $.S(pLoteIni) + "&lote_fin=" + $.S(pLoteFin) + "&fecha_ini=" + $.S(pFechaIni) + "&fecha_fin=" + $.S(pFechaFin) + "&camara_ini=" + $.S(pCamaraIni) + "&camara_fin=" + $.S(pCamaraFin);
  $.Primitives_printString("URL: " + pUrl);
  $.HttpRequest_getString(pUrl, null, null).then$1($.genera_reporte);
};

$.detalles = function(ADetalleTarima) {
  var t1;
  $.Primitives_printString("detalles");
  t1 = $.toString$0(ADetalleTarima.get$Folio());
  $.set$text$x($.query$1$x(document, "#sId"), t1);
  t1 = $.toString$0(ADetalleTarima.get$Seleccionada());
  $.set$text$x($.query$1$x(document, "#sNombre"), t1);
  $.show$0$x($.get$xtag$x($.query$1$x(document, "#modal_example")));
};

$.filtrar = function() {
  $.Reporte = $.toList$0$ax($.where$1$ax($.get$Reporte(), new $.filtrar_anon()));
};

$.main = function() {
  $.set$display$x($.get$style$x($.query$1$x(document, "#demo")), "block");
  var t1 = $.DateFormat$("dd/MM/yyyy", null);
  t1 = t1.format$1(t1, $.DateTime$_now());
  $.set$value$x($.query$1$x(document, "#txtFechaInicial"), t1);
  t1 = $.DateFormat$("dd/MM/yyyy", null);
  t1 = t1.format$1(t1, $.DateTime$_now());
  $.set$value$x($.query$1$x(document, "#txtFechaFinal"), t1);
  $.HttpRequest_getString("/camaras/obtener_lista", null, null).then$1($.llena_camaras);
};

$.init_autogenerated = function() {
  var t1, _root, __html0, __html1, __t, t2, __e33, __binding32, __e35, __binding34, __modal_example, t3;
  t1 = {};
  _root = $.get$body$x(document);
  __html0 = $.OptionElement_OptionElement($, $, $, $);
  __html1 = $._ElementFactoryProvider_createElement_html("<tr>         \n           <td><input type=\"checkbox\" value=\"Detalles\" id=\"__e-4\"></td>\n            <td id=\"__e-6\"></td>\n            <td id=\"__e-8\"></td>\n            <td id=\"__e-10\"></td>\n            <td id=\"__e-12\"></td>\n            <td id=\"__e-14\"></td>\n            <td id=\"__e-16\"></td>\n            <td id=\"__e-18\"></td>\n            <td id=\"__e-20\"></td>\n            <td id=\"__e-22\"></td>\n            <td id=\"__e-24\"></td>\n            <td id=\"__e-26\"></td>\n            <td id=\"__e-28\"></td>\n            <td><input type=\"button\" value=\"Detalles\" id=\"__e-29\"></td>\n          </tr>");
  t1.__e0_1 = null;
  t1.__e3_2 = null;
  t1.__txtLote_3 = null;
  __t = $.Template$(_root);
  t2 = $.getInterceptor$x(_root);
  t1.__txtLote_3 = t2.query$1(_root, "#txtLote");
  __t.listen$2($.get$onInput$x(t1.__txtLote_3), new $.init_autogenerated_anon(t1));
  __t.oneWayBind$4(new $.init_autogenerated_anon0(), new $.init_autogenerated_anon1(t1), false, false);
  t1.__e0_1 = t2.query$1(_root, "#__e-0");
  __t.listen$2($.get$onChange$x(t1.__e0_1), new $.init_autogenerated_anon2(t1));
  __t.oneWayBind$4(new $.init_autogenerated_anon3(), new $.init_autogenerated_anon4(t1), false, false);
  t2.query$1(_root, "#txtFechaInicial");
  t2.query$1(_root, "#txtFechaFinal");
  __t.loop$4$isTemplateElement(__t, t2.query$1(_root, "#txtCamaras"), new $.init_autogenerated_anon5(), new $.init_autogenerated_anon6(__html0), false);
  t1.__e3_2 = t2.query$1(_root, "#__e-3");
  __t.listen$2($.get$onChange$x(t1.__e3_2), new $.init_autogenerated_anon7(t1));
  __t.oneWayBind$4(new $.init_autogenerated_anon8(), new $.init_autogenerated_anon9(t1), false, false);
  __t.listen$2($.get$onClick$x(t2.query$1(_root, "#btnAceptar")), new $.init_autogenerated_anon10());
  __t.listen$2($.get$onClick$x(t2.query$1(_root, "#btnFiltrar")), new $.init_autogenerated_anon11());
  __t.loop$4$isTemplateElement(__t, t2.query$1(_root, "#__e-31"), new $.init_autogenerated_anon12(), new $.init_autogenerated_anon13(__html1), false);
  __e33 = t2.query$1(_root, "#__e-33");
  __binding32 = __t.contentBind$2(new $.init_autogenerated_anon14(), false);
  $.add$1$ax($.get$nodes$x(__e33), __binding32);
  __e35 = t2.query$1(_root, "#__e-35");
  __binding34 = __t.contentBind$2(new $.init_autogenerated_anon15(), false);
  $.add$1$ax($.get$nodes$x(__e35), __binding34);
  __modal_example = $.query$1$x(t2.query$1(_root, "#demo"), "#modal_example");
  t3 = $.getInterceptor$x(__modal_example);
  t3.query$1(__modal_example, "#myModalLabel");
  t3.query$1(__modal_example, "#sId");
  t3.query$1(__modal_example, "#sNombre");
  t3.query$1(__modal_example, "#sDepto");
  __t.component$1($.Modal$forElement(__modal_example));
  __t.create$0();
  __t.insert$0(__t);
};

$.main0 = function() {
  $.useObservers = false;
  $.main();
  $.init_autogenerated();
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof src !== "string" && (typeof src !== "object" || src === null || src.constructor !== Array && !src.$isJavaScriptIndexingBehavior()))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof srcStart !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !dst.$isJavaScriptIndexingBehavior())
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dstStart !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof count !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var t1, i, j, t2, t3;
  t1 = $.getInterceptor$n(srcStart);
  if (t1.$lt(srcStart, dstStart) === true)
    for (i = $.$sub$n(t1.$add(srcStart, count), 1), j = $.$sub$n($.$add$ns(dstStart, count), 1), t2 = $.getInterceptor$asx(src); t1 = $.getInterceptor$n(i), t1.$ge(i, srcStart) === true; i = t1.$sub(i, 1), j = $.$sub$n(j, 1))
      $.JSArray_methods.$indexSet(dst, j, t2.$index(src, i));
  else
    for (t2 = $.getInterceptor$asx(src), j = dstStart, i = srcStart; t3 = $.getInterceptor$n(i), t3.$lt(i, t1.$add(srcStart, count)) === true; i = t3.$add(i, 1), j = $.$add$ns(j, 1))
      $.JSArray_methods.$indexSet(dst, j, t2.$index(src, i));
};

$.ListIterator$ = function(iterable) {
  return new $.ListIterator(iterable, $.get$length$asx(iterable), 0, null);
};

$.MappedIterable$ = function(_iterable, _f) {
  return new $.MappedIterable(_iterable, _f);
};

$.MappedIterator$ = function(_iterator, _f) {
  return new $.MappedIterator(null, _iterator, _f);
};

$.MappedListIterable$ = function(_source, _f) {
  return new $.MappedListIterable(_source, _f);
};

$.WhereIterable$ = function(_iterable, _f) {
  return new $.WhereIterable(_iterable, _f);
};

$.WhereIterator$ = function(_iterator, _f) {
  return new $.WhereIterator(_iterator, _f);
};

$.ToString_collectionToString = function(c) {
  var result = $.StringBuffer$("");
  $.ToString__emitCollection(c, result, $.List_List($));
  return result.toString$0(result);
};

$.ToString__emitCollection = function(c, result, visiting) {
  var t1, isList, t2, t3, first, t4;
  t1 = $.getInterceptor$ax(visiting);
  t1.add$1(visiting, c);
  isList = typeof c === "object" && c !== null && (c.constructor === Array || c.$isList());
  t2 = isList ? "[" : "{";
  t3 = $.getInterceptor$x(result);
  t3.write$1(result, t2);
  for (t2 = $.get$iterator$ax(c), first = true; t2.moveNext$0() === true; first = false) {
    t4 = t2.get$current();
    if (!first)
      t3.write$1(result, ", ");
    $.ToString__emitObject(t4, result, visiting);
  }
  t3.write$1(result, isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.ToString__emitObject = function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || o.$isCollection()))
    if ($.ToString__containsRef(visiting, o))
      $.write$1$x(result, typeof o === "object" && o !== null && (o.constructor === Array || o.$isList()) ? "[...]" : "{...}");
    else
      $.ToString__emitCollection(o, result, visiting);
  else if (typeof o === "object" && o !== null && o.$isMap())
    if ($.ToString__containsRef(visiting, o))
      $.write$1$x(result, "{...}");
    else
      $.ToString__emitMap(o, result, visiting);
  else
    $.write$1$x(result, o);
};

$.ToString__containsRef = function(c, ref) {
  var t1;
  for (t1 = $.get$iterator$ax(c); t1.moveNext$0() === true;)
    if (t1.get$current() === ref)
      return true;
  return false;
};

$.ToString_mapToString = function(m) {
  var result = $.StringBuffer$("");
  $.ToString__emitMap(m, result, $.List_List($));
  return result.toString$0(result);
};

$.ToString__emitMap = function(m, result, visiting) {
  var t1, t2, t3;
  t1 = {};
  t2 = $.getInterceptor$ax(visiting);
  t2.add$1(visiting, m);
  t3 = $.getInterceptor$x(result);
  t3.write$1(result, "{");
  t1.first_0 = true;
  $.forEach$1$ax(m, new $.ToString__emitMap_anon(t1, result, visiting));
  t3.write$1(result, "}");
  t2.removeLast$0(visiting);
};

$._ConstantMapKeyIterable$ = function(_map) {
  return new $._ConstantMapKeyIterable(_map);
};

$.getInterceptor = function(object) {
};

$._callInIsolate = function(isolate, $function) {
  isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
};

$._currentIsolate = function() {
  return $globalState.currentContext;
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($globalState.isWorker === true)
    return;
  rootContext = $._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
};

$._globalState = function() {
  return $globalState;
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue(), 0);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.IsolateNatives_computeThisScript = function() {
  var currentScript, stack, matches;
  currentScript = $.$currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  stack = new Error().stack;
  if (stack == null)
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw $.$$throw($.UnsupportedError$("Cannot extract URI from \"" + $.S(stack) + "\""));
};

$.IsolateNatives_computeGlobalThis = function() {
  return function() { return this; }();
};

$.IsolateNatives__processWorkerMessage = function(sender, e) {
  var msg, t1, t2, entryPoint, replyTo, context;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      t2 = t1.$index(msg, "id");
      $globalState.currentManagerId = t2;
      entryPoint = $[t1.$index(msg, "functionName")];
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = $._IsolateContext$();
      $globalState.topEventLoop.enqueue$3(context, new $.IsolateNatives__processWorkerMessage_function(entryPoint, replyTo), "worker-start");
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        $.send$2$x(t1.$index(msg, "port"), t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      $.IsolateNatives__log("Closing Worker");
      t1 = $globalState.managers;
      t2 = $.getInterceptor$x(sender);
      t1.remove$1(t1, t2.get$id(sender));
      t2.terminate$0(sender);
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg])));
      } else
        $.Primitives_printString($.toString$0(t1.$index(msg, "msg")));
      break;
    case "error":
      throw $.$$throw(t1.$index(msg, "msg"));
  }
};

$.IsolateNatives__log = function(msg) {
  var trace, t1, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg])));
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.$$throw($._ExceptionImplementation$(trace));
    }

};

$.IsolateNatives__startIsolate = function(topLevel, replyTo) {
  $.lazyPort = $.ReceivePortImpl$();
  $.send$2$x(replyTo, "spawned", $._Isolate_port().toSendPort$0());
  topLevel.call$0();
};

$.IsolateNatives__spawnWorker = function(functionName, uri, replyPort) {
  var worker, t1, t2, workerId;
  if (functionName == null)
    functionName = "main";
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  t1 = $.getInterceptor$x(worker);
  t1.set$onmessage(worker, function(e) { $.IsolateNatives__processWorkerMessage.call$2(worker, e); });
  t2 = $globalState;
  workerId = t2.nextManagerId;
  t2.nextManagerId = workerId + 1;
  t1.set$id(worker, workerId);
  t2 = $globalState.managers;
  t2.$indexSet(t2, workerId, worker);
  t1.postMessage$1(worker, $._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$.ReceivePortImpl$ = function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.$add$ns(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $._FutureImpl__FutureImpl$wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$._PendingSendPortFinder$ = function() {
  var t1 = new $._PendingSendPortFinder([], $._MessageTraverserVisitedMap$());
  t1._PendingSendPortFinder$0();
  return t1;
};

$._serializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$.TimerImpl$ = function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
};

$.hasTimer = function() {
  return $.get$globalThis().setTimeout != null;
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number" && value !== 0 || typeof value === "boolean")
    return String(value);
  if (value == null)
    return "null";
  res = $.toString$0(value);
  if (!(typeof res === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.$add$ns($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
};

$.Primitives__throwFormatException = function(string) {
  throw $.$$throw($.FormatException$(string));
};

$.Primitives_parseInt = function(source, radix, handleError) {
  var match, t1, maxCharCode, digitsPart, i;
  if (handleError == null)
    handleError = $.Primitives__throwFormatException;
  $.checkString(source);
  match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
  if (radix == null) {
    t1 = $.getInterceptor(match);
    if (match != null) {
      if (t1.$index(match, 2) != null)
        return parseInt(source, 16);
      if (t1.$index(match, 3) != null)
        return parseInt(source, 10);
      return handleError.call$1(source);
    }
    radix = 10;
  } else {
    if (!(typeof radix === "number" && Math.floor(radix) === radix))
      throw $.$$throw($.ArgumentError$("Radix is not an integer"));
    if (radix < 2 || radix > 36)
      throw $.$$throw($.RangeError$("Radix " + $.S(radix) + " not in range 2..36"));
    t1 = $.getInterceptor(match);
    if (match != null) {
      if (radix === 10 && t1.$index(match, 3) != null)
        return parseInt(source, 10);
      if (radix < 10 || t1.$index(match, 3) == null) {
        maxCharCode = radix <= 10 ? 48 + radix - 1 : 97 + radix - 10 - 1;
        digitsPart = $.toLowerCase$0$s(t1.$index(match, 1));
        for (i = 0; i < digitsPart.length; ++i)
          if ($.JSString_methods.codeUnitAt$1(digitsPart, i) > maxCharCode)
            return handleError.call$1(source);
      }
    }
    radix = radix;
  }
  if (match == null)
    return handleError.call$1(source);
  return parseInt(source, radix);
};

$.Primitives_parseDouble = function(source, handleError) {
  var result;
  $.checkString(source);
  if (handleError == null)
    handleError = $.Primitives__throwFormatException;
  if (!/^\s*(?:NaN|[+-]?(?:Infinity|(?:\.\d+|\d+(?:\.\d+)?)(?:[eE][+-]?\d+)?))\s*$/.test(source))
    return handleError.call$1(source);
  result = parseFloat(source);
  if ($.JSNumber_methods.get$isNaN(result) && $.$eq(source, "NaN") !== true)
    return handleError.call$1(source);
  return result;
};

$.Primitives_objectTypeName = function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback(object);
  if ($.$eq($name, "Object") === true) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  return t1.codeUnitAt$1($name, 0) === 36 ? t1.substring$1($name, 1) : $name;
};

$.Primitives_newFixedList = function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
};

$.Primitives_dateNow = function() {
  return Date.now();
};

$.Primitives_valueFromDecomposedDate = function(years, month, day, hours, minutes, seconds, milliseconds, isUtc) {
  var jsMonth, value, t1;
  $.checkInt(years);
  $.checkInt(month);
  $.checkInt(day);
  $.checkInt(hours);
  $.checkInt(minutes);
  $.checkInt(seconds);
  $.checkInt(milliseconds);
  $.checkBool(isUtc);
  jsMonth = $.$sub$n(month, 1);
  value = isUtc ? Date.UTC(years, jsMonth, day, hours, minutes, seconds, milliseconds) : new Date(years, jsMonth, day, hours, minutes, seconds, milliseconds).valueOf();
  if ($.JSNumber_methods.get$isNaN(value) || value < -8640000000000000 || value > 8640000000000000)
    throw $.$$throw($.ArgumentError$(null));
  t1 = $.getInterceptor$n(years);
  if (t1.$le(years, 0) === true || t1.$lt(years, 100) === true)
    return $.Primitives_patchUpY2K(value, years, isUtc);
  return value;
};

$.Primitives_patchUpY2K = function(value, years, isUtc) {
  var date = new Date(value);
  if (isUtc)
    date.setUTCFullYear(years);
  else
    date.setFullYear(years);
  return date.valueOf();
};

$.Primitives_lazyAsJsDate = function(receiver) {
  if (receiver.date === (void 0))
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
};

$.Primitives_getYear = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0) : ($.Primitives_lazyAsJsDate(receiver).getFullYear() + 0);
};

$.Primitives_getMonth = function(receiver) {
  return receiver.isUtc === true ? $.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : $.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
};

$.Primitives_getDay = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0) : ($.Primitives_lazyAsJsDate(receiver).getDate() + 0);
};

$.Primitives_getHours = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0) : ($.Primitives_lazyAsJsDate(receiver).getHours() + 0);
};

$.Primitives_getMinutes = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0) : ($.Primitives_lazyAsJsDate(receiver).getMinutes() + 0);
};

$.Primitives_getSeconds = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0) : ($.Primitives_lazyAsJsDate(receiver).getSeconds() + 0);
};

$.Primitives_getMilliseconds = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0) : ($.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0);
};

$.Primitives_getWeekday = function(receiver) {
  return $.JSNumber_methods.$mod((receiver.isUtc === true ? $.Primitives_lazyAsJsDate(receiver).getUTCDay() + 0 : $.Primitives_lazyAsJsDate(receiver).getDay() + 0) + 6, 7) + 1;
};

$.Primitives_getProperty = function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.$$throw($.ArgumentError$(object));
  return object[key];
};

$.Primitives_setProperty = function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.$$throw($.ArgumentError$(object));
  object[key] = value;
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.ArgumentError$(null));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === "number"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.checkInt = function(value) {
  if (!(typeof value === "number" && Math.floor(value) === value))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.checkBool = function(value) {
  return value;
};

$.checkString = function(value) {
  if (!(typeof value === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.$$throw = function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.CONSTANT;
  wrapper = $.DartError$(ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.$$throw);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  return $.toString$0(this);
};

$.unwrapException = function(ex) {
  var message, type, $name, t1, ieErrorCode, ieFacilityNumber, t2;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    $name = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") === -1) {
      t1 = $.getInterceptor(type);
      t1 = t1.$eq(type, "property_not_function") === true || t1.$eq(type, "called_non_callable") === true || t1.$eq(type, "non_object_property_call") === true || t1.$eq(type, "non_object_property_load") === true;
    } else
      t1 = true;
    if (t1)
      return $.NoSuchMethodError$(null, $name, [], $.makeLiteralMap([]), null);
    else if ($.$eq(type, "undefined_method") === true)
      return $.NoSuchMethodError$("", $name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1)
      if (message === "null has no properties" || message === "'null' is not an object" || message === "'undefined' is not an object" || $.JSString_methods.endsWith$1(message, "is null") === true || $.JSString_methods.endsWith$1(message, "is undefined") === true || $.JSString_methods.endsWith$1(message, "is null or undefined") === true || $.JSString_methods.endsWith$1(message, "of undefined") === true || $.JSString_methods.endsWith$1(message, "of null") === true)
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    t1 = t1 ? message : "";
    return $._ExceptionImplementation$(t1);
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.JSArray_methods.get$iterator(keyValuePairs);
  result = $.LinkedHashMap$();
  for (; iterator.moveNext$0();) {
    key = iterator.get$current();
    iterator.moveNext$0();
    result.$indexSet(result, key, iterator.get$current());
  }
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if (t1.$eq(numberOfArguments, 1) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(closure, arg1, arg2));
  else
    throw $.$$throw($._ExceptionImplementation$("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($._currentIsolate(), $.invokeClosure.call$5);
  closure.$identity = $function;
  return $function;
};

$.setRuntimeTypeInfo = function(target, typeInfo) {
  if (!target.$eq(target, null))
    target.$builtinTypeInfo = typeInfo;
};

$.getRuntimeTypeInfo = function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
};

$.getRuntimeTypeArgument = function(target, substitution, index) {
  var $arguments = $.substitute(substitution, $.getRuntimeTypeInfo(target));
  return $arguments == null ? null : $arguments[index];
};

$.propertyTypeCastError = function(value, property) {
  var t1 = $.getInterceptor$asx(property);
  throw $.$$throw($.CastErrorImplementation$($.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
};

$.propertyTypeCast = function(value, property) {
  if (value == null || !!value[property])
    return value;
  $.propertyTypeCastError(value, property);
};

$.callTypeCast = function(value, property) {
  var t1;
  if (value != null)
    t1 = typeof value === "object" && value[property]();
  else
    t1 = true;
  if (t1)
    return value;
  $.propertyTypeCastError(value, property);
};

$.CastErrorImplementation$ = function(actualType, expectedType) {
  return new $.CastErrorImplementation("CastError: Casting value of type " + $.S(actualType) + " to" + " incompatible type " + expectedType);
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.getRuntimeTypeAsString = function(runtimeType) {
  var t1, className;
  t1 = $.getInterceptor$asx(runtimeType);
  className = t1.$index(runtimeType, 0).builtin$cls;
  if ($.$eq(t1.get$length(runtimeType), 1) === true)
    return className;
  return className + "<" + $.S($.joinArguments(runtimeType, 1)) + ">";
};

$.runtimeTypeToString = function(type) {
  var t1 = type == null;
  if (t1)
    return "dynamic";
  else if (!t1 && (type.constructor === Array))
    return $.getRuntimeTypeAsString(type);
  else
    return type.builtin$cls;
};

$.joinArguments = function(types, startIndex) {
  var buffer, index, firstArgument;
  if (typeof types !== "string" && (typeof types !== "object" || types === null || types.constructor !== Array && !types.$isJavaScriptIndexingBehavior()))
    return $.joinArguments$bailout(1, types, startIndex);
  buffer = $.StringBuffer$("");
  for (index = startIndex, firstArgument = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer.write$1(buffer, ", ");
    if (index < 0 || index >= types.length)
      throw $.ioore(index);
    buffer.write$1(buffer, $.runtimeTypeToString(types[index]));
  }
  return buffer.toString$0(buffer);
};

$.joinArguments$bailout = function(state0, types, startIndex) {
  var buffer, t1, index, firstArgument;
  buffer = $.StringBuffer$("");
  for (t1 = $.getInterceptor$asx(types), index = startIndex, firstArgument = true; $.JSNumber_methods.$lt(index, t1.get$length(types)); ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer.write$1(buffer, ", ");
    buffer.write$1(buffer, $.runtimeTypeToString(t1.$index(types, index)));
  }
  return buffer.toString$0(buffer);
};

$.substitute = function(substitution, $arguments) {
  if (substitution != null && (substitution.constructor === Array))
    $arguments = substitution;
  else if (typeof substitution == "function")
    $arguments = substitution.apply(null, $arguments);
  return $arguments;
};

$.checkArguments = function(substitution, $arguments, checks) {
  return $.areSubtypes($.substitute(substitution, $arguments), checks);
};

$.areSubtypes = function(s, t) {
  var len, i, t1;
  if (typeof s !== "string" && (typeof s !== "object" || s === null || s.constructor !== Array && !s.$isJavaScriptIndexingBehavior()))
    return $.areSubtypes$bailout(1, s, t);
  if (typeof t !== "string" && (typeof t !== "object" || t === null || t.constructor !== Array && !t.$isJavaScriptIndexingBehavior()))
    return $.areSubtypes$bailout(1, s, t);
  if (false)
    return true;
  len = s.length;
  for (i = 0; i < len; ++i) {
    if (i >= s.length)
      throw $.ioore(i);
    t1 = s[i];
    if (i >= t.length)
      throw $.ioore(i);
    if (!$.isSubtype(t1, t[i]))
      return false;
  }
  return true;
};

$.areSubtypes$bailout = function(state0, s, t) {
  var t1, len, t2, i;
  t1 = $.getInterceptor(s);
  if (s == null || t == null)
    return true;
  len = t1.get$length(s);
  for (t2 = $.getInterceptor$asx(t), i = 0; $.JSNumber_methods.$lt(i, len); ++i)
    if (!$.isSubtype(t1.$index(s, i), t2.$index(t, i)))
      return false;
  return true;
};

$.objectIsSubtype = function(o, t) {
  var rti, type;
  if (o == null || t == null)
    return true;
  rti = $.getRuntimeTypeInfo(o);
  o = $.getInterceptor(o);
  if (rti != null) {
    type = rti.slice();
    type.splice(0, 0, o);
  } else
    type = o;
  return $.isSubtype(type, t);
};

$.isSubtype = function(s, t) {
  var t1, typeOfS, t2, typeOfT, substitution, t3;
  if (s == null || t == null)
    return true;
  if (s === t)
    return true;
  t1 = s != null;
  typeOfS = t1 && (s.constructor === Array) ? $.$index$asx(s, 0) : s;
  t2 = t != null;
  typeOfT = t2 && (t.constructor === Array) ? $.$index$asx(t, 0) : t;
  if (typeOfS["$is" + $.runtimeTypeToString(typeOfT)] == null)
    return false;
  substitution = typeOfT !== typeOfS ? typeOfS["$as" + $.runtimeTypeToString(typeOfT)] : null;
  if (!(!(t1 && (s.constructor === Array)) && substitution == null))
    t3 = !(t2 && (t.constructor === Array));
  else
    t3 = true;
  if (t3)
    return true;
  t1 = t1 && (s.constructor === Array) ? s.slice(1) : null;
  return $.checkArguments(substitution, t1, t2 && (t.constructor === Array) ? t.slice(1) : null);
};

$._convertJsonToDart = function(json, reviver) {
  var revive = reviver == null ? new $._convertJsonToDart_anon() : reviver;
  return revive.call$2("", new $._convertJsonToDart_walk(revive).call$1(json));
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var $name = tag;
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "WebKitMutationObserver")
    return "MutationObserver";
  if ($name === "AudioChannelMerger")
    return "ChannelMergerNode";
  if ($name === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if ($name === "AudioGainNode")
    return "GainNode";
  if ($name === "AudioPannerNode")
    return "PannerNode";
  if ($name === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if ($name === "Oscillator")
    return "OscillatorNode";
  if ($name === "RealtimeAnalyserNode")
    return "AnalyserNode";
  if ($name === "IDBVersionChangeRequest")
    return "IDBOpenDBRequest";
  return $name;
};

$.typeNameInOpera = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  return $name;
};

$.typeNameInFirefox = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "CSS2Properties")
    return "CSSStyleDeclaration";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "MouseScrollEvent")
    return "WheelEvent";
  if ($name === "OfflineResourceList")
    return "DOMApplicationCache";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
};

$.typeNameInIE = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if ($name === "MouseWheelEvent")
    return "WheelEvent";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && (obj instanceof window.DataView))
      return "DataView";
  return $name;
};

$.constructorNameFallback = function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof($constructor) === "function") {
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.callHasOwnProperty = function($function, object, property) {
  return $function.call(object, property);
};

$.getFunctionForTypeNameOf = function() {
  if (typeof(navigator) !== "object")
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.toStringForNativeObject = function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, $name, methods, $arguments) {
  var hasOwnPropertyFunction, tag, method, secondTag, proto;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  if (!$.isDartObject(obj)) {
    tag = $.getTypeNameOf(obj);
    method = $.dynamicBindLookup(hasOwnPropertyFunction, tag, methods);
    if (method == null) {
      secondTag = $.alternateTag(obj, tag);
      if (secondTag != null)
        method = $.dynamicBindLookup(hasOwnPropertyFunction, secondTag, methods);
    }
  } else
    method = null;
  if (method == null)
    method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, $.getTypeNameOf($.CONSTANT46));
  if (method == null)
    (function(){throw new TypeError($name + " is not a function");})();
  else {
    proto = Object.getPrototypeOf(obj);
    if (!$.callHasOwnProperty(hasOwnPropertyFunction, proto, $name))
      $.defineProperty(proto, $name, method);
  }
  return method.apply(obj, $arguments);
};

$.isDartObject = function(obj) {
  return ((obj) instanceof ($.Object));
};

$.dynamicBindLookup = function(hasOwnPropertyFunction, tag, methods) {
  var method, i, entry;
  method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, tag);
  if (method == null && $._dynamicMetadata0() != null)
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if ($.callHasOwnProperty(hasOwnPropertyFunction, entry.get$_set(), tag)) {
        method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, entry.get$_tag());
        if (method != null)
          break;
      }
    }
  return method;
};

$.lookupDynamicClass = function(hasOwnPropertyFunction, methods, className) {
  return $.callHasOwnProperty(hasOwnPropertyFunction, methods, className) ? methods[className] : null;
};

$.dynamicFunction = function($name) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[$name];
  if (f != null && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CONSTANT46)[$name];
  if (dartMethod != null)
    methods["Object"] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, $name, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, $name, bind);
  return methods;
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === "undefined")
    $._dynamicMetadata([]);
  return $dynamicMetadata;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = tags.split("|");
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.JSSyntaxRegExp$ = function(pattern, caseSensitive, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, caseSensitive, $.JSSyntaxRegExp_makeNative(pattern, multiLine, caseSensitive, false));
};

$.JSSyntaxRegExp$_globalVersionOf = function(other) {
  var t1, t2, t3;
  t1 = $.get$pattern$x(other);
  t2 = other.get$isMultiLine();
  t3 = other.get$isCaseSensitive();
  return new $.JSSyntaxRegExp(t1, t2, t3, $.JSSyntaxRegExp_makeNative(t1, t2, t3, true));
};

$.JSSyntaxRegExp_makeNative = function(pattern, multiLine, caseSensitive, global) {
  var m, i, g, regexp, errorMessage;
  $.checkString(pattern);
  m = multiLine === true ? "m" : "";
  i = caseSensitive === true ? "" : "i";
  g = global ? "g" : "";
  regexp = (function() {try {return new RegExp(pattern, m + i + g);} catch (e) {return e;}})();
  if (regexp instanceof RegExp)
    return regexp;
  errorMessage = String(regexp);
  throw $.$$throw($.FormatException$("Illegal RegExp pattern: " + $.S(pattern) + ", " + errorMessage));
};

$._MatchImplementation$ = function(pattern, str, start, end, _groups) {
  return new $._MatchImplementation(pattern, str, start, end, _groups);
};

$._AllMatchesIterable$ = function(_re, _str) {
  return new $._AllMatchesIterable(_re, _str);
};

$._AllMatchesIterator$ = function(re, _str) {
  return new $._AllMatchesIterator($.JSSyntaxRegExp$_globalVersionOf(re), _str, null);
};

$.StringMatch$ = function(start, str, pattern) {
  return new $.StringMatch(start, str, pattern);
};

$.allMatchesInStringUnchecked = function(needle, haystack) {
  var result, $length, patternLength, startIndex, position, endIndex;
  result = $.List_List($);
  $length = haystack.length;
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = $.JSString_methods.indexOf$2(haystack, needle, startIndex);
    if (position === -1)
      break;
    result.push($.StringMatch$(position, haystack, needle));
    endIndex = position + patternLength;
    if (endIndex === $length)
      break;
    else
      startIndex = position === endIndex ? startIndex + 1 : endIndex;
  }
  return result;
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  if (typeof other === "string")
    return $.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
  else if (typeof other === "object" && other !== null && !!other.$isJSSyntaxRegExp)
    return other.hasMatch$1($.JSString_methods.substring$1(receiver, startIndex));
  else
    return $.get$iterator$ax($.allMatches$1$s(other, $.JSString_methods.substring$1(receiver, startIndex))).moveNext$0();
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace("$", "$$$$"));
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, $length, i;
  $.checkString(to);
  if (typeof from === "string")
    if (from === "")
      if (receiver === "")
        return to;
      else {
        result = $.StringBuffer$("");
        $length = receiver.length;
        result.write$1(result, to);
        for (i = 0; i < $length; ++i) {
          if (i >= receiver.length)
            throw $.ioore(i);
          result.write$1(result, receiver[i]);
          result.write$1(result, to);
        }
        return result.toString$0(result);
      }
    else
      return $.stringReplaceJS(receiver, new RegExp(from.replace(new RegExp("[-[\\]{}()*+?.,\\\\^$|#\\s]", 'g'), "\\$&"), 'g'), to);
  else if (typeof from === "object" && from !== null && !!from.$isJSSyntaxRegExp)
    return $.stringReplaceJS(receiver, $.JSSyntaxRegExp$_globalVersionOf(from)._nativeRegExp, to);
  else {
    $.checkNull(from);
    throw $.$$throw("String.replaceAll(Pattern) UNIMPLEMENTED");
  }
};

$.AsyncError$ = function(error, stackTrace) {
  return new $.AsyncError(error, stackTrace, null);
};

$.AsyncError$withCause = function(error, stackTrace, cause) {
  return new $.AsyncError(error, stackTrace, cause);
};

$.Future_Future$immediateError = function(error, stackTrace) {
  return $._FutureImpl$immediateError(error, stackTrace);
};

$.Completer_Completer = function() {
  return $._CompleterImpl$();
};

$._CompleterImpl$ = function() {
  return new $._CompleterImpl($._FutureImpl$(), false);
};

$._FutureListenerWrapper$ = function(future) {
  return new $._FutureListenerWrapper(future, null);
};

$._FutureImpl$ = function() {
  return new $._FutureImpl(0, null);
};

$._FutureImpl$immediate = function(value) {
  var t1 = new $._FutureImpl(0, null);
  t1._FutureImpl$immediate$1(value);
  return t1;
};

$._FutureImpl$immediateError = function(error, stackTrace) {
  var t1 = new $._FutureImpl(0, null);
  t1._FutureImpl$immediateError$2(error, stackTrace);
  return t1;
};

$._FutureImpl__FutureImpl$wait = function(futures) {
  var t1, t2, t3, t4, pos;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new $._FutureImpl__FutureImpl$wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = $.JSArray_methods.get$iterator(futures); t3.moveNext$0();) {
    t4 = t3.get$current();
    pos = t1.remaining_2;
    t1.remaining_2 = $.$add$ns(pos, 1);
    t4.catchError$1(t2).then$1(new $._FutureImpl__FutureImpl$wait_anon(t1, pos));
  }
  if ($.$eq(t1.remaining_2, 0) === true)
    return $._FutureImpl$immediate($.CONSTANT0);
  t1.values_1 = $.List_List(t1.remaining_2);
  t1.completer_0 = $._CompleterImpl$();
  return t1.completer_0.future;
};

$._ThenFuture$ = function(_onValue) {
  return new $._ThenFuture(_onValue, null, 0, null);
};

$._CatchErrorFuture$ = function(_onError, _test) {
  return new $._CatchErrorFuture(_test, _onError, null, 0, null);
};

$._SubscribeFuture$ = function(onValue, _onError) {
  return new $._SubscribeFuture(_onError, onValue, null, 0, null);
};

$._WhenFuture$ = function(_action) {
  return new $._WhenFuture(_action, null, 0, null);
};

$._FutureWrapper$ = function(_future) {
  return new $._FutureWrapper(_future);
};

$._nullDataHandler = function(value) {
};

$._nullErrorHandler = function(error) {
  error.throwDelayed$0();
};

$._nullDoneHandler = function() {
};

$._asyncError = function(error, stackTrace, cause) {
  if (typeof error === "object" && error !== null && !!error.$isAsyncError)
    return error;
  if (cause == null)
    return $.AsyncError$(error, stackTrace);
  return $.AsyncError$withCause(error, stackTrace, cause);
};

$._runUserCode = function(userCode, onSuccess, onError, cause) {
  var result, e, e0, s, exception, t1;
  result = null;
  try {
    result = userCode.call$0();
  } catch (exception) {
    t1 = $.unwrapException(exception);
    if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
      e = t1;
      return onError.call$1(e);
    } else {
      e0 = t1;
      s = $.getTraceFromException(exception);
      if (cause == null)
        onError.call$1($.AsyncError$(e0, s));
      else
        onError.call$1($.AsyncError$withCause(e0, s, cause));
    }
  }

  onSuccess.call$1(result);
};

$._cancelAndError = function(subscription, future) {
  return new $._cancelAndError_anon(subscription, future);
};

$._ForwardingStreamSubscription$ = function(_stream, onData, onError, onDone, _unsubscribeOnError) {
  var t1 = new $._ForwardingStreamSubscription(_stream, _unsubscribeOnError, null, onData, onError, onDone);
  t1._BaseStreamSubscription$3(onData, onError, onDone);
  t1._ForwardingStreamSubscription$5(_stream, onData, onError, onDone, _unsubscribeOnError);
  return t1;
};

$._WhereStream$ = function(source, test) {
  return new $._WhereStream(test, source);
};

$._MapStream$ = function(source, transform) {
  return new $._MapStream(transform, source);
};

$.Timer_Timer = function(duration, callback) {
  var milliseconds = duration.get$inMilliseconds();
  if ($.$lt$n(milliseconds, 0) === true)
    milliseconds = 0;
  return $.TimerImpl$(milliseconds, callback);
};

$.Timer_run = function(callback) {
  $.add$1$ax($.get$Timer__runCallbacks(), callback);
  if ($.$eq($.get$length$asx($.get$Timer__runCallbacks()), 1) === true)
    $.Timer_Timer($.CONSTANT1, new $.Timer_run_anon());
};

$.IterableMixinWorkaround_contains = function(iterable, element) {
  var t1, t2;
  for (t1 = $.get$iterator$ax(iterable), t2 = $.getInterceptor(element); t1.moveNext$0() === true;)
    if (t2.$eq(element, t1.get$current()) === true)
      return true;
  return false;
};

$.IterableMixinWorkaround_removeAll = function(collection, elementsToRemove) {
  var t1;
  for (t1 = $.JSArray_methods.get$iterator(elementsToRemove); t1.moveNext$0();)
    collection.remove$1(collection, t1.get$current());
};

$.IterableMixinWorkaround_removeAllList = function(collection, elementsToRemove) {
  collection.removeWhere$1(collection, $.get$contains$asx($.JSArray_methods.toSet$0(elementsToRemove)));
};

$.IterableMixinWorkaround_removeWhere = function(collection, test) {
  var elementsToRemove, t1, t2;
  elementsToRemove = [];
  for (t1 = collection.get$iterator(collection); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    if (test.call$1(t2) === true)
      elementsToRemove.push(t2);
  }
  collection.removeAll$1(collection, elementsToRemove);
};

$.IterableMixinWorkaround_setRangeList = function(list, start, $length, from, startFrom) {
  var t1 = $.getInterceptor($length);
  if (t1.$eq($length, 0) === true)
    return;
  if (t1.$lt($length, 0) === true)
    throw $.$$throw($.ArgumentError$($length));
  t1 = $.getInterceptor$n(start);
  if (t1.$lt(start, 0) === true)
    throw $.$$throw($.RangeError$value(start));
  if ($.$gt$n(t1.$add(start, $length), list.length) === true)
    throw $.$$throw($.RangeError$value(t1.$add(start, $length)));
  $.Arrays_copy(from, startFrom, list, start, $length);
};

$._HashMapTable$ = function() {
  var t1 = new $._HashMapTable(null, 8, 0, 0, 0, null);
  t1._HashTable$1(8);
  return t1;
};

$.HashMap$ = function() {
  var t1 = new $.HashMap($._HashMapTable$());
  t1.HashMap$0();
  return t1;
};

$.HashSet$ = function() {
  var t1 = new $.HashSet($._HashTable$(8));
  t1.HashSet$0();
  return t1;
};

$._HashTable$ = function(initialCapacity) {
  var t1 = new $._HashTable(null, initialCapacity, 0, 0, 0, null);
  t1._HashTable$1(initialCapacity);
  return t1;
};

$._HashTableKeyIterable$ = function(hashTable) {
  return new $._HashTableKeyIterable(hashTable);
};

$._HashTableKeyIterator$ = function(hashTable) {
  return new $._HashTableKeyIterator(hashTable, hashTable._modificationCount, 0, null);
};

$._HashTableValueIterable$ = function(hashTable, _entryIndex) {
  return new $._HashTableValueIterable(_entryIndex, hashTable);
};

$._HashTableValueIterator$ = function(hashTable, _entryIndex) {
  return new $._HashTableValueIterator(_entryIndex, hashTable, hashTable.get$_modificationCount(), 0, null);
};

$._LinkedHashMapTable$ = function() {
  var t1 = new $._LinkedHashMapTable(null, 8, 0, 0, 0, null);
  t1._HashTable$1(8);
  return t1;
};

$.LinkedHashMap$ = function() {
  var t1 = new $.LinkedHashMap($._LinkedHashMapTable$());
  t1.LinkedHashMap$0();
  return t1;
};

$.LinkedHashSet$ = function() {
  var t1 = new $.LinkedHashSet($._LinkedHashTable$(8));
  t1.LinkedHashSet$0();
  return t1;
};

$._LinkedHashTable$ = function(initialCapacity) {
  var t1 = new $._LinkedHashTable(null, initialCapacity, 0, 0, 0, null);
  t1._HashTable$1(initialCapacity);
  return t1;
};

$._LinkedHashTableKeyIterable$ = function(_table) {
  return new $._LinkedHashTableKeyIterable(_table);
};

$._LinkedHashTableKeyIterator$ = function(hashTable) {
  return new $._LinkedHashTableKeyIterator(hashTable, hashTable.get$_modificationCount(), hashTable._next$1(0), null);
};

$._LinkedHashTableValueIterable$ = function(_hashTable, _valueIndex) {
  return new $._LinkedHashTableValueIterable(_hashTable, _valueIndex);
};

$._LinkedHashTableValueIterator$ = function(hashTable, _valueIndex) {
  return new $._LinkedHashTableValueIterator(_valueIndex, hashTable, hashTable.get$_modificationCount(), hashTable._next$1(0), null);
};

$.Queue_Queue = function() {
  return $.ListQueue$(null);
};

$.ListQueue$ = function(initialCapacity) {
  var t1 = new $.ListQueue(null, 0, 0, 0);
  t1.ListQueue$1(initialCapacity);
  return t1;
};

$.ListQueue__isPowerOf2 = function(number) {
  var t1 = $.getInterceptor$n(number);
  return t1.$and(number, t1.$sub(number, 1)) === 0;
};

$.ListQueue__nextPowerOf2 = function(number) {
  var number0, nextNumber;
  number0 = $.$shl$n(number, 2) - 1;
  for (number = number0; true; number = nextNumber) {
    nextNumber = (number & number - 1) >>> 0;
    if (nextNumber === 0)
      return number;
  }
};

$._ListQueueIterator$ = function(queue) {
  return new $._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, null);
};

$._SplayTreeNode$ = function(key) {
  return new $._SplayTreeNode(key, null, null);
};

$._SplayTreeMapNode$ = function(key, value) {
  return new $._SplayTreeMapNode(value, key, null, null);
};

$.SplayTreeMap$ = function(compare, K, V) {
  var t1 = compare == null ? $.Comparable_compare : compare;
  t1 = new $.SplayTreeMap(t1, null, $._SplayTreeNode$(null), 0, 0, 0);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$._SplayTreeKeyIterable$ = function(_tree) {
  return new $._SplayTreeKeyIterable(_tree);
};

$._SplayTreeValueIterable$ = function(_map) {
  return new $._SplayTreeValueIterable(_map);
};

$._SplayTreeKeyIterator$ = function(map) {
  var t1 = new $._SplayTreeKeyIterator(map, [], map.get$_modificationCount(), map.get$_splayCount(), null);
  t1._SplayTreeIterator$1(map);
  return t1;
};

$._SplayTreeValueIterator$ = function(map) {
  var t1 = new $._SplayTreeValueIterator(map, [], map.get$_modificationCount(), map.get$_splayCount(), null);
  t1._SplayTreeIterator$1(map);
  return t1;
};

$._SplayTreeNodeIterator$ = function(map) {
  var t1 = new $._SplayTreeNodeIterator(map, [], map._modificationCount, map._splayCount, null);
  t1._SplayTreeIterator$1(map);
  return t1;
};

$.Comparable_compare = function(a, b) {
  return $.compareTo$1$ns(a, b);
};

$.DateTime_parse = function(formattedString) {
  var match, t1, t2, years, month, day, hour, minute, second, millisecond, addOneMillisecond, isUtc, millisecondsSinceEpoch;
  match = $.RegExp_RegExp("^([+-]?\\d?\\d\\d\\d\\d)-?(\\d\\d)-?(\\d\\d)(?:[ T](\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(.\\d{1,6})?)?)? ?([zZ])?)?$", true, false).firstMatch$1(formattedString);
  if (match != null) {
    t1 = new $.DateTime_parse_parseIntOrZero();
    t2 = new $.DateTime_parse_parseDoubleOrZero();
    years = $.int_parse(match.$index(match, 1), null, null);
    month = $.int_parse(match.$index(match, 2), null, null);
    day = $.int_parse(match.$index(match, 3), null, null);
    hour = t1.call$1(match.$index(match, 4));
    minute = t1.call$1(match.$index(match, 5));
    second = t1.call$1(match.$index(match, 6));
    millisecond = $.round$0$nx($.$mul$n(t2.call$1(match.$index(match, 7)), 1000));
    if ($.$eq(millisecond, 1000) === true) {
      addOneMillisecond = true;
      millisecond = 999;
    } else
      addOneMillisecond = false;
    isUtc = match.$index(match, 8) != null && $.$eq(match.$index(match, 8), "") !== true;
    millisecondsSinceEpoch = $.DateTime__brokenDownDateToMillisecondsSinceEpoch(years, month, day, hour, minute, second, millisecond, isUtc);
    if (millisecondsSinceEpoch == null)
      throw $.$$throw($.ArgumentError$(formattedString));
    if (addOneMillisecond)
      millisecondsSinceEpoch = $.$add$ns(millisecondsSinceEpoch, 1);
    return $.DateTime$fromMillisecondsSinceEpoch(millisecondsSinceEpoch, isUtc);
  } else
    throw $.$$throw($.ArgumentError$(formattedString));
};

$.DateTime$fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, isUtc) {
  var t1 = new $.DateTime(millisecondsSinceEpoch, isUtc);
  t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
  return t1;
};

$.DateTime$_now = function() {
  var t1 = new $.DateTime($.Primitives_dateNow(), false);
  t1.DateTime$_now$0();
  return t1;
};

$.DateTime__brokenDownDateToMillisecondsSinceEpoch = function(year, month, day, hour, minute, second, millisecond, isUtc) {
  return $.Primitives_valueFromDecomposedDate(year, month, day, hour, minute, second, millisecond, isUtc);
};

$.double_parse = function(source, handleError) {
  return $.Primitives_parseDouble(source, handleError);
};

$.Duration$ = function(days, hours, microseconds, milliseconds, minutes, seconds) {
  return new $.Duration($.$add$ns($.$add$ns($.$add$ns($.$add$ns($.$add$ns($.$mul$n(days, 86400000000), $.$mul$n(hours, 3600000000)), $.$mul$n(minutes, 60000000)), $.$mul$n(seconds, 1000000)), $.$mul$n(milliseconds, 1000)), microseconds));
};

$.Error_safeToString = function(object) {
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString$0(object);
  if (typeof object === "string")
    return "\"" + $.S($.replaceAll$2$s($.replaceAll$2$s($.replaceAll$2$s($.JSString_methods.replaceAll$2(object, "\\", "\\\\"), "\n", "\\n"), "\r", "\\r"), "\"", "\\\"")) + "\"";
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$ = function(message) {
  return new $.RangeError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.RangeError$range = function(value, start, end) {
  return new $.RangeError("value " + $.S(value) + " not in range " + $.S(start) + ".." + $.S(end));
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.ConcurrentModificationError$ = function(modifiedObject) {
  return new $.ConcurrentModificationError(modifiedObject);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$.IntegerDivisionByZeroException$ = function() {
  return new $.IntegerDivisionByZeroException();
};

$.Expando$ = function($name) {
  return new $.Expando($name);
};

$.int_parse = function(source, onError, radix) {
  return $.Primitives_parseInt(source, radix, onError);
};

$.List_List = function($length) {
  var t1 = $ === $length;
  if (t1)
    $length = null;
  if (t1)
    return new Array(0);
  if (!(typeof $length === "number" && Math.floor($length) === $length) || $length < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  return $.Primitives_newFixedList($length);
};

$.List_List$from = function(other, growable) {
  var list, t1, $length, fixedList, i;
  list = $.List_List($);
  for (t1 = $.get$iterator$ax(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  if (growable === true)
    return list;
  $length = list.length;
  fixedList = $.List_List($length);
  for (t1 = list.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    fixedList[i] = list[i];
  }
  return fixedList;
};

$.Map_Map = function() {
  return $.HashMap$();
};

$.Map_Map$from = function(other) {
  var t1 = $.HashMap$();
  t1.addAll$1(t1, other);
  return t1;
};

$.Object$ = function() {
  return new $.Object();
};

$.print = function(object) {
  $.Primitives_printString(object);
};

$.RegExp_RegExp = function(pattern, caseSensitive, multiLine) {
  return $.JSSyntaxRegExp$(pattern, caseSensitive, multiLine);
};

$.StringBuffer$ = function($content) {
  var t1 = new $.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
};

$.window = function() {
  return window;
};

$.document = function() {
  return document;
};

$.query = function(selector) {
  return $.query$1$x(document, selector);
};

$.DocumentFragment_DocumentFragment$html = function(html) {
  return $._DocumentFragmentFactoryProvider_createDocumentFragment_html(html);
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, $.get$$$dom_children$x(element));
};

$._FrozenElementList$_wrap = function(_nodeList) {
  return new $._FrozenElementList(_nodeList);
};

$._FrozenElementListIterator$ = function(_list) {
  return new $._FrozenElementListIterator(_list, -1, null);
};

$._ElementCssClassSet$ = function(_element) {
  return new $._ElementCssClassSet(_element);
};

$.Element_Element$tag = function(tag) {
  return $._ElementFactoryProvider_createElement_tag(tag);
};

$._ElementFactoryProvider_createElement_html = function(html) {
  var match, tag, parentTag, temp, t1, element;
  match = $.get$_START_TAG_REGEXP().firstMatch$1(html);
  if (match != null) {
    tag = $.toLowerCase$0$s(match.group$1(1));
    if ($.Device_isIE() === true && $.CONSTANT24.containsKey$1($.CONSTANT24, tag))
      return $._ElementFactoryProvider__createTableForIE(html, tag);
    parentTag = $.CONSTANT25.$index($.CONSTANT25, tag);
    if (parentTag == null)
      parentTag = "div";
  } else {
    parentTag = "div";
    tag = null;
  }
  temp = $._ElementFactoryProvider_createElement_tag(parentTag);
  t1 = $.getInterceptor$x(temp);
  t1.set$innerHtml(temp, html);
  if ($.$eq($.get$length$asx(t1.get$children(temp)), 1) === true)
    element = $.$index$asx(t1.get$children(temp), 0);
  else if ($.$eq(parentTag, "html") === true && $.$eq($.get$length$asx(t1.get$children(temp)), 2) === true) {
    t1 = t1.get$children(temp);
    element = $.$index$asx(t1, tag === "head" ? 0 : 1);
  } else {
    $._ElementFactoryProvider__singleNode(t1.get$children(temp));
    element = null;
  }
  $.remove$0$ax(element);
  return element;
};

$._ElementFactoryProvider__createTableForIE = function(html, tag) {
  var div, t1, table, element;
  div = $._ElementFactoryProvider_createElement_tag("div");
  t1 = $.getInterceptor$x(div);
  t1.set$innerHtml(div, "<table>" + $.S(html) + "</table>");
  table = $._ElementFactoryProvider__singleNode(t1.get$children(div));
  element = null;
  switch (tag) {
    case "td":
    case "th":
      element = $._ElementFactoryProvider__singleNode($.get$cells$x($._ElementFactoryProvider__singleNode($.get$rows$x(table))));
      break;
    case "tr":
      element = $._ElementFactoryProvider__singleNode($.get$rows$x(table));
      break;
    case "tbody":
      element = $._ElementFactoryProvider__singleNode($.get$tBodies$x(table));
      break;
    case "thead":
      element = $.get$tHead$x(table);
      break;
    case "tfoot":
      element = $.get$tFoot$x(table);
      break;
    case "caption":
      element = $.get$caption$x(table);
      break;
    case "colgroup":
      element = $._ElementFactoryProvider__getColgroup(table);
      break;
    case "col":
      element = $._ElementFactoryProvider__singleNode($.get$children$x($._ElementFactoryProvider__getColgroup(table)));
      break;
  }
  $.remove$0$ax(element);
  return element;
};

$._ElementFactoryProvider__getColgroup = function(table) {
  return $._ElementFactoryProvider__singleNode($.toList$0$ax($.where$1$ax($.get$children$x(table), new $._ElementFactoryProvider__getColgroup_anon())));
};

$._ElementFactoryProvider__singleNode = function(list) {
  var t1 = $.getInterceptor$asx(list);
  if ($.$eq(t1.get$length(list), 1) === true)
    return t1.$index(list, 0);
  throw $.$$throw($.ArgumentError$("HTML had " + $.S(t1.get$length(list)) + " " + "top level elements but 1 expected"));
};

$._ElementFactoryProvider_createElement_tag = function(tag) {
  return document.createElement(tag);
};

$.Event_Event = function(type, canBubble, cancelable) {
  return $.Event_Event$eventType("Event", type, canBubble, canBubble);
};

$.Event_Event$eventType = function(type, $name, canBubble, cancelable) {
  var e = $.$$dom_createEvent$1$x(document, type);
  $.$$dom_initEvent$3$x(e, $name, canBubble, cancelable);
  return e;
};

$.HttpRequest_getString = function(url, onProgress, withCredentials) {
  return $.HttpRequest_request(url, null, onProgress, null, null, withCredentials).then$1(new $.HttpRequest_getString_anon());
};

$.HttpRequest_request = function(url, method, onProgress, responseType, sendData, withCredentials) {
  var completer, xhr, t1;
  completer = $._CompleterImpl$();
  xhr = new XMLHttpRequest();
  if (method == null)
    method = "GET";
  t1 = $.getInterceptor$x(xhr);
  t1.open$3$async(xhr, method, url, true);
  if (withCredentials != null)
    t1.set$withCredentials(xhr, withCredentials);
  if (responseType != null)
    t1.set$responseType(xhr, responseType);
  if (onProgress != null)
    t1.get$onProgress(xhr).listen$1(onProgress);
  t1.get$onLoad(xhr).listen$1(new $.HttpRequest_request_anon(completer, xhr));
  t1.get$onError(xhr).listen$1(new $.HttpRequest_request_anon0(completer));
  if (sendData != null)
    t1.send$1(xhr, sendData);
  else
    t1.send$0(xhr);
  return completer.future;
};

$.InputElement_InputElement = function(type) {
  var e, exception;
  e = $.$$dom_createElement$1$x(document, "input");
  if (type != null)
    try {
      $.set$type$x(e, type);
    } catch (exception) {
      $.unwrapException(exception);
    }

  return e;
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$.OptionElement_OptionElement = function(data, value, defaultSelected, selected) {
  var t1, t2, t3, t4;
  t1 = $ === data;
  if (t1)
    data = null;
  t2 = $ === value;
  if (t2)
    value = null;
  t3 = $ === defaultSelected;
  if (t3)
    defaultSelected = null;
  t4 = $ === selected;
  if (t4)
    selected = null;
  if (!t4)
    return $.OptionElement__create_1(data, value, defaultSelected, selected);
  if (!t3)
    return $.OptionElement__create_2(data, value, defaultSelected);
  if (!t2)
    return new Option(data,value);
  if (!t1)
    return new Option(data);
  return new Option();
};

$.OptionElement__create_1 = function(data, value, defaultSelected, selected) {
  return new Option(data,value,defaultSelected,selected);
};

$.OptionElement__create_2 = function(data, value, defaultSelected) {
  return new Option(data,value,defaultSelected);
};

$.ShadowRoot_supported = function() {
  return !!(Element.prototype.webkitCreateShadowRoot);
};

$._ElementAttributeMap$ = function(element) {
  return new $._ElementAttributeMap(element);
};

$._DataAttributeMap$ = function($$dom_attributes) {
  return new $._DataAttributeMap($$dom_attributes);
};

$._EventStream$ = function(_target, _eventType, _useCapture) {
  return new $._EventStream(_target, _eventType, _useCapture);
};

$._EventStreamSubscription$ = function(_target, _eventType, _onData, _useCapture) {
  var t1 = new $._EventStreamSubscription(0, _target, _eventType, _onData, _useCapture);
  t1._EventStreamSubscription$4(_target, _eventType, _onData, _useCapture);
  return t1;
};

$.Rect$ = function(left, $top, width, height) {
  return new $.Rect(left, $top, width, height);
};

$._WrappedList$ = function(_list) {
  return new $._WrappedList(_list);
};

$._WrappedIterator$ = function(_iterator) {
  return new $._WrappedIterator(_iterator);
};

$._DocumentFragmentFactoryProvider_createDocumentFragment_html = function(html) {
  var fragment = $.createDocumentFragment$0$x(document);
  $.set$innerHtml$x(fragment, html);
  return fragment;
};

$._convertNativeToDart_Window = function(win) {
  return $._DOMWindowCrossFrame__createSafe(win);
};

$._convertNativeToDart_EventTarget = function(e) {
  if ("setInterval" in e)
    return $._DOMWindowCrossFrame__createSafe(e);
  else
    return e;
};

$._DOMWindowCrossFrame$ = function(_window) {
  return new $._DOMWindowCrossFrame(_window);
};

$._DOMWindowCrossFrame__createSafe = function(w) {
  if (w === window)
    return w;
  else
    return $._DOMWindowCrossFrame$(w);
};

$.FixedSizeListIterator$ = function(array) {
  return new $.FixedSizeListIterator(array, $.get$length$asx(array), -1, null);
};

$.convertNativeToDart_Dictionary = function(object) {
  var dict, t1, t2;
  if (object == null)
    return;
  dict = $.makeLiteralMap([]);
  for (t1 = $.JSArray_methods.get$iterator(Object.getOwnPropertyNames(object)); t1.moveNext$0();) {
    t2 = t1.get$current();
    dict.$indexSet(dict, t2, object[t2]);
  }
  return dict;
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var copies, t1, t2, t3, t4, copy;
  copies = [];
  t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot([], copies);
  t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t1, t2, t3).call$1(value);
  t4.call$0();
  return copy;
};

$.convertNativeToDart_AcceptStructuredClone = function(object, mustCopy) {
  var copies = [];
  return new $.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new $.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new $.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new $.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
};

$.Device_userAgent = function() {
  return $.get$userAgent$x($.get$navigator$x($.window()));
};

$.Device_isOpera = function() {
  if ($.Device__isOpera == null)
    $.Device__isOpera = $.contains$2$asx($.Device_userAgent(), "Opera", 0);
  return $.Device__isOpera;
};

$.Device_isIE = function() {
  if ($.Device__isIE == null)
    $.Device__isIE = $.Device_isOpera() !== true && $.contains$2$asx($.Device_userAgent(), "MSIE", 0) === true;
  return $.Device__isIE;
};

$.Device_isFirefox = function() {
  if ($.Device__isFirefox == null)
    $.Device__isFirefox = $.contains$2$asx($.Device_userAgent(), "Firefox", 0);
  return $.Device__isFirefox;
};

$.Device_isWebKit = function() {
  if ($.Device__isWebKit == null)
    $.Device__isWebKit = $.Device_isOpera() !== true && $.contains$2$asx($.Device_userAgent(), "WebKit", 0) === true;
  return $.Device__isWebKit;
};

$.Device_cssPrefix = function() {
  if ($.Device__cachedCssPrefix == null)
    if ($.Device_isFirefox() === true)
      $.Device__cachedCssPrefix = "-moz-";
    else if ($.Device_isIE() === true)
      $.Device__cachedCssPrefix = "-ms-";
    else if ($.Device_isOpera() === true)
      $.Device__cachedCssPrefix = "-o-";
    else
      $.Device__cachedCssPrefix = "-webkit-";
  return $.Device__cachedCssPrefix;
};

$.FilteredElementList$ = function(node) {
  return new $.FilteredElementList(node, $.get$nodes$x(node));
};

$.Lists_getRange = function(a, start, end, accumulator) {
  var i;
  if (typeof a !== "string" && (typeof a !== "object" || a === null || a.constructor !== Array && !a.$isJavaScriptIndexingBehavior()))
    return $.Lists_getRange$bailout(1, a, start, end, accumulator);
  if (typeof start !== "number")
    return $.Lists_getRange$bailout(1, a, start, end, accumulator);
  if (typeof end !== "number")
    return $.Lists_getRange$bailout(1, a, start, end, accumulator);
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  if (end < start)
    throw $.$$throw($.RangeError$value(end));
  if (end > a.length)
    throw $.$$throw($.RangeError$value(end));
  for (i = start; i < end; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    accumulator.push(a[i]);
  }
  return accumulator;
};

$.Lists_getRange$bailout = function(state0, a, start, end, accumulator) {
  var t1, t2, i;
  if ($.$lt$n(start, 0) === true)
    throw $.$$throw($.RangeError$value(start));
  t1 = $.getInterceptor$n(end);
  if (t1.$lt(end, start) === true)
    throw $.$$throw($.RangeError$value(end));
  t2 = $.getInterceptor$asx(a);
  if (t1.$gt(end, t2.get$length(a)) === true)
    throw $.$$throw($.RangeError$value(end));
  for (i = start; t1 = $.getInterceptor$n(i), t1.$lt(i, end) === true; i = t1.$add(i, 1))
    accumulator.push(t2.$index(a, i));
  return accumulator;
};

$._convertNativeToDart_IDBAny = function(object) {
  return $.convertNativeToDart_AcceptStructuredClone(object, false);
};

$._completeRequest = function(request) {
  var completer, t1;
  completer = $._CompleterImpl$();
  t1 = $.getInterceptor$x(request);
  t1.get$onSuccess(request).listen$1(new $._completeRequest_anon(request, completer));
  t1.get$onError(request).listen$1(new $._completeRequest_anon0(completer));
  return completer.future;
};

$.ReceivePort_ReceivePort = function() {
  return $.ReceivePortImpl$();
};

$._Isolate_port = function() {
  if ($.lazyPort == null)
    $.lazyPort = $.ReceivePort_ReceivePort();
  return $.lazyPort;
};

$.parse = function(json, reviver) {
  var parsed, e, t1, exception;
  t1 = json;
  if (!(typeof t1 === "string"))
    throw $.$$throw($.ArgumentError$(json));
  parsed = null;
  try {
    parsed = JSON.parse(json);
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.FormatException$(String(e)));
  }

  return $._convertJsonToDart(parsed, reviver);
};

$._AttributeClassSet$ = function(_element) {
  return new $._AttributeClassSet(_element);
};

$.Uri$ = function(uri) {
  var t1 = $.get$Uri__splitRe().firstMatch$1(uri);
  return new $.Uri($.Uri__emptyIfNull(t1.$index(t1, 1)), $.Uri__emptyIfNull(t1.$index(t1, 2)), $.Uri__emptyIfNull(t1.$index(t1, 3)), $.Uri__parseIntOrZero(t1.$index(t1, 4)), $.Uri__emptyIfNull(t1.$index(t1, 5)), $.Uri__emptyIfNull(t1.$index(t1, 6)), $.Uri__emptyIfNull(t1.$index(t1, 7)));
};

$.Uri__emptyIfNull = function(val) {
  return val != null ? val : "";
};

$.Uri__parseIntOrZero = function(val) {
  if (val != null && $.$eq(val, "") !== true)
    return $.int_parse(val, null, null);
  else
    return 0;
};

$.Uri__addIfNonEmpty = function(sb, test, first, second) {
  if ("" !== test) {
    sb.write$1(sb, first == null ? "null" : first);
    sb.write$1(sb, second == null ? "null" : second);
  }
};

$.DetailedArgumentError$ = function(argument, details) {
  var t1 = new $.DetailedArgumentError(argument, details);
  t1.DetailedArgumentError$2(argument, details);
  return t1;
};

$.InvalidOperationError$ = function(message) {
  return new $.InvalidOperationError(message);
};

$.Size$ = function(width, height) {
  return new $.Size(width, height);
};

$.DateFormat$ = function(newPattern, locale) {
  var t1 = new $.DateFormat(null, null, null);
  t1.DateFormat$2(newPattern, locale);
  return t1;
};

$.DateFormat_localeExists = function(localeName) {
  if (localeName == null)
    return false;
  return $.containsKey$1$x($.get$dateTimeSymbols(), localeName);
};

$.DateFormat__fieldConstructors = function() {
  return [new $.DateFormat__fieldConstructors_anon(), new $.DateFormat__fieldConstructors_anon0(), new $.DateFormat__fieldConstructors_anon1()];
};

$.DateSymbols$ = function(AMPMS, AVAILABLEFORMATS, DATEFORMATS, ERANAMES, ERAS, FIRSTDAYOFWEEK, FIRSTWEEKCUTOFFDAY, MONTHS, NAME, NARROWMONTHS, NARROWWEEKDAYS, QUARTERS, SHORTMONTHS, SHORTQUARTERS, SHORTWEEKDAYS, STANDALONEMONTHS, STANDALONENARROWMONTHS, STANDALONENARROWWEEKDAYS, STANDALONESHORTMONTHS, STANDALONESHORTWEEKDAYS, STANDALONEWEEKDAYS, TIMEFORMATS, WEEKDAYS, WEEKENDRANGE) {
  return new $.DateSymbols(NAME, ERAS, ERANAMES, NARROWMONTHS, STANDALONENARROWMONTHS, MONTHS, STANDALONEMONTHS, SHORTMONTHS, STANDALONESHORTMONTHS, WEEKDAYS, STANDALONEWEEKDAYS, SHORTWEEKDAYS, STANDALONESHORTWEEKDAYS, NARROWWEEKDAYS, STANDALONENARROWWEEKDAYS, SHORTQUARTERS, QUARTERS, AMPMS, DATEFORMATS, TIMEFORMATS, AVAILABLEFORMATS, FIRSTDAYOFWEEK, WEEKENDRANGE, FIRSTWEEKCUTOFFDAY);
};

$.Intl_verifiedLocale = function(newLocale, localeExists, onFailure) {
  var t1, t2;
  if (newLocale == null)
    return $.Intl_systemLocale;
  if (localeExists.call$1(newLocale) === true)
    return newLocale;
  for (t1 = $.JSArray_methods.get$iterator([$.Intl_canonicalizedLocale(newLocale), $.Intl__shortLocale(newLocale)]); t1.moveNext$0();) {
    t2 = t1.get$current();
    if (localeExists.call$1(t2) === true)
      return t2;
  }
  return onFailure.call$1(newLocale);
};

$.Intl__throwLocaleError = function(localeName) {
  throw $.$$throw($.ArgumentError$("Invalid locale '" + $.S(localeName) + "'"));
};

$.Intl__shortLocale = function(aLocale) {
  var t1 = $.getInterceptor$asx(aLocale);
  if ($.$lt$n(t1.get$length(aLocale), 2) === true)
    return aLocale;
  return $.JSString_methods.toLowerCase$0(t1.substring$2(aLocale, 0, 2));
};

$.Intl_canonicalizedLocale = function(aLocale) {
  var t1, lastRegionLetter;
  t1 = $.getInterceptor(aLocale);
  if (aLocale == null)
    return $.Intl_systemLocale;
  if (t1.$eq(aLocale, "C") === true)
    return "en_ISO";
  if ($.$lt$n(t1.get$length(aLocale), 5) === true || $.$gt$n(t1.get$length(aLocale), 6) === true)
    return aLocale;
  if ($.$eq(t1.$index(aLocale, 2), "-") !== true && $.$eq(t1.$index(aLocale, 2), "_") !== true)
    return aLocale;
  lastRegionLetter = $.$eq(t1.get$length(aLocale), 5) === true ? "" : $.toUpperCase$0$s(t1.$index(aLocale, 5));
  return $.S(t1.$index(aLocale, 0)) + $.S(t1.$index(aLocale, 1)) + "_" + $.toUpperCase$0$s(t1.$index(aLocale, 3)) + $.toUpperCase$0$s(t1.$index(aLocale, 4)) + lastRegionLetter;
};

$._DateFormatLiteralField$ = function(pattern, $parent) {
  return new $._DateFormatLiteralField(pattern, $parent);
};

$._DateFormatQuotedField$ = function(pattern, $parent) {
  var t1 = new $._DateFormatQuotedField(null, pattern, $parent);
  t1._DateFormatQuotedField$2(pattern, $parent);
  return t1;
};

$._DateFormatPatternField$ = function(pattern, $parent) {
  return new $._DateFormatPatternField(pattern, $parent);
};

$.UninitializedLocaleData$ = function(message, fallbackData) {
  return new $.UninitializedLocaleData(message, fallbackData);
};

$.LocaleDataException$ = function(message) {
  return new $.LocaleDataException(message);
};

$.ChangeNotification$ = function(oldValue, newValue, changes) {
  return new $.ChangeNotification(oldValue, newValue, changes);
};

$.observe = function(value, callback, debugName) {
  var exprObserver;
  if (typeof value === "object" && value !== null && !!value.$isObservable)
    return $.observeChanges(value, new $.observe_anon(callback, value));
  exprObserver = $._ExpressionObserver$(value, callback, debugName);
  if (!exprObserver._observe$0(exprObserver))
    return $._doNothing;
  return exprObserver.get$_unobserve();
};

$.observeChanges = function(obj, observer) {
  if (obj.get$$$_observers() == null)
    obj.set$$$_observers($.LinkedList$());
  return $.get$remove$ax($.add$1$ax(obj.get$$$_observers(), observer));
};

$._doNothing = function() {
};

$._ExpressionObserver$ = function(_expression, _callback, _debugName) {
  var t1 = $.$add$ns($._ExpressionObserver__nextId, 1);
  $._ExpressionObserver__nextId = t1;
  return new $._ExpressionObserver(t1, _expression, _callback, _debugName, $.Map_Map(), [], false, null);
};

$.defaultObserveUnhandledError = function(error, trace, obj, message) {
  $.Primitives_printString("web_ui.observe: unhandled error calling " + $.S(obj) + " " + $.S(message) + ".\n" + "error:\n" + $.S(error) + "\n\nstack trace:\n" + $.S(trace));
};

$.LinkedListNode$_ = function(value, _list) {
  var t1 = new $.LinkedListNode(null, null, _list, value);
  t1.LinkedListNode$_$2(value, _list);
  return t1;
};

$.LinkedList$ = function() {
  return new $.LinkedList(null, null, 0);
};

$.LinkedListIterator$ = function(_list) {
  var t1 = new $.LinkedListIterator(null, _list, null, -1);
  t1.LinkedListIterator$1(_list);
  return t1;
};

$.hash3 = function(x, y, z) {
  return $.$add$ns($.$mul$n($.get$hashCode$($.$add$ns($.$mul$n($.get$hashCode$(x), 31), $.get$hashCode$(y))), 31), $.get$hashCode$(z));
};

$.updateBinding = function(value, node, stringValue) {
  var isSafeHtml, node0;
  isSafeHtml = typeof value === "object" && value !== null && !!value.$isSafeHtml;
  if (stringValue == null)
    stringValue = $.toString$0(value);
  if (!isSafeHtml && typeof node === "object" && node !== null && node.$isText())
    $.set$text$x(node, stringValue);
  else {
    node0 = isSafeHtml ? $._ElementFactoryProvider_createElement_html(stringValue) : document.createTextNode(stringValue);
    $.replaceWith$1$x(node, node0);
    node = node0;
  }
  return node;
};

$.sanitizeUri = function(uri) {
  if (typeof uri === "object" && uri !== null && !!uri.$isSafeUri)
    return uri.toString$0(uri);
  uri = $.toString$0(uri);
  return $._isSafeUri(uri) ? uri : "#";
};

$._isSafeUri = function(uri) {
  var scheme, t1;
  scheme = $.Uri$(uri).scheme;
  t1 = $.getInterceptor(scheme);
  if (t1.$eq(scheme, "") === true)
    return true;
  return $.JSArray_methods.contains$1($.CONSTANT27, t1.toLowerCase$0(scheme)) || "MAILTO" === t1.toUpperCase$0(scheme);
};

$.Listener$ = function(eventStream, listener) {
  return new $.Listener(eventStream, null, listener);
};

$.Binding$ = function(exp, action, isFinal) {
  return new $.Binding(exp, action, isFinal, null);
};

$.DomPropertyBinding$ = function(getter, setter, isUrl, isFinal) {
  return new $.DomPropertyBinding(setter, getter, isUrl, isFinal, null);
};

$.ComponentItem$ = function(component) {
  return new $.ComponentItem(component);
};

$.Template$ = function(node) {
  return new $.Template(node, [], []);
};

$.LoopTemplate$ = function(reference, exp, iterSetup) {
  return new $.LoopTemplate(iterSetup, exp, null, reference, [], []);
};

$.LoopTemplateInAttribute$ = function(node, exp, iterSetup) {
  return new $.LoopTemplateInAttribute(iterSetup, exp, null, node, [], []);
};

$.watch = function(target, callback, debugName) {
  var exp, isList, val, e, trace, t1, exception, watcher;
  if ($.useObservers === true)
    return $.observe(target, callback, null);
  if (callback == null)
    return new $.watch_anon();
  if ($._watchers == null)
    $._watchers = $.LinkedList$();
  exp = null;
  isList = false;
  t1 = target;
  if (typeof t1 === "object" && t1 !== null && !!t1.$isHandle)
    exp = $.propertyTypeCast(target, "$isHandle").get$_getter();
  else {
    t1 = target;
    if (typeof t1 === "function" || typeof t1 === "object" && t1 !== null && !!t1.$isFunction) {
      exp = target;
      try {
        val = target.call$0();
        t1 = val;
        if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || t1.$isList()))
          isList = true;
        else {
          t1 = val;
          if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || t1.$isIterable())) {
            isList = true;
            exp = new $.watch_anon0(target);
          }
        }
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        $.Primitives_printString("error: evaluating " + $.S(debugName != null ? debugName : "<unnamed>") + " " + "watcher threw error (" + $.S(e) + ", " + $.S(trace) + ")");
      }

    } else {
      t1 = target;
      if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || t1.$isList())) {
        exp = new $.watch_anon1(target);
        isList = true;
      } else {
        t1 = target;
        if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || t1.$isIterable())) {
          exp = new $.watch_anon2(target);
          isList = true;
        }
      }
    }
  }
  watcher = isList === true ? $._ListWatcher$(exp, callback, debugName) : $._Watcher$(exp, callback, debugName);
  return $.get$remove$ax($.add$1$ax($._watchers, watcher));
};

$.watchAndInvoke = function(exp, callback, debugName) {
  var res = $.watch(exp, callback, debugName);
  if (typeof exp === "function" || typeof exp === "object" && exp !== null && !!exp.$isFunction)
    callback.call$1($.ChangeNotification$(null, exp.call$0(), null));
  else
    callback.call$1($.ChangeNotification$(null, exp, null));
  return res;
};

$._Watcher$ = function(_getter, _callback, debugName) {
  var t1 = new $._Watcher(debugName, _getter, _callback, null);
  t1._Watcher$3(_getter, _callback, debugName);
  return t1;
};

$.dispatch = function() {
  var total, t1, dirty;
  if ($._watchers == null)
    return;
  total = 0;
  do {
    for (t1 = $.get$iterator$ax($._watchers), dirty = false; t1.moveNext$0() === true;)
      if (t1.get$current().compareAndNotify$0())
        dirty = true;
    if (dirty) {
      ++total;
      t1 = total < 10;
    } else
      t1 = false;
  } while (t1);
  if (total === 10)
    $.Primitives_printString("Possible loop in watchers propagation, stopped dispatch.");
};

$._ListWatcher$ = function(getter, callback, debugName) {
  var t1 = new $._ListWatcher(debugName, getter, callback, null);
  t1._Watcher$3(getter, callback, debugName);
  t1._ListWatcher$3(getter, callback, debugName);
  return t1;
};

$.WebComponent__matches = function(node, selector) {
  if (!(typeof node === "object" && node !== null && node.$isElement()))
    return $.$eq(selector, "*");
  return $.matches$1$x(node, selector);
};

$.WebComponent__isActive = function(node) {
  var t1;
  for (node = $.get$parent$x(node); t1 = $.getInterceptor(node), node != null; node = t1.get$parent(node))
    if ($.$eq(t1.get$tagName(node), "CONTENT") === true || $.$eq(t1.get$tagName(node), "SHADOW") === true)
      return false;
  return true;
};

$.WebComponent__distribute = function(insertionPoint, nodes) {
  var t1 = $.getInterceptor$x(insertionPoint);
  $.insertAllBefore$2$x(t1.get$parent(insertionPoint), nodes, insertionPoint);
  t1.remove$0(insertionPoint);
};

$.Css3TransitionEffect__recordProperties = function(element, properties) {
  var map, t1, t2, t3;
  map = $.HashMap$();
  for (t1 = $.JSArray_methods.get$iterator(properties), t2 = $.getInterceptor$x(element); t1.moveNext$0();) {
    t3 = t1.get$current();
    map.$indexSet(map, t3, $.getPropertyValue$1$x(t2.get$style(element), t3));
  }
  return map;
};

$._css3TransitionEffectValues$ = function(element, originalValues) {
  return new $._css3TransitionEffectValues(element, originalValues, null);
};

$._css3TransitionEffectValues_delayStart = function(element, originalValues, action) {
  var t1, value;
  t1 = $.get$_css3TransitionEffectValues__values();
  value = $._css3TransitionEffectValues$(element, originalValues);
  $.$indexSet$ax(t1, element, value);
  value.timer = $.Timer_Timer($.CONSTANT16, new $._css3TransitionEffectValues_delayStart_anon(action, value));
};

$._css3TransitionEffectValues_cleanup = function(element) {
  var value = $.$index$asx($.get$_css3TransitionEffectValues__values(), element);
  $.$indexSet$ax($.get$_css3TransitionEffectValues__values(), element, null);
  return value._cleanup$0();
};

$.FadeEffect$ = function() {
  var t1 = $.Map_Map();
  t1 = new $.FadeEffect("opacity", "0", "1", t1);
  t1.Css3TransitionEffect$4("opacity", "0", "1", null);
  return t1;
};

$.ScaleEffect_ScaleEffect = function(orientation, xOffset, yOffset) {
  var hideValue, xoValue, t1, yoValue;
  switch (orientation) {
    case $.CONSTANT20:
      hideValue = "scale(1, 0)";
      break;
    case $.CONSTANT21:
      hideValue = "scale(0, 1)";
      break;
    default:
      hideValue = "scale(0, 0)";
      break;
  }
  xoValue = $.get$name$x(xOffset == null ? $.CONSTANT22 : xOffset);
  if (yOffset == null)
    yOffset = $.CONSTANT23;
  t1 = $.getInterceptor(yOffset);
  yoValue = t1.$eq(yOffset, $.CONSTANT23) === true ? "center" : t1.get$name(yOffset);
  return $.ScaleEffect$_internal(hideValue, $.makeLiteralMap(["-webkit-transform-origin", $.S(xoValue) + " " + $.S(yoValue)]));
};

$.ScaleEffect$_internal = function(hideValue, values) {
  var t1 = values.$eq(values, null) ? $.Map_Map() : $.Map_Map$from(values);
  t1 = new $.ScaleEffect("-webkit-transform", hideValue, "scale(1, 1)", t1);
  t1.Css3TransitionEffect$4("-webkit-transform", hideValue, "scale(1, 1)", values);
  return t1;
};

$.CssEffectTiming$_internal = function(cssName) {
  return new $.CssEffectTiming(cssName);
};

$.CssEffectTiming__getCssValue = function(timing) {
  if (typeof timing === "object" && timing !== null && !!timing.$isCssEffectTiming)
    return timing.cssName;
  else
    return "";
};

$.ModalManager_show = function(element, backdropClickHandler, duration, effect, effectTiming) {
  var backDropElement = $.ModalManager__getBackdrop($.get$document$x(element), true);
  if (backdropClickHandler != null)
    $.get$onClick$x(backDropElement).listen$1(new $.ModalManager_show_anon(backdropClickHandler));
  return $._FutureImpl__FutureImpl$wait([$.ShowHide_show(element, duration, effect, effectTiming), $.ShowHide_show(backDropElement, null, $.FadeEffect$(), null)]);
};

$.ModalManager_hide = function(element, duration, effect, effectTiming) {
  var backDropElement, futures, t1;
  backDropElement = $.ModalManager__getBackdrop($.get$document$x(element), false);
  futures = [$.ShowHide_hide(element, duration, effect, effectTiming)];
  if (backDropElement != null)
    futures.push($.ShowHide_hide(backDropElement, null, $.FadeEffect$(), null));
  t1 = $._FutureImpl__FutureImpl$wait(futures).catchError$2$test(new $.ModalManager_hide_anon(), new $.ModalManager_hide_anon0());
  t1.whenComplete$1(new $.ModalManager_hide_anon1(element));
  return t1;
};

$.ModalManager__clearOutBackdrop = function(doc) {
  var backdrop = $.ModalManager__getBackdrop(doc, false);
  if (backdrop != null)
    $.remove$0$ax(backdrop);
};

$.ModalManager__getBackdrop = function(parentDocument, addIfMissing) {
  var t1, element, t2;
  t1 = $.getInterceptor$x(parentDocument);
  element = $.query$1$x(t1.get$body(parentDocument), ".modal-backdrop-x");
  if (element == null && addIfMissing) {
    element = $.$$dom_createElement$1$x(document, "div");
    t2 = $.getInterceptor$x(element);
    $.add$1$ax(t2.get$classes(element), "modal-backdrop-x");
    $.$indexSet$ax(t2.get$attributes(element), "style", "display: none; position: fixed; top: 0; right: 0; bottom: 0; left: 0; z-index: 1040; background-color: rgba(0,0,0,0.8);");
    $.add$1$ax($.get$children$x(t1.get$body(parentDocument)), element);
  }
  return element;
};

$.ShowHide_show = function(element, duration, effect, effectTiming) {
  return $.ShowHide_begin($.CONSTANT8, element, duration, effect, effectTiming);
};

$.ShowHide_hide = function(element, duration, effect, effectTiming) {
  return $.ShowHide_begin($.CONSTANT5, element, duration, effect, effectTiming);
};

$.ShowHide_begin = function(action, element, duration, effect, effectTiming) {
  return $.ShowHide__requestEffect($.ShowHide__getToggleState(action, $.ShowHide__populateState(element)), element, duration, effect, effectTiming);
};

$.ShowHide__populateState = function(element) {
  var currentValues, t1, computedStyle, tagDefaultDisplay, localDisplay, computedDisplay, inferredState;
  currentValues = $.$index$asx($.get$ShowHide__values(), element);
  if (currentValues != null)
    return currentValues.get$currentState();
  t1 = $.getInterceptor$x(element);
  computedStyle = t1.getComputedStyle$1(element, "");
  tagDefaultDisplay = $.Tools_getDefaultDisplay(t1.get$tagName(element));
  $.putIfAbsent$2$x($.get$ShowHide__defaultDisplays(), t1.get$tagName(element), new $.ShowHide__populateState_anon(tagDefaultDisplay));
  localDisplay = $.get$display$x(t1.get$style(element));
  computedDisplay = $.get$display$x(computedStyle);
  inferredState = $.$eq(computedDisplay, "none") === true ? $.CONSTANT6 : $.CONSTANT7;
  $.Tools_getSize(computedStyle);
  $.$indexSet$ax($.get$ShowHide__values(), element, $._ShowHideValues$(computedDisplay, localDisplay, inferredState));
  return inferredState;
};

$.ShowHide__getToggleState = function(action, state) {
  switch (action) {
    case $.CONSTANT8:
      return true;
    case $.CONSTANT5:
      return false;
    case $.CONSTANT9:
      switch (state) {
        case $.CONSTANT6:
        case $.CONSTANT10:
          return true;
        case $.CONSTANT11:
        case $.CONSTANT7:
          return false;
        default:
          throw $.$$throw($.DetailedArgumentError$("state", "Value of " + $.S(state) + " is not supported"));
      }
    default:
      throw $.$$throw($.DetailedArgumentError$("action", "Value of " + $.S(action) + " is not supported"));
  }
};

$.ShowHide__requestEffect = function(doShow, element, desiredDuration, effect, effectTiming) {
  if (desiredDuration == null)
    desiredDuration = 400;
  else if ($.$lt$n(desiredDuration, 0) === true)
    desiredDuration = 0;
  if (effect == null)
    effect = $.CONSTANT12;
  if (effectTiming == null)
    effectTiming = $.get$EffectTiming_ease();
  if (doShow)
    return $.ShowHide__requestShow(element, desiredDuration, effect, effectTiming);
  else
    return $.ShowHide__requestHide(element, desiredDuration, effect, effectTiming);
};

$.ShowHide__requestShow = function(element, desiredDuration, effect, effectTiming) {
  var values, t1, durationMS;
  values = $.$index$asx($.get$ShowHide__values(), element);
  t1 = values.get$currentState();
  switch (t1) {
    case $.CONSTANT11:
      return $._FutureImpl$immediate($.CONSTANT13);
    case $.CONSTANT7:
      return $._FutureImpl$immediate($.CONSTANT13);
    case $.CONSTANT10:
      $._AnimatingValues_cancelAnimation(element);
      break;
    case $.CONSTANT6:
      break;
    default:
      throw $.$$throw($.DetailedArgumentError$("oldState", "the provided value " + $.S(t1) + " is not supported"));
  }
  $.ShowHide__finishShow(element);
  durationMS = effect.startShow$3(element, desiredDuration, effectTiming);
  if ($.$gt$n(durationMS, 0) === true) {
    values.set$currentState($.CONSTANT11);
    return $._AnimatingValues_scheduleCleanup(durationMS, element, effect.get$clearAnimation(), $.ShowHide__finishShow);
  } else
    return $._FutureImpl$immediate($.CONSTANT14);
};

$.ShowHide__finishShow = function(element) {
  var values, t1;
  values = $.$index$asx($.get$ShowHide__values(), element);
  t1 = $.ShowHide__getShowDisplayValue(element);
  $.set$display$x($.get$style$x(element), t1);
  values.set$currentState($.CONSTANT7);
};

$.ShowHide__requestHide = function(element, desiredDuration, effect, effectTiming) {
  var t1, durationMS;
  t1 = $.$index$asx($.get$ShowHide__values(), element).get$currentState();
  switch (t1) {
    case $.CONSTANT10:
      return $._FutureImpl$immediate($.CONSTANT13);
    case $.CONSTANT6:
      $.ShowHide__finishHide(element);
      return $._FutureImpl$immediate($.CONSTANT13);
    case $.CONSTANT11:
      $._AnimatingValues_cancelAnimation(element);
      break;
    case $.CONSTANT7:
      break;
    default:
      throw $.$$throw($.DetailedArgumentError$("oldState", "the provided value " + $.S(t1) + " is not supported"));
  }
  durationMS = effect.startHide$3(element, desiredDuration, effectTiming);
  if ($.$gt$n(durationMS, 0) === true) {
    $.$index$asx($.get$ShowHide__values(), element).set$currentState($.CONSTANT10);
    return $._AnimatingValues_scheduleCleanup(durationMS, element, effect.get$clearAnimation(), $.ShowHide__finishHide);
  } else {
    $.ShowHide__finishHide(element);
    return $._FutureImpl$immediate($.CONSTANT14);
  }
};

$.ShowHide__finishHide = function(element) {
  var values = $.$index$asx($.get$ShowHide__values(), element);
  $.set$display$x($.get$style$x(element), "none");
  values.set$currentState($.CONSTANT6);
};

$.ShowHide__getShowDisplayValue = function(element) {
  var values = $.$index$asx($.get$ShowHide__values(), element);
  if ($.$eq(values.get$initialComputedDisplay(), "none") === true)
    return $.$index$asx($.get$ShowHide__defaultDisplays(), $.get$tagName$x(element));
  else if ($.$eq(values.get$initialLocalDisplay(), "") === true || $.$eq(values.get$initialLocalDisplay(), "inherit") === true)
    return values.get$initialLocalDisplay();
  else
    return values.get$initialComputedDisplay();
};

$._ShowHideValues$ = function(initialComputedDisplay, initialLocalDisplay, currentState) {
  return new $._ShowHideValues(initialComputedDisplay, initialLocalDisplay, currentState);
};

$._AnimatingValues$_internal = function(_element, _cleanupAction, _finishFunc) {
  var t1 = new $._AnimatingValues(_element, _cleanupAction, _finishFunc, $.Completer_Completer(), null);
  t1._AnimatingValues$_internal$3(_element, _cleanupAction, _finishFunc);
  return t1;
};

$._AnimatingValues_cancelAnimation = function(element) {
  $.$index$asx($.get$_AnimatingValues__aniValues(), element)._cancel$0();
};

$._AnimatingValues_scheduleCleanup = function(durationMS, element, cleanupAction, finishAction) {
  return $._AnimatingValues$_internal(element, cleanupAction, finishAction)._start$1(durationMS);
};

$.Tools_getSize = function(css) {
  var t1 = $.getInterceptor$x(css);
  return $.Size$($.Tools__getPixelCount(t1.get$width(css)), $.Tools__getPixelCount(t1.get$height(css)));
};

$.Tools__getPixelCount = function(cssDimension) {
  var t1 = $.getInterceptor(cssDimension);
  if (t1.$eq(cssDimension, "auto") === true || t1.endsWith$1(cssDimension, "%") === true)
    return;
  else
    return $.double_parse(t1.substring$2(cssDimension, 0, $.$sub$n(t1.get$length(cssDimension), 2)), null);
};

$.Tools_getDefaultDisplay = function(nodeName) {
  var storedValue, defaultDisplay, t1;
  storedValue = $.$index$asx($.get$Tools__elemDisplay(), nodeName);
  if (storedValue != null)
    return storedValue;
  else {
    defaultDisplay = $.Tools__css_defaultDisplay(nodeName);
    t1 = $.getInterceptor(defaultDisplay);
    if (t1.$eq(defaultDisplay, "none") === true || t1.$eq(defaultDisplay, "") === true)
      return $.Tools__defaultDisplayHard(nodeName);
    else
      return defaultDisplay;
  }
};

$.Tools__css_defaultDisplay = function(nodeName) {
  document;
  return $.Tools__actualDisplay(nodeName, document);
};

$.Tools__defaultDisplayHard = function(nodeName) {
  throw $.$$throw("Not sure how to calculate display of: " + $.S(nodeName));
};

$.Tools__actualDisplay = function($name, doc) {
  var elem, t1, value;
  elem = $._ElementFactoryProvider_createElement_tag($name);
  $.append$1$x($.get$body$x(doc), elem);
  t1 = $.getInterceptor$x(elem);
  value = $.get$display$x(t1.getComputedStyle$1(elem, ""));
  t1.remove$0(elem);
  return value;
};

$.ShowHideComponent_dispatchToggleEvent = function(element) {
  element.dispatchEvent$1(element, $.Event_Event("toggle", true, true));
};

$.llena_camaras.call$1 = $.llena_camaras;
$.llena_camaras.$name = "llena_camaras";
$.genera_reporte.call$1 = $.genera_reporte;
$.genera_reporte.$name = "genera_reporte";
$.IsolateNatives__processWorkerMessage.call$2 = $.IsolateNatives__processWorkerMessage;
$.IsolateNatives__processWorkerMessage.$name = "IsolateNatives__processWorkerMessage";
$.Primitives__throwFormatException.call$1 = $.Primitives__throwFormatException;
$.Primitives__throwFormatException.$name = "Primitives__throwFormatException";
$.$$throw.call$1 = $.$$throw;
$.$$throw.$name = "$$throw";
$.DartError_toStringWrapper.call$0 = $.DartError_toStringWrapper;
$.DartError_toStringWrapper.$name = "DartError_toStringWrapper";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$._nullDataHandler.call$1 = $._nullDataHandler;
$._nullDataHandler.$name = "_nullDataHandler";
$._nullErrorHandler.call$1 = $._nullErrorHandler;
$._nullErrorHandler.$name = "_nullErrorHandler";
$._nullDoneHandler.call$0 = $._nullDoneHandler;
$._nullDoneHandler.$name = "_nullDoneHandler";
$.Comparable_compare.call$2 = $.Comparable_compare;
$.Comparable_compare.$name = "Comparable_compare";
$.DateFormat_localeExists.call$1 = $.DateFormat_localeExists;
$.DateFormat_localeExists.$name = "DateFormat_localeExists";
$.Intl__throwLocaleError.call$1 = $.Intl__throwLocaleError;
$.Intl__throwLocaleError.$name = "Intl__throwLocaleError";
$._doNothing.call$0 = $._doNothing;
$._doNothing.$name = "_doNothing";
$.defaultObserveUnhandledError.call$4 = $.defaultObserveUnhandledError;
$.defaultObserveUnhandledError.$name = "defaultObserveUnhandledError";
$.ShowHide__finishShow.call$1 = $.ShowHide__finishShow;
$.ShowHide__finishShow.$name = "ShowHide__finishShow";
$.ShowHide__finishHide.call$1 = $.ShowHide__finishHide;
$.ShowHide__finishHide.$name = "ShowHide__finishHide";
$.DomMimeType = {builtin$cls: "DomMimeType"};
$.Transform = {builtin$cls: "Transform"};
$.DomPlugin = {builtin$cls: "DomPlugin"};
$.Node = {builtin$cls: "Node"};
$.ReceivePort = {builtin$cls: "ReceivePort"};
$.Element = {builtin$cls: "Element"};
$.Entry = {builtin$cls: "Entry"};
$.EntrySync = {builtin$cls: "EntrySync"};
$.bool = {builtin$cls: "bool"};
$.$double = {builtin$cls: "$double"};
$.ElementInstance = {builtin$cls: "ElementInstance"};
$.File = {builtin$cls: "File"};
$.Gamepad = {builtin$cls: "Gamepad"};
$._ManagerStub = {builtin$cls: "_ManagerStub"};
$.$int = {builtin$cls: "$int"};
$.List = {builtin$cls: "List"};
$.Map = {builtin$cls: "Map"};
$.num = {builtin$cls: "num"};
$.Match = {builtin$cls: "Match"};
$.SourceBuffer = {builtin$cls: "SourceBuffer"};
$.Length = {builtin$cls: "Length"};
$.String = {builtin$cls: "String"};
$.SpeechGrammar = {builtin$cls: "SpeechGrammar"};
$.SpeechInputResult = {builtin$cls: "SpeechInputResult"};
$.Number = {builtin$cls: "Number"};
$.SpeechRecognitionResult = {builtin$cls: "SpeechRecognitionResult"};
$.PathSeg = {builtin$cls: "PathSeg"};
$.HttpRequest = {builtin$cls: "HttpRequest"};
$.StyleSheet = {builtin$cls: "StyleSheet"};
$.TableCellElement = {builtin$cls: "TableCellElement"};
$.TableRowElement = {builtin$cls: "TableRowElement"};
$.TableSectionElement = {builtin$cls: "TableSectionElement"};
$.TextTrack = {builtin$cls: "TextTrack"};
$.TextTrackCue = {builtin$cls: "TextTrackCue"};
$.CssRule = {builtin$cls: "CssRule"};
$.Touch = {builtin$cls: "Touch"};
$.CssValue = {builtin$cls: "CssValue"};
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CONSTANT0 = Isolate.makeConstantList([]);
$.CONSTANT3 = new $._NullKey();
$.CONSTANT47 = Isolate.makeConstantList(["caption", "col", "colgroup", "tbody", "td", "tfoot", "th", "thead", "tr"]);
$.CONSTANT24 = new $.ConstantMap(9, {caption: null, col: null, colgroup: null, tbody: null, td: null, tfoot: null, th: null, thead: null, tr: null}, $.CONSTANT47);
$.CONSTANT26 = new $.EventStreamProvider("click");
$.CONSTANT17 = new $.ShowHideResult("canceled");
$.CONSTANT43 = Isolate.makeConstantList([5, 6]);
$.CONSTANT45 = new $.EventStreamProvider("progress");
$.CONSTANT4 = new $._LinkedHashTableHeadMarker();
$.CONSTANT42 = Isolate.makeConstantList(["h:mm:ss a zzzz", "h:mm:ss a z", "h:mm:ss a", "h:mm a"]);
$.CONSTANT23 = new $.VerticalAlignment("middle");
$.CONSTANT7 = new $.ShowHideState("shown");
$.CONSTANT13 = new $.ShowHideResult("no-op");
$.CONSTANT21 = new $.Orientation("horizontal");
$.CONSTANT18 = new $.EventStreamProvider("error");
$.CONSTANT32 = Isolate.makeConstantList(["Before Christ", "Anno Domini"]);
$.CONSTANT40 = Isolate.makeConstantList(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
$.CONSTANT48 = Isolate.makeConstantList(["body", "head", "caption", "td", "th", "colgroup", "col", "tr", "tbody", "tfoot", "thead", "track"]);
$.CONSTANT11 = new $.ShowHideState("showing");
$.CONSTANT1 = new $.Duration(0);
$.CONSTANT41 = Isolate.makeConstantList(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
$.JSInt_methods = $.JSInt.prototype;
$.CONSTANT = new $.NullThrownError();
$.CONSTANT37 = Isolate.makeConstantList(["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]);
$.CONSTANT36 = Isolate.makeConstantList(["S", "M", "T", "W", "T", "F", "S"]);
$.CONSTANT31 = Isolate.makeConstantList(["EEEE, MMMM d, y", "MMMM d, y", "MMM d, y", "M/d/yy"]);
$.CONSTANT28 = new $.EventStreamProvider("change");
$.CONSTANT12 = new $.ShowHideEffect();
$.CONSTANT5 = new $.ShowHideAction("hide");
$.CONSTANT9 = new $.ShowHideAction("toggle");
$.CONSTANT44 = new $.EventStreamProvider("load");
$.CONSTANT29 = new $.EventStreamProvider("input");
$.CONSTANT15 = new $.ShowHideResult("animated");
$.CONSTANT38 = Isolate.makeConstantList(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
$.CONSTANT49 = Isolate.makeConstantList(["d", "E", "EEEE", "LLL", "LLLL", "M", "Md", "MEd", "MMM", "MMMd", "MMMEd", "MMMM", "MMMMd", "MMMMEEEEd", "QQQ", "QQQQ", "y", "yM", "yMd", "yMEd", "yMMM", "yMMMd", "yMMMEd", "yMMMM", "yMMMMd", "yMMMMEEEEd", "yQQQ", "yQQQQ", "H", "Hm", "Hms", "j", "jm", "jms", "jmv", "jmz", "jz", "m", "ms", "s", "v", "z", "zzzz", "ZZZZ"]);
$.CONSTANT46 = new $.Object();
$.CONSTANT14 = new $.ShowHideResult("immediate");
$.CONSTANT20 = new $.Orientation("vertical");
$.CONSTANT10 = new $.ShowHideState("hidding");
$.CONSTANT25 = new $.ConstantMap(12, {body: "html", head: "html", caption: "table", td: "tr", th: "tr", colgroup: "table", col: "colgroup", tr: "tbody", tbody: "table", tfoot: "table", thead: "table", track: "audio"}, $.CONSTANT48);
$.CONSTANT33 = Isolate.makeConstantList(["BC", "AD"]);
$.CONSTANT6 = new $.ShowHideState("hidden");
$.JSDouble_methods = $.JSDouble.prototype;
$.CONSTANT34 = Isolate.makeConstantList(["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
$.CONSTANT27 = Isolate.makeConstantList(["http", "https", "ftp", "mailto"]);
$.CONSTANT35 = Isolate.makeConstantList(["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"]);
$.CONSTANT30 = Isolate.makeConstantList(["AM", "PM"]);
$.CONSTANT39 = Isolate.makeConstantList(["Q1", "Q2", "Q3", "Q4"]);
$.CONSTANT50 = new $.ConstantMap(44, {d: "d", E: "EEE", EEEE: "EEEE", LLL: "LLL", LLLL: "LLLL", M: "L", Md: "M/d", MEd: "EEE, M/d", MMM: "LLL", MMMd: "MMM d", MMMEd: "EEE, MMM d", MMMM: "LLLL", MMMMd: "MMMM d", MMMMEEEEd: "EEEE, MMMM d", QQQ: "QQQ", QQQQ: "QQQQ", y: "y", yM: "M/y", yMd: "M/d/y", yMEd: "EEE, M/d/y", yMMM: "MMM y", yMMMd: "MMM d, y", yMMMEd: "EEE, MMM d, y", yMMMM: "MMMM y", yMMMMd: "MMMM d, y", yMMMMEEEEd: "EEEE, MMMM d, y", yQQQ: "QQQ y", yQQQQ: "QQQQ y", H: "HH", Hm: "HH:mm", Hms: "HH:mm:ss", j: "h a", jm: "h:mm a", jms: "h:mm:ss a", jmv: "h:mm a v", jmz: "h:mm a z", jz: "h a z", m: "m", ms: "mm:ss", s: "s", v: "v", z: "z", zzzz: "zzzz", ZZZZ: "ZZZZ"}, $.CONSTANT49);
$.JSArray_methods = $.JSArray.prototype;
$.CONSTANT19 = new $.EventStreamProvider("success");
$.JSNull_methods = $.JSNull.prototype;
$.CONSTANT16 = new $.Duration(1000);
$.JSNumber_methods = $.JSNumber.prototype;
$.JSString_methods = $.JSString.prototype;
$.CONSTANT22 = new $.HorizontalAlignment("center");
$.CONSTANT8 = new $.ShowHideAction("show");
$.CONSTANT2 = new $._DeadEntry();
$._lote = 1;
$._todos = false;
$._camaras_todas = false;
$.TotalCajas = 0;
$.TotalPeso = 0;
$.Expando__keyCount = 0;
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_hashCodeSeed = 0;
$._getTypeNameOf = null;
$.Device__isOpera = null;
$.Device__isIE = null;
$.Device__isFirefox = null;
$.Device__isWebKit = null;
$.Device__cachedCssPrefix = null;
$.en_USPatterns = $.CONSTANT50;
$.Intl_systemLocale = "en_US";
$._activeObserver = null;
$._changedExpressions = null;
$._ExpressionObserver__nextId = 0;
$.onObserveUnhandledError = $.defaultObserveUnhandledError;
$.useObservers = false;
$._watchers = null;
$.useShadowDom = false;
$.$$dom_addEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_addEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_clear$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).$$dom_clear$0(receiver);
};
$.$$dom_createElement$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).$$dom_createElement$1(receiver, a0);
};
$.$$dom_createEvent$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).$$dom_createEvent$1(receiver, a0);
};
$.$$dom_getAttribute$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).$$dom_getAttribute$1(receiver, a0);
};
$.$$dom_getComputedStyle$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).$$dom_getComputedStyle$2(receiver, a0, a1);
};
$.$$dom_getItem$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).$$dom_getItem$1(receiver, a0);
};
$.$$dom_hasAttribute$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).$$dom_hasAttribute$1(receiver, a0);
};
$.$$dom_initEvent$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_initEvent$3(receiver, a0, a1, a2);
};
$.$$dom_key$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).$$dom_key$1(receiver, a0);
};
$.$$dom_querySelector$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).$$dom_querySelector$1(receiver, a0);
};
$.$$dom_querySelectorAll$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).$$dom_querySelectorAll$1(receiver, a0);
};
$.$$dom_removeChild$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).$$dom_removeChild$1(receiver, a0);
};
$.$$dom_removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_removeEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_replaceChild$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).$$dom_replaceChild$2(receiver, a0, a1);
};
$.$$dom_setAttribute$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).$$dom_setAttribute$2(receiver, a0, a1);
};
$.$$dom_setItem$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).$$dom_setItem$2(receiver, a0, a1);
};
$.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return $.getInterceptor$ns(receiver).$add(receiver, a0);
};
$.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return $.getInterceptor$n(receiver).$and(receiver, a0);
};
$.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (!(typeof receiver == "object"))
    return !(a0 == null) && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return $.getInterceptor$n(receiver).$ge(receiver, a0);
};
$.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return $.getInterceptor$n(receiver).$gt(receiver, a0);
};
$.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string")
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return $.getInterceptor$asx(receiver).$index(receiver, a0);
};
$.$indexSet$ax = function(receiver, a0, a1) {
  if (receiver.constructor == Array && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return $.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
$.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return $.getInterceptor$n(receiver).$le(receiver, a0);
};
$.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return $.getInterceptor$n(receiver).$lt(receiver, a0);
};
$.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return $.getInterceptor$n(receiver).$mul(receiver, a0);
};
$.$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return $.getInterceptor$n(receiver).$negate(receiver);
};
$.$shl$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$shl(receiver, a0);
};
$.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return $.getInterceptor$n(receiver).$sub(receiver, a0);
};
$.$tdiv$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$tdiv(receiver, a0);
};
$._$dom_add_1$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver)._$dom_add_1$2(receiver, a0, a1);
};
$._$dom_add_2$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver)._$dom_add_2$1(receiver, a0);
};
$._getPropertyValue$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver)._getPropertyValue$1(receiver, a0);
};
$._item_1$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver)._item_1$1(receiver, a0);
};
$._postMessage_1$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver)._postMessage_1$2(receiver, a0, a1);
};
$._postMessage_2$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver)._postMessage_2$1(receiver, a0);
};
$._remove$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver)._remove$2(receiver, a0, a1);
};
$.abs$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).abs$0(receiver);
};
$.add$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).add$1(receiver, a0);
};
$.addAll$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).addAll$1(receiver, a0);
};
$.allMatches$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).allMatches$1(receiver, a0);
};
$.append$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).append$1(receiver, a0);
};
$.cancel$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).cancel$0(receiver);
};
$.clear$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).clear$0(receiver);
};
$.clone$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).clone$1(receiver, a0);
};
$.compareTo$1$ns = function(receiver, a0) {
  return $.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
$.contains$1$asx = function(receiver, a0) {
  return $.getInterceptor$asx(receiver).contains$1(receiver, a0);
};
$.contains$2$asx = function(receiver, a0, a1) {
  return $.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
$.containsKey$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).containsKey$1(receiver, a0);
};
$.createDocumentFragment$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).createDocumentFragment$0(receiver);
};
$.createShadowRoot$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).createShadowRoot$0(receiver);
};
$.dispatchEvent$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).dispatchEvent$1(receiver, a0);
};
$.elementAt$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
$.forEach$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
$.format$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).format$1(receiver, a0);
};
$.get$$$dom_attributes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_attributes(receiver);
};
$.get$$$dom_body$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_body(receiver);
};
$.get$$$dom_cells$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_cells(receiver);
};
$.get$$$dom_childNodes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_childNodes(receiver);
};
$.get$$$dom_children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_children(receiver);
};
$.get$$$dom_className$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_className(receiver);
};
$.get$$$dom_firstElementChild$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_firstElementChild(receiver);
};
$.get$$$dom_lastElementChild$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_lastElementChild(receiver);
};
$.get$$$dom_length$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_length(receiver);
};
$.get$$$dom_localName$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_localName(receiver);
};
$.get$$$dom_namespaceUri$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_namespaceUri(receiver);
};
$.get$$$dom_rows$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_rows(receiver);
};
$.get$$$dom_tBodies$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_tBodies(receiver);
};
$.get$_get_parent$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$_get_parent(receiver);
};
$.get$_get_result$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$_get_result(receiver);
};
$.get$_get_target$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$_get_target(receiver);
};
$.get$_get_value$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$_get_value(receiver);
};
$.get$attributes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$attributes(receiver);
};
$.get$body$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$body(receiver);
};
$.get$caption$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$caption(receiver);
};
$.get$cells$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$cells(receiver);
};
$.get$checked$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$checked(receiver);
};
$.get$children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$children(receiver);
};
$.get$classes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$classes(receiver);
};
$.get$contains$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$contains(receiver);
};
$.get$dataset$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$dataset(receiver);
};
$.get$display$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$display(receiver);
};
$.get$document$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$document(receiver);
};
$.get$error$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$error(receiver);
};
$.get$hashCode$ = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.get$id$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$id(receiver);
};
$.get$isEmpty$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
$.get$iterator$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$iterator(receiver);
};
$.get$key$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$key(receiver);
};
$.get$keys$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$keys(receiver);
};
$.get$last$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$last(receiver);
};
$.get$left$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$left(receiver);
};
$.get$length$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$length(receiver);
};
$.get$locale$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$locale(receiver);
};
$.get$name$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$name(receiver);
};
$.get$navigator$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$navigator(receiver);
};
$.get$newValue$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$newValue(receiver);
};
$.get$next$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$next(receiver);
};
$.get$nextNode$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$nextNode(receiver);
};
$.get$nodes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$nodes(receiver);
};
$.get$numberOfItems$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$numberOfItems(receiver);
};
$.get$onChange$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onChange(receiver);
};
$.get$onClick$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onClick(receiver);
};
$.get$onError$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onError(receiver);
};
$.get$onInput$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onInput(receiver);
};
$.get$parent$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$parent(receiver);
};
$.get$parentNode$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$parentNode(receiver);
};
$.get$pattern$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$pattern(receiver);
};
$.get$remove$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$remove(receiver);
};
$.get$responseText$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$responseText(receiver);
};
$.get$result$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$result(receiver);
};
$.get$right$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$right(receiver);
};
$.get$rows$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$rows(receiver);
};
$.get$style$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$style(receiver);
};
$.get$tBodies$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$tBodies(receiver);
};
$.get$tFoot$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$tFoot(receiver);
};
$.get$tHead$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$tHead(receiver);
};
$.get$tagName$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$tagName(receiver);
};
$.get$userAgent$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$userAgent(receiver);
};
$.get$value$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$value(receiver);
};
$.get$values$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$values(receiver);
};
$.get$xtag$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$xtag(receiver);
};
$.getComputedStyle$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).getComputedStyle$1(receiver, a0);
};
$.getItem$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).getItem$1(receiver, a0);
};
$.getPropertyValue$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).getPropertyValue$1(receiver, a0);
};
$.insert$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).insert$0(receiver);
};
$.insertAllBefore$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).insertAllBefore$2(receiver, a0, a1);
};
$.insertBefore$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).insertBefore$2(receiver, a0, a1);
};
$.item$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).item$1(receiver, a0);
};
$.map$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).map$1(receiver, a0);
};
$.matches$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).matches$1(receiver, a0);
};
$.postMessage$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).postMessage$1(receiver, a0);
};
$.putIfAbsent$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).putIfAbsent$2(receiver, a0, a1);
};
$.query$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).query$1(receiver, a0);
};
$.queryAll$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).queryAll$1(receiver, a0);
};
$.remainder$1$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).remainder$1(receiver, a0);
};
$.remove$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).remove$0(receiver);
};
$.remove$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).remove$1(receiver, a0);
};
$.removeLast$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).removeLast$0(receiver);
};
$.replaceAll$2$s = function(receiver, a0, a1) {
  return $.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
};
$.replaceWith$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
$.round$0$nx = function(receiver) {
  return $.getInterceptor$nx(receiver).round$0(receiver);
};
$.send$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).send$2(receiver, a0, a1);
};
$.set$$$dom_className$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$$$dom_className(receiver, value);
};
$.set$checked$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$checked(receiver, value);
};
$.set$children$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$children(receiver, value);
};
$.set$display$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$display(receiver, value);
};
$.set$innerHtml$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$innerHtml(receiver, value);
};
$.set$left$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$left(receiver, value);
};
$.set$right$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$right(receiver, value);
};
$.set$text$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$text(receiver, value);
};
$.set$transitionDuration$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$transitionDuration(receiver, value);
};
$.set$transitionProperty$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$transitionProperty(receiver, value);
};
$.set$transitionTimingFunction$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$transitionTimingFunction(receiver, value);
};
$.set$type$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$type(receiver, value);
};
$.set$value$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$value(receiver, value);
};
$.set$xtag$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$xtag(receiver, value);
};
$.setProperty$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).setProperty$2(receiver, a0, a1);
};
$.setProperty$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).setProperty$3(receiver, a0, a1, a2);
};
$.show$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).show$0(receiver);
};
$.split$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).split$1(receiver, a0);
};
$.startsWith$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).startsWith$1(receiver, a0);
};
$.sublist$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).sublist$1(receiver, a0);
};
$.sublist$2$ax = function(receiver, a0, a1) {
  return $.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
};
$.substring$2$s = function(receiver, a0, a1) {
  return $.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
};
$.toList$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).toList$0(receiver);
};
$.toLowerCase$0$s = function(receiver) {
  return $.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
$.toString$0 = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.toUpperCase$0$s = function(receiver) {
  return $.getInterceptor$s(receiver).toUpperCase$0(receiver);
};
$.trim$0$s = function(receiver) {
  return $.getInterceptor$s(receiver).trim$0(receiver);
};
$.where$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).where$1(receiver, a0);
};
$.write$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).write$1(receiver, a0);
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "function")
    return $.JSFunction.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return receiver;
};
$.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return receiver;
};
$.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return receiver;
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return void 0;
  return receiver;
};
$.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return receiver;
};
$.getInterceptor$nx = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return void 0;
  return receiver;
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return receiver;
};
$.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return void 0;
  return receiver;
};
Isolate.$lazy($, "__shadowTemplate", "Modal___shadowTemplate", "get$Modal___shadowTemplate", function() {
  return $.DocumentFragment_DocumentFragment$html("        <div class=\"modal\">\n          <content></content>\n        </div>\n      ");
});
Isolate.$lazy($, "Camaras", "Camaras", "get$Camaras", function() {
  return $.List_List($);
});
Isolate.$lazy($, "Reporte", "Reporte", "get$Reporte", function() {
  return $.List_List($);
});
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return $.IsolateNatives_computeGlobalThis();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== (void 0);
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "_runCallbacks", "Timer__runCallbacks", "get$Timer__runCallbacks", function() {
  return [];
});
Isolate.$lazy($, "_START_TAG_REGEXP", "_START_TAG_REGEXP", "get$_START_TAG_REGEXP", function() {
  return $.RegExp_RegExp("<(\\w+)", true, false);
});
Isolate.$lazy($, "_splitRe", "Uri__splitRe", "get$Uri__splitRe", function() {
  return $.RegExp_RegExp("^(?:([^:/?#.]+):)?(?://(?:([^/?#]*)@)?([\\w\\d\\-\\u0100-\\uffff.%]*)(?::([0-9]+))?)?([^?#]+)?(?:\\?([^#]*))?(?:#(.*))?$", true, false);
});
Isolate.$lazy($, "_matchers", "DateFormat__matchers", "get$DateFormat__matchers", function() {
  return [$.RegExp_RegExp("^'(?:[^']|'')*'", true, false), $.RegExp_RegExp("^(?:G+|y+|M+|k+|S+|E+|a+|h+|K+|H+|c+|L+|Q+|d+|m+|s+|v+|z+|Z+)", true, false), $.RegExp_RegExp("^[^'GyMkSEahKHcLQdmsvzZ]+", true, false)];
});
Isolate.$lazy($, "en_USSymbols", "en_USSymbols", "get$en_USSymbols", function() {
  return $.DateSymbols$($.CONSTANT30, null, $.CONSTANT31, $.CONSTANT32, $.CONSTANT33, 6, 5, $.CONSTANT34, "en_US", $.CONSTANT35, $.CONSTANT36, $.CONSTANT37, $.CONSTANT38, $.CONSTANT39, $.CONSTANT40, $.CONSTANT34, $.CONSTANT35, $.CONSTANT36, $.CONSTANT38, $.CONSTANT40, $.CONSTANT41, $.CONSTANT42, $.CONSTANT41, $.CONSTANT43);
});
Isolate.$lazy($, "dateTimeSymbols", "dateTimeSymbols", "get$dateTimeSymbols", function() {
  return $.UninitializedLocaleData$("initializeDateFormatting(<locale>)", $.get$en_USSymbols());
});
Isolate.$lazy($, "dateTimePatterns", "dateTimePatterns", "get$dateTimePatterns", function() {
  return $.UninitializedLocaleData$("initializeDateFormatting(<locale>)", $.en_USPatterns);
});
Isolate.$lazy($, "_values", "_css3TransitionEffectValues__values", "get$_css3TransitionEffectValues__values", function() {
  return $.Expando$("_css3TransitionEffectValues");
});
Isolate.$lazy($, "ease", "EffectTiming_ease", "get$EffectTiming_ease", function() {
  return $.CssEffectTiming$_internal("ease");
});
Isolate.$lazy($, "_defaultDisplays", "ShowHide__defaultDisplays", "get$ShowHide__defaultDisplays", function() {
  return $.Map_Map();
});
Isolate.$lazy($, "_values", "ShowHide__values", "get$ShowHide__values", function() {
  return $.Expando$("_ShowHideValues");
});
Isolate.$lazy($, "_aniValues", "_AnimatingValues__aniValues", "get$_AnimatingValues__aniValues", function() {
  return $.Expando$("_AnimatingValues");
});
Isolate.$lazy($, "_elemDisplay", "Tools__elemDisplay", "get$Tools__elemDisplay", function() {
  return $.Map_Map();
});
var $ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
// Native classes
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''];
  var fields_array = fields ? fields.split(',') : [];
  for (var i = 0; i < fields_array.length; i++) {
    $.$generateAccessor(fields_array[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method) {
      if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table)
    $.defineProperty(Object.prototype, key, table[key]);
})({
  $isJavaScriptIndexingBehavior: function() {
    return false;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  },
  $isCollection: function() {
    return false;
  },
  $asCollection: function() {
    return null;
  },
  $isIterable: function() {
    return false;
  },
  $asIterable: function() {
    return null;
  },
  $isList: function() {
    return false;
  },
  $asList: function() {
    return null;
  },
  $isMap: function() {
    return false;
  },
  $asMap: function() {
    return null;
  },
  $isArrayBuffer: function() {
    return false;
  },
  $asArrayBuffer: function() {
    return null;
  },
  $isArrayBufferView: function() {
    return false;
  },
  $asArrayBufferView: function() {
    return null;
  },
  $isBlob: function() {
    return false;
  },
  $asBlob: function() {
    return null;
  },
  $isElement: function() {
    return false;
  },
  $asElement: function() {
    return null;
  },
  $isFile: function() {
    return false;
  },
  $asFile: function() {
    return null;
  },
  $isFileList: function() {
    return false;
  },
  $asFileList: function() {
    return null;
  },
  $isImageData: function() {
    return false;
  },
  $asImageData: function() {
    return null;
  },
  $isNode: function() {
    return false;
  },
  $asNode: function() {
    return null;
  },
  $isShadowRoot: function() {
    return false;
  },
  $asShadowRoot: function() {
    return null;
  },
  $isText: function() {
    return false;
  },
  $asText: function() {
    return null;
  },
  $isRect: function() {
    return false;
  },
  $asRect: function() {
    return null;
  },
  toString$0: function(_) {
    return $.toStringForNativeObject(this);
  },
  get$hashCode: function(_) {
    return $.hashCodeForNativeObject(this);
  },
  $eq: function(_, a) {
    return this === a;
  }
});

$.$defineNativeClass("Worker", {
  get$id: function(receiver) {
    return receiver.id;
  },
  set$id: function(receiver, i) {
    receiver.id = i;
  },
  set$onmessage: function(receiver, f) {
    receiver.onmessage = f;
  },
  postMessage$1: function(receiver, msg) {
    receiver.postMessage(msg);
  },
  terminate$0: function(receiver) {
    receiver.terminate();
  }
});

$.$defineNativeClass("AbstractWorker", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, evt) {
    return receiver.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function(receiver) {
    return $.CONSTANT18.forTarget$1(receiver);
  }
});

$.$defineNativeClass("HTMLAnchorElement", {"": "name=,target=,type%",
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("DOMApplicationCache", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, evt) {
    return receiver.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function(receiver) {
    return $.CONSTANT18.forTarget$1(receiver);
  }
});

$.$defineNativeClass("HTMLAreaElement", {"": "target="});

$.$defineNativeClass("ArrayBuffer", {
  $isArrayBuffer: function() {
    return true;
  },
  $asArrayBuffer: function() {
    return null;
  }
});

$.$defineNativeClass("ArrayBufferView", {
  $isArrayBufferView: function() {
    return true;
  },
  $asArrayBufferView: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLBaseElement", {"": "target="});

$.$defineNativeClass("BatteryManager", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, $event) {
    return receiver.dispatchEvent($event);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("Blob", {"": "type=",
  $isBlob: function() {
    return true;
  },
  $asBlob: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLBodyElement", {
  get$onError: function(receiver) {
    return $.CONSTANT18.forTarget$1(receiver);
  }
});

$.$defineNativeClass("HTMLButtonElement", {"": "name=,type%,value%"});

$.$defineNativeClass("HTMLCanvasElement", {"": "height=,width="});

$.$defineNativeClass("CharacterData", {"": "length="});

$.$defineNativeClass("CSSFontFaceRule", {"": "style="});

$.$defineNativeClass("WebKitCSSKeyframeRule", {"": "style="});

$.$defineNativeClass("WebKitCSSKeyframesRule", {"": "name="});

$.$defineNativeClass("WebKitCSSMatrix", {
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("CSSPageRule", {"": "style="});

$.$defineNativeClass("Rect", {"": "left=,right="});

$.$defineNativeClass("CSSRule", {"": "type="});

$.$defineNativeClass("CSSStyleDeclaration", {"": "length=",
  _getPropertyValue$1: function(receiver, propertyName) {
    return receiver.getPropertyValue(propertyName);
  },
  getPropertyValue$1: function(receiver, propertyName) {
    var propValue, t1;
    propValue = $._getPropertyValue$1$x(receiver, propertyName);
    if (typeof propValue !== "string")
      return this.getPropertyValue$1$bailout(1, propValue);
    t1 = propValue;
    return t1;
  },
  getPropertyValue$1$bailout: function(state0, propValue) {
    return propValue != null ? propValue : "";
  },
  setProperty$3: function(receiver, propertyName, value, priority) {
    var exception;
    try {
      receiver.setProperty(propertyName, value, priority);
      if (!!receiver.setAttribute)
        receiver.setAttribute(propertyName, value);
    } catch (exception) {
      $.unwrapException(exception);
    }

  },
  setProperty$2: function($receiver, propertyName, value) {
    return this.setProperty$3($receiver, propertyName, value, null);
  },
  get$clear: function(receiver) {
    return $.getPropertyValue$1$x(receiver, "clear");
  },
  clear$0: function($receiver) {
    return this.get$clear($receiver).call$0();
  },
  get$display: function(receiver) {
    return $.getPropertyValue$1$x(receiver, "display");
  },
  set$display: function(receiver, value) {
    $.setProperty$3$x(receiver, "display", value, "");
  },
  get$height: function(receiver) {
    return $.getPropertyValue$1$x(receiver, "height");
  },
  get$left: function(receiver) {
    return $.getPropertyValue$1$x(receiver, "left");
  },
  set$left: function(receiver, value) {
    $.setProperty$3$x(receiver, "left", value, "");
  },
  get$locale: function(receiver) {
    return $.getPropertyValue$1$x(receiver, $.S($.Device_cssPrefix()) + "locale");
  },
  get$right: function(receiver) {
    return $.getPropertyValue$1$x(receiver, "right");
  },
  set$right: function(receiver, value) {
    $.setProperty$3$x(receiver, "right", value, "");
  },
  set$transitionDuration: function(receiver, value) {
    $.setProperty$3$x(receiver, $.S($.Device_cssPrefix()) + "transition-duration", value, "");
  },
  set$transitionProperty: function(receiver, value) {
    $.setProperty$3$x(receiver, $.S($.Device_cssPrefix()) + "transition-property", value, "");
  },
  set$transitionTimingFunction: function(receiver, value) {
    $.setProperty$3$x(receiver, $.S($.Device_cssPrefix()) + "transition-timing-function", value, "");
  },
  get$width: function(receiver) {
    return $.getPropertyValue$1$x(receiver, "width");
  }
});

$.$defineNativeClass("CSSStyleRule", {"": "style="});

$.$defineNativeClass("DataTransferItem", {"": "type="});

$.$defineNativeClass("DataTransferItemList", {"": "length=",
  add$2: function(receiver, data_OR_file, type) {
    return receiver.add(data_OR_file,type);
  },
  add$1: function($receiver, data_OR_file) {
    return $receiver.add(data_OR_file);
  },
  clear$0: function(receiver) {
    return receiver.clear();
  }
});

$.$defineNativeClass("DedicatedWorkerContext", {
  postMessage$2: function(receiver, message, messagePorts) {
    var t1 = $ === messagePorts;
    if (t1)
      messagePorts = null;
    if (!t1) {
      $._postMessage_1$2$x(receiver, $._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
      return;
    }
    $._postMessage_2$1$x(receiver, $._convertDartToNative_PrepareForStructuredClone(message));
    return;
  },
  postMessage$1: function($receiver, message) {
    return this.postMessage$2($receiver, message, $);
  },
  _postMessage_1$2: function(receiver, message, messagePorts) {
    return receiver.postMessage(message,messagePorts);
  },
  _postMessage_2$1: function(receiver, message) {
    return receiver.postMessage(message);
  }
});

$.$defineNativeClass("Document", {"": "$$dom_body:body=",
  createDocumentFragment$0: function(receiver) {
    return receiver.createDocumentFragment();
  },
  $$dom_createElement$1: function(receiver, tagName) {
    return receiver.createElement(tagName);
  },
  $$dom_createEvent$1: function(receiver, eventType) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_createEvent$1")) {
      return receiver.createEvent(eventType);
    } else
      return Object.prototype.$$dom_createEvent$1.call(this, receiver, eventType);
  },
  query$1: function(receiver, selectors) {
    return receiver.querySelector(selectors);
  },
  $$dom_querySelectorAll$1: function(receiver, selectors) {
    return receiver.querySelectorAll(selectors);
  },
  get$onChange: function(receiver) {
    return $.CONSTANT28.forTarget$1(receiver);
  },
  get$onClick: function(receiver) {
    return $.CONSTANT26.forTarget$1(receiver);
  },
  get$onError: function(receiver) {
    return $.CONSTANT18.forTarget$1(receiver);
  },
  get$onInput: function(receiver) {
    return $.CONSTANT29.forTarget$1(receiver);
  },
  queryAll$1: function(receiver, selectors) {
    return $._FrozenElementList$_wrap($.$$dom_querySelectorAll$1$x(receiver, selectors));
  }
});

$.$defineNativeClass("DocumentFragment", {"": "_children%",
  get$children: function(receiver) {
    var t1 = $.getInterceptor$x(receiver);
    if (t1.get$_children(receiver) == null)
      t1.set$_children(receiver, $.FilteredElementList$(receiver));
    return t1.get$_children(receiver);
  },
  query$1: function(receiver, selectors) {
    return $.$$dom_querySelector$1$x(receiver, selectors);
  },
  queryAll$1: function(receiver, selectors) {
    return $._FrozenElementList$_wrap($.$$dom_querySelectorAll$1$x(receiver, selectors));
  },
  set$innerHtml: function(receiver, value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("set$innerHtml")) {
      var t1, t2, e, nodes;
      t1 = $.getInterceptor$x(receiver);
      t2 = t1.get$nodes(receiver);
      t2.clear$0(t2);
      e = $.Element_Element$tag("div");
      t2 = $.getInterceptor$x(e);
      t2.set$innerHtml(e, value);
      nodes = $.List_List$from(t2.get$nodes(e), true);
      t1 = t1.get$nodes(receiver);
      t1.addAll$1(t1, nodes);
    } else
      return Object.prototype.set$innerHtml.call(this, receiver, value);
  },
  $$dom_querySelector$1: function(receiver, selectors) {
    return receiver.querySelector(selectors);
  },
  $$dom_querySelectorAll$1: function(receiver, selectors) {
    return receiver.querySelectorAll(selectors);
  }
});

$.$defineNativeClass("DOMError", {"": "name="});

$.$defineNativeClass("DOMException", {
  get$name: function(receiver) {
    var errorName = receiver.name;
    if ($.Device_isWebKit() === true && errorName === "SECURITY_ERR")
      return "SecurityError";
    if ($.Device_isWebKit() === true && errorName === "SYNTAX_ERR")
      return "SyntaxError";
    return errorName;
  },
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("MimeType", {"": "type="});

$.$defineNativeClass("MimeTypeArray", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.DomMimeType]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.DomMimeType]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.DomMimeType]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Plugin", {"": "length=,name="});

$.$defineNativeClass("PluginArray", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.DomPlugin]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.DomPlugin]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.DomPlugin]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Selection", {"": "type=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("DOMSettableTokenList", {"": "value%"});

$.$defineNativeClass("DOMStringList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  contains$1: function(receiver, string) {
    return receiver.contains(string);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.String]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.String]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.String]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("DOMTokenList", {"": "length=",
  contains$1: function(receiver, token) {
    return receiver.contains(token);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("Element", {"": "xtag%,$$dom_children:children=,id=,innerHtml:innerHTML},$$dom_attributes:attributes=,$$dom_className:className%,$$dom_firstElementChild:firstElementChild=,$$dom_lastElementChild:lastElementChild=,style=,tagName=",
  get$attributes: function(receiver) {
    return $._ElementAttributeMap$(receiver);
  },
  get$children: function(receiver) {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$children")) {
      return $._ChildrenElementList$_wrap(receiver);
    } else
      return Object.prototype.get$children.call(this, receiver);
  },
  queryAll$1: function(receiver, selectors) {
    return $._FrozenElementList$_wrap($.$$dom_querySelectorAll$1$x(receiver, selectors));
  },
  get$classes: function(receiver) {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$classes")) {
      return $._ElementCssClassSet$(receiver);
    } else
      return Object.prototype.get$classes.call(this, receiver);
  },
  get$dataset: function(receiver) {
    return $._DataAttributeMap$($.get$attributes$x(receiver));
  },
  getComputedStyle$1: function(receiver, pseudoElement) {
    if (pseudoElement == null)
      pseudoElement = "";
    return $.$$dom_getComputedStyle$2$x(window, receiver, pseudoElement);
  },
  matches$1: function(receiver, selectors) {
    if (!!receiver.matches)
      return receiver.matches(selectors);
    else if (!!receiver.webkitMatchesSelector)
      return receiver.webkitMatchesSelector(selectors);
    else if (!!receiver.mozMatchesSelector)
      return receiver.mozMatchesSelector(selectors);
    else if (!!receiver.msMatchesSelector)
      return receiver.msMatchesSelector(selectors);
    throw $.$$throw($.UnsupportedError$("Not supported on this platform"));
  },
  $$dom_getAttribute$1: function(receiver, $name) {
    return receiver.getAttribute($name);
  },
  $$dom_hasAttribute$1: function(receiver, $name) {
    return receiver.hasAttribute($name);
  },
  query$1: function(receiver, selectors) {
    return receiver.querySelector(selectors);
  },
  $$dom_querySelectorAll$1: function(receiver, selectors) {
    return receiver.querySelectorAll(selectors);
  },
  $$dom_removeAttribute$1: function(receiver, $name) {
    return receiver.removeAttribute($name);
  },
  $$dom_setAttribute$2: function(receiver, $name, value) {
    return receiver.setAttribute($name,value);
  },
  createShadowRoot$0: function(receiver) {
    return receiver.webkitCreateShadowRoot();
  },
  get$onChange: function(receiver) {
    return $.CONSTANT28.forTarget$1(receiver);
  },
  get$onClick: function(receiver) {
    return $.CONSTANT26.forTarget$1(receiver);
  },
  get$onError: function(receiver) {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$onError")) {
      return $.CONSTANT18.forTarget$1(receiver);
    } else
      return Object.prototype.get$onError.call(this, receiver);
  },
  get$onInput: function(receiver) {
    return $.CONSTANT29.forTarget$1(receiver);
  },
  $isElement: function() {
    return true;
  },
  $asElement: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLEmbedElement", {"": "height=,name=,type%,width="});

$.$defineNativeClass("Entry", {"": "name=",
  _remove$2: function(receiver, successCallback, errorCallback) {
    return receiver.remove($.convertDartClosureToJS(successCallback, 0),$.convertDartClosureToJS(errorCallback, 1));
  },
  remove$0: function(receiver) {
    var completer = $._CompleterImpl$();
    $._remove$2$x(receiver, new $.Entry_remove_anon(completer), new $.Entry_remove_anon0(completer));
    return completer.future;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  }
});

$.$defineNativeClass("EntrySync", {"": "name=",
  remove$0: function(receiver) {
    return receiver.remove();
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  }
});

$.$defineNativeClass("Event", {"": "defaultPrevented=,_get_target:target=,type=",
  get$target: function(receiver) {
    return $._convertNativeToDart_EventTarget($.get$_get_target$x(receiver));
  },
  $$dom_initEvent$3: function(receiver, eventTypeArg, canBubbleArg, cancelableArg) {
    return receiver.initEvent(eventTypeArg,canBubbleArg,cancelableArg);
  }
});

$.$defineNativeClass("EventException", {"": "name=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("EventSource", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, evt) {
    return receiver.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function(receiver) {
    return $.CONSTANT18.forTarget$1(receiver);
  }
});

$.$defineNativeClass("EventTarget", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_addEventListener$3")) {
      return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
    } else
      return Object.prototype.$$dom_addEventListener$3.call(this, receiver, type, listener, useCapture);
  },
  dispatchEvent$1: function(receiver, $event) {
    if (Object.getPrototypeOf(this).hasOwnProperty("dispatchEvent$1")) {
      return receiver.dispatchEvent($event);
    } else
      return Object.prototype.dispatchEvent$1.call(this, receiver, $event);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_removeEventListener$3")) {
      return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
    } else
      return Object.prototype.$$dom_removeEventListener$3.call(this, receiver, type, listener, useCapture);
  }
});

$.$defineNativeClass("HTMLFieldSetElement", {"": "name=,type="});

$.$defineNativeClass("File", {"": "name=",
  $isFile: function() {
    return true;
  },
  $asFile: function() {
    return null;
  }
});

$.$defineNativeClass("FileException", {"": "name=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("FileList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isFileList: function() {
    return true;
  },
  $asFileList: function() {
    return null;
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.File]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.File]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.File]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("FileReader", {"": "error=,result=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, evt) {
    return receiver.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function(receiver) {
    return $.CONSTANT18.forTarget$1(receiver);
  }
});

$.$defineNativeClass("DOMFileSystem", {"": "name="});

$.$defineNativeClass("DOMFileSystemSync", {"": "name="});

$.$defineNativeClass("FileWriter", {"": "error=,length=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, evt) {
    return receiver.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  write$1: function(receiver, data) {
    return receiver.write(data);
  },
  get$onError: function(receiver) {
    return $.CONSTANT18.forTarget$1(receiver);
  }
});

$.$defineNativeClass("FileWriterSync", {"": "length=",
  write$1: function(receiver, data) {
    return receiver.write(data);
  }
});

$.$defineNativeClass("Float32Array", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$double]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$double]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.$double]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Float64Array", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$double]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$double]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.$double]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLFormElement", {"": "length=,name=,target="});

$.$defineNativeClass("Gamepad", {"": "id="});

$.$defineNativeClass("History", {"": "length="});

$.$defineNativeClass("HTMLAllCollection", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLCollection", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLDocument", {
  get$body: function(receiver) {
    return $.get$$$dom_body$x($.document());
  }
});

$.$defineNativeClass("XMLHttpRequest", {"": "responseText=,responseType},status=,withCredentials}",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, evt) {
    return receiver.dispatchEvent(evt);
  },
  open$5$async$password$user: function(receiver, method, url, async, password, user) {
    return receiver.open(method,url,async,user,password);
  },
  open$3$async: function($receiver, method, url, async) {
    return $receiver.open(method, url, async);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  send$1: function(receiver, data) {
    return receiver.send(data);
  },
  send$0: function($receiver) {
    return $receiver.send();
  },
  get$onError: function(receiver) {
    return $.CONSTANT18.forTarget$1(receiver);
  },
  get$onLoad: function(receiver) {
    return $.CONSTANT44.forTarget$1(receiver);
  },
  get$onProgress: function(receiver) {
    return $.CONSTANT45.forTarget$1(receiver);
  }
});

$.$defineNativeClass("XMLHttpRequestException", {"": "name=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("XMLHttpRequestUpload", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, evt) {
    return receiver.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function(receiver) {
    return $.CONSTANT18.forTarget$1(receiver);
  }
});

$.$defineNativeClass("HTMLIFrameElement", {"": "height=,name=,width="});

$.$defineNativeClass("ImageData", {"": "height=,width=",
  $isImageData: function() {
    return true;
  },
  $asImageData: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLImageElement", {"": "height=,width="});

$.$defineNativeClass("HTMLInputElement", {"": "checked%,height=,name=,pattern=,type%,value%,width=",
  $isElement: function() {
    return true;
  },
  $asElement: function() {
    return null;
  },
  $isNode: function() {
    return true;
  },
  $asNode: function() {
    return null;
  }
});

$.$defineNativeClass("Int16Array", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Int32Array", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Int8Array", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("JavaScriptCallFrame", {"": "type="});

$.$defineNativeClass("HTMLKeygenElement", {"": "name=,type="});

$.$defineNativeClass("HTMLLIElement", {"": "type%,value%"});

$.$defineNativeClass("HTMLLinkElement", {"": "type%"});

$.$defineNativeClass("Location", {
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("HTMLMapElement", {"": "name="});

$.$defineNativeClass("MediaController", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, evt) {
    return receiver.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("HTMLMediaElement", {"": "error="});

$.$defineNativeClass("MediaList", {"": "length="});

$.$defineNativeClass("MediaQueryList", {
  matches$1: function($receiver, arg0) {
    return this.matches.call$1(arg0);
  }
});

$.$defineNativeClass("MediaSource", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, $event) {
    return receiver.dispatchEvent($event);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("MediaStream", {"": "id=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, $event) {
    return receiver.dispatchEvent($event);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("MediaStreamTrack", {"": "id=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, $event) {
    return receiver.dispatchEvent($event);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("MessagePort", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, evt) {
    return receiver.dispatchEvent(evt);
  },
  postMessage$2: function(receiver, message, messagePorts) {
    var t1 = $ === messagePorts;
    if (t1)
      messagePorts = null;
    if (!t1) {
      $._postMessage_1$2$x(receiver, $._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
      return;
    }
    $._postMessage_2$1$x(receiver, $._convertDartToNative_PrepareForStructuredClone(message));
    return;
  },
  postMessage$1: function($receiver, message) {
    return this.postMessage$2($receiver, message, $);
  },
  _postMessage_1$2: function(receiver, message, messagePorts) {
    return receiver.postMessage(message,messagePorts);
  },
  _postMessage_2$1: function(receiver, message) {
    return receiver.postMessage(message);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("HTMLMetaElement", {"": "name="});

$.$defineNativeClass("HTMLMeterElement", {"": "value%"});

$.$defineNativeClass("MutationEvent", {"": "newValue="});

$.$defineNativeClass("MutationRecord", {"": "target=,type="});

$.$defineNativeClass("Navigator", {"": "userAgent="});

$.$defineNativeClass("Node", {"": "$$dom_childNodes:childNodes=,$$dom_localName:localName=,$$dom_namespaceUri:namespaceURI=,nextNode:nextSibling=,document:ownerDocument=,parent:parentElement=,parentNode=,text:textContent}",
  get$nodes: function(receiver) {
    return $._ChildNodeListLazy$(receiver);
  },
  remove$0: function(receiver) {
    var t1 = $.getInterceptor$x(receiver);
    if (t1.get$parentNode(receiver) != null) {
      t1.get$parentNode(receiver);
      $.$$dom_removeChild$1$x(t1.get$parentNode(receiver), receiver);
    }
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  },
  replaceWith$1: function(receiver, otherNode) {
    var $parent, exception;
    try {
      $parent = $.get$parentNode$x(receiver);
      $.$$dom_replaceChild$2$x($parent, otherNode, receiver);
    } catch (exception) {
      $.unwrapException(exception);
    }

    return receiver;
  },
  insertAllBefore$2: function(receiver, newNodes, refChild) {
    var len, t2, i, t1;
    if (typeof newNodes === "object" && newNodes !== null && !!newNodes.$is_ChildNodeListLazy) {
      if (newNodes._this === receiver)
        throw $.$$throw($.ArgumentError$(newNodes));
      len = newNodes.get$length(newNodes);
      if (typeof len !== "number")
        return this.insertAllBefore$2$bailout(1, newNodes, refChild, receiver, len);
      t2 = $.getInterceptor$x(receiver);
      i = 0;
      for (; i < len; ++i)
        t2.insertBefore$2(receiver, newNodes.$index(newNodes, 0), refChild);
    } else
      for (t1 = $.get$iterator$ax(newNodes), t2 = $.getInterceptor$x(receiver); t1.moveNext$0() === true;)
        t2.insertBefore$2(receiver, t1.get$current(), refChild);
  },
  insertAllBefore$2$bailout: function(state0, newNodes, refChild, receiver, len) {
    switch (state0) {
      case 0:
      case 1:
        var t2, i, t1;
        if (state0 === 1 || state0 === 0 && typeof newNodes === "object" && newNodes !== null && !!newNodes.$is_ChildNodeListLazy)
          switch (state0) {
            case 0:
              if (newNodes._this === receiver)
                throw $.$$throw($.ArgumentError$(newNodes));
              len = newNodes.get$length(newNodes);
            case 1:
              state0 = 0;
              t2 = $.getInterceptor$x(receiver);
              i = 0;
              for (; $.JSNumber_methods.$lt(i, len); ++i)
                t2.insertBefore$2(receiver, newNodes.$index(newNodes, 0), refChild);
          }
        else
          for (t1 = $.get$iterator$ax(newNodes), t2 = $.getInterceptor$x(receiver); t1.moveNext$0() === true;)
            t2.insertBefore$2(receiver, t1.get$current(), refChild);
    }
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  append$1: function(receiver, newChild) {
    return receiver.appendChild(newChild);
  },
  clone$1: function(receiver, deep) {
    if (Object.getPrototypeOf(this).hasOwnProperty("clone$1")) {
      return receiver.cloneNode(deep);
    } else
      return Object.prototype.clone$1.call(this, receiver, deep);
  },
  contains$1: function(receiver, other) {
    return receiver.contains(other);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  dispatchEvent$1: function(receiver, $event) {
    return receiver.dispatchEvent($event);
  },
  insertBefore$2: function(receiver, newChild, refChild) {
    return receiver.insertBefore(newChild,refChild);
  },
  $$dom_removeChild$1: function(receiver, oldChild) {
    return receiver.removeChild(oldChild);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_replaceChild$2: function(receiver, newChild, oldChild) {
    return receiver.replaceChild(newChild,oldChild);
  },
  $isNode: function() {
    return true;
  },
  $asNode: function() {
    return null;
  }
});

$.$defineNativeClass("NodeIterator", {
  nextNode$0: function(receiver) {
    return receiver.nextNode();
  },
  get$nextNode: function(receiver) {
    return new $.BoundClosure$i0(this, "nextNode$0", receiver);
  }
});

$.$defineNativeClass("NodeList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Notification", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  cancel$0: function(receiver) {
    return receiver.cancel();
  },
  dispatchEvent$1: function(receiver, evt) {
    return receiver.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  show$0: function(receiver) {
    return receiver.show();
  },
  get$onClick: function(receiver) {
    return $.CONSTANT26.forTarget$1(receiver);
  },
  get$onError: function(receiver) {
    return $.CONSTANT18.forTarget$1(receiver);
  }
});

$.$defineNativeClass("HTMLOListElement", {"": "type%"});

$.$defineNativeClass("HTMLObjectElement", {"": "height=,name=,type%,width="});

$.$defineNativeClass("HTMLOptionElement", {"": "value%"});

$.$defineNativeClass("HTMLOutputElement", {"": "name=,type=,value%"});

$.$defineNativeClass("HTMLParamElement", {"": "name=,value%"});

$.$defineNativeClass("PerformanceNavigation", {"": "type="});

$.$defineNativeClass("ProcessingInstruction", {"": "target="});

$.$defineNativeClass("HTMLProgressElement", {"": "value%"});

$.$defineNativeClass("RadioNodeList", {"": "value%"});

$.$defineNativeClass("Range", {
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("RangeException", {"": "name=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("RTCDataChannel", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, $event) {
    return receiver.dispatchEvent($event);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function(receiver) {
    return $.CONSTANT18.forTarget$1(receiver);
  }
});

$.$defineNativeClass("RTCPeerConnection", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, $event) {
    return receiver.dispatchEvent($event);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("RTCSessionDescription", {"": "type%"});

$.$defineNativeClass("RTCStatsResponse", {
  result$0: function(receiver) {
    return receiver.result();
  },
  get$result: function(receiver) {
    return new $.BoundClosure$i0(this, "result$0", receiver);
  }
});

$.$defineNativeClass("RTCDTMFSender", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, $event) {
    return receiver.dispatchEvent($event);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("Screen", {"": "height=,width="});

$.$defineNativeClass("HTMLScriptElement", {"": "type%"});

$.$defineNativeClass("ScriptProfileNode", {
  children$0: function(receiver) {
    return receiver.children();
  },
  get$children: function(receiver) {
    return new $.BoundClosure$i0(this, "children$0", receiver);
  }
});

$.$defineNativeClass("HTMLSelectElement", {"": "length=,name=,type=,value%"});

$.$defineNativeClass("ShadowRoot", {"": "innerHtml:innerHTML}",
  clone$1: function(receiver, deep) {
    return receiver.cloneNode(deep);
  },
  $isShadowRoot: function() {
    return true;
  },
  $asShadowRoot: function() {
    return null;
  }
});

$.$defineNativeClass("SharedWorkerContext", {"": "name="});

$.$defineNativeClass("SourceBuffer", {
  append$1: function(receiver, data) {
    return receiver.append(data);
  }
});

$.$defineNativeClass("SourceBufferList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, $event) {
    return receiver.dispatchEvent($event);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.SourceBuffer]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.SourceBuffer]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.SourceBuffer]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLSourceElement", {"": "type%"});

$.$defineNativeClass("SpeechGrammarList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.SpeechGrammar]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.SpeechGrammar]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.SpeechGrammar]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SpeechRecognition", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, evt) {
    return receiver.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function(receiver) {
    return $.CONSTANT18.forTarget$1(receiver);
  }
});

$.$defineNativeClass("SpeechRecognitionError", {"": "error="});

$.$defineNativeClass("SpeechRecognitionEvent", {"": "result="});

$.$defineNativeClass("SpeechRecognitionResult", {"": "length="});

$.$defineNativeClass("Storage", {"": "$$dom_length:length=",
  containsKey$1: function(receiver, key) {
    return $.$$dom_getItem$1$x(receiver, key) != null;
  },
  $index: function(receiver, key) {
    return $.$$dom_getItem$1$x(receiver, key);
  },
  $indexSet: function(receiver, key, value) {
    $.$$dom_setItem$2$x(receiver, key, value);
  },
  putIfAbsent$2: function(receiver, key, ifAbsent) {
    var t1 = $.getInterceptor$x(receiver);
    if (t1.$$dom_getItem$1(receiver, key) == null)
      t1.$indexSet(receiver, key, ifAbsent.call$0());
    return t1.$$dom_getItem$1(receiver, key);
  },
  remove$1: function(receiver, key) {
    var t1, value;
    t1 = $.getInterceptor$x(receiver);
    value = t1.$$dom_getItem$1(receiver, key);
    t1.$$dom_removeItem$1(receiver, key);
    return value;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  clear$0: function(receiver) {
    return $.$$dom_clear$0$x(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1, i, key;
    for (t1 = $.getInterceptor$x(receiver), i = 0; true; ++i) {
      key = t1.$$dom_key$1(receiver, i);
      if (key == null)
        return;
      f.call$2(key, t1.$$dom_getItem$1(receiver, key));
    }
  },
  get$keys: function(receiver) {
    var keys = [];
    $.forEach$1$ax(receiver, new $.Storage_keys_anon(keys));
    return keys;
  },
  get$values: function(receiver) {
    var values = [];
    $.forEach$1$ax(receiver, new $.Storage_values_anon(values));
    return values;
  },
  get$length: function(receiver) {
    return $.get$$$dom_length$x(receiver);
  },
  get$isEmpty: function(receiver) {
    return $.$$dom_key$1$x(receiver, 0) == null;
  },
  $$dom_clear$0: function(receiver) {
    return receiver.clear();
  },
  $$dom_getItem$1: function(receiver, key) {
    return receiver.getItem(key);
  },
  $$dom_key$1: function(receiver, index) {
    return receiver.key(index);
  },
  $$dom_removeItem$1: function(receiver, key) {
    return receiver.removeItem(key);
  },
  $$dom_setItem$2: function(receiver, key, data) {
    return receiver.setItem(key,data);
  },
  $isMap: function() {
    return true;
  },
  $asMap: function() {
    return function () { return [$.String, $.String]; };
  }
});

$.$defineNativeClass("StorageEvent", {"": "key=,newValue="});

$.$defineNativeClass("HTMLStyleElement", {"": "type%"});

$.$defineNativeClass("StyleMedia", {"": "type="});

$.$defineNativeClass("StyleSheet", {"": "type="});

$.$defineNativeClass("HTMLTableElement", {"": "caption=,$$dom_rows:rows=,$$dom_tBodies:tBodies=,tFoot=,tHead=",
  get$tBodies: function(receiver) {
    return $._WrappedList$($.get$$$dom_tBodies$x(receiver));
  },
  get$rows: function(receiver) {
    return $._WrappedList$($.get$$$dom_rows$x(receiver));
  }
});

$.$defineNativeClass("HTMLTableRowElement", {"": "$$dom_cells:cells=",
  get$cells: function(receiver) {
    return $._WrappedList$($.get$$$dom_cells$x(receiver));
  }
});

$.$defineNativeClass("HTMLTableSectionElement", {"": "$$dom_rows:rows=",
  get$rows: function(receiver) {
    return $._WrappedList$($.get$$$dom_rows$x(receiver));
  }
});

$.$defineNativeClass("Text", {
  $isText: function() {
    return true;
  },
  $asText: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLTextAreaElement", {"": "name=,rows=,type=,value%"});

$.$defineNativeClass("TextMetrics", {"": "width="});

$.$defineNativeClass("TextTrack", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, evt) {
    return receiver.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("TextTrackCue", {"": "id=,text}",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, evt) {
    return receiver.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("TextTrackCueList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.TextTrackCue]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.TextTrackCue]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.TextTrackCue]; };
  }
});

$.$defineNativeClass("TextTrackList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, evt) {
    return receiver.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.TextTrack]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.TextTrack]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.TextTrack]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("TimeRanges", {"": "length="});

$.$defineNativeClass("Touch", {"": "_get_target:target=",
  get$target: function(receiver) {
    return $._convertNativeToDart_EventTarget($.get$_get_target$x(receiver));
  }
});

$.$defineNativeClass("TouchList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Touch]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Touch]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.Touch]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("TreeWalker", {
  nextNode$0: function(receiver) {
    return receiver.nextNode();
  },
  get$nextNode: function(receiver) {
    return new $.BoundClosure$i0(this, "nextNode$0", receiver);
  },
  parentNode$0: function(receiver) {
    return receiver.parentNode();
  },
  get$parentNode: function(receiver) {
    return new $.BoundClosure$i0(this, "parentNode$0", receiver);
  }
});

$.$defineNativeClass("Uint16Array", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Uint32Array", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Uint8Array", {
  get$length: function(receiver) {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$length")) {
      return receiver.length;
    } else
      return Object.prototype.get$length.call(this, receiver);
  },
  $index: function(receiver, index) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$index")) {
      return receiver[index];
    } else
      return Object.prototype.$index.call(this, receiver, index);
  },
  $indexSet: function(receiver, index, value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$indexSet")) {
      receiver[index] = value;
    } else
      return Object.prototype.$indexSet.call(this, receiver, index, value);
  },
  get$iterator: function(receiver) {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$iterator")) {
      return $.FixedSizeListIterator$(receiver);
    } else
      return Object.prototype.get$iterator.call(this, receiver);
  },
  contains$1: function(receiver, element) {
    if (Object.getPrototypeOf(this).hasOwnProperty("contains$1")) {
      return $.IterableMixinWorkaround_contains(receiver, element);
    } else
      return Object.prototype.contains$1.call(this, receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("forEach$1")) {
      var t1;
      for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
        f.call$1(t1.get$current());
      return;
    } else
      return Object.prototype.forEach$1.call(this, receiver, f);
  },
  map$1: function(receiver, f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("map$1")) {
      return $.MappedListIterable$(receiver, f);
    } else
      return Object.prototype.map$1.call(this, receiver, f);
  },
  where$1: function(receiver, f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("where$1")) {
      return $.WhereIterable$(receiver, f);
    } else
      return Object.prototype.where$1.call(this, receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    if (Object.getPrototypeOf(this).hasOwnProperty("toList$1$growable")) {
      return $.List_List$from(receiver, growable);
    } else
      return Object.prototype.toList$1$growable.call(this, receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$isEmpty")) {
      return $.get$length$asx(receiver) === 0;
    } else
      return Object.prototype.get$isEmpty.call(this, receiver);
  },
  elementAt$1: function(receiver, index) {
    if (Object.getPrototypeOf(this).hasOwnProperty("elementAt$1")) {
      return $.$index$asx(receiver, index);
    } else
      return Object.prototype.elementAt$1.call(this, receiver, index);
  },
  add$1: function(receiver, value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("add$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.add$1.call(this, receiver, value);
  },
  addAll$1: function(receiver, iterable) {
    if (Object.getPrototypeOf(this).hasOwnProperty("addAll$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.addAll$1.call(this, receiver, iterable);
  },
  clear$0: function(receiver) {
    if (Object.getPrototypeOf(this).hasOwnProperty("clear$0")) {
      throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
    } else
      return Object.prototype.clear$0.call(this, receiver);
  },
  removeLast$0: function(receiver) {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeLast$0")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.removeLast$0.call(this, receiver);
  },
  remove$1: function(receiver, object) {
    if (Object.getPrototypeOf(this).hasOwnProperty("remove$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.remove$1.call(this, receiver, object);
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (Object.getPrototypeOf(this).hasOwnProperty("sublist$2")) {
      if (end == null)
        end = $.get$length$asx(receiver);
      return $.Lists_getRange(receiver, start, end, []);
    } else
      return Object.prototype.sublist$2.call(this, receiver, start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Uint8ClampedArray", {
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLVideoElement", {"": "height=,width="});

$.$defineNativeClass("WebGLActiveInfo", {"": "name=,type="});

$.$defineNativeClass("WebKitCSSFilterRule", {"": "style="});

$.$defineNativeClass("WebKitNamedFlow", {"": "name=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, $event) {
    return receiver.dispatchEvent($event);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("WebSocket", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, evt) {
    return receiver.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function(receiver) {
    return $.CONSTANT18.forTarget$1(receiver);
  }
});

$.$defineNativeClass("DOMWindow", {"": "name=,navigator=,_get_parent:parent=",
  get$document: function(receiver) {
    return receiver.document;
  },
  get$parent: function(receiver) {
    return $._convertNativeToDart_Window($.get$_get_parent$x(receiver));
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, evt) {
    return receiver.dispatchEvent(evt);
  },
  $$dom_getComputedStyle$2: function(receiver, element, pseudoElement) {
    return receiver.getComputedStyle(element,pseudoElement);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onChange: function(receiver) {
    return $.CONSTANT28.forTarget$1(receiver);
  },
  get$onClick: function(receiver) {
    return $.CONSTANT26.forTarget$1(receiver);
  },
  get$onError: function(receiver) {
    return $.CONSTANT18.forTarget$1(receiver);
  },
  get$onInput: function(receiver) {
    return $.CONSTANT29.forTarget$1(receiver);
  }
});

$.$defineNativeClass("Worker", {
  postMessage$2: function(receiver, message, messagePorts) {
    var t1 = $ === messagePorts;
    if (t1)
      messagePorts = null;
    if (!t1) {
      $._postMessage_1$2$x(receiver, $._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
      return;
    }
    $._postMessage_2$1$x(receiver, $._convertDartToNative_PrepareForStructuredClone(message));
    return;
  },
  postMessage$1: function($receiver, message) {
    return this.postMessage$2($receiver, message, $);
  },
  _postMessage_1$2: function(receiver, message, messagePorts) {
    return receiver.postMessage(message,messagePorts);
  },
  _postMessage_2$1: function(receiver, message) {
    return receiver.postMessage(message);
  },
  terminate$0: function(receiver) {
    return receiver.terminate();
  }
});

$.$defineNativeClass("WorkerContext", {"": "navigator=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, evt) {
    return receiver.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function(receiver) {
    return $.CONSTANT18.forTarget$1(receiver);
  }
});

$.$defineNativeClass("WorkerLocation", {
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("WorkerNavigator", {"": "userAgent="});

$.$defineNativeClass("XPathException", {"": "name=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("ClientRect", {"": "height=,left=,right=,top=,width=",
  toString$0: function(receiver) {
    var t1 = $.getInterceptor$x(receiver);
    return "(" + $.S(t1.get$left(receiver)) + ", " + $.S(t1.get$top(receiver)) + ", " + $.S(t1.get$width(receiver)) + ", " + $.S(t1.get$height(receiver)) + ")";
  },
  $eq: function(receiver, other) {
    var t1, t2;
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && other.$isRect()))
      return false;
    t1 = $.getInterceptor$x(receiver);
    t2 = $.getInterceptor$x(other);
    return $.$eq(t1.get$left(receiver), t2.get$left(other)) === true && $.$eq(t1.get$top(receiver), t2.get$top(other)) === true && $.$eq(t1.get$width(receiver), t2.get$width(other)) === true && $.$eq(t1.get$height(receiver), t2.get$height(other)) === true;
  },
  round$0: function(receiver) {
    var t1 = $.getInterceptor$x(receiver);
    return $.Rect$($.round$0$nx(t1.get$left(receiver)), $.round$0$nx(t1.get$top(receiver)), $.round$0$nx(t1.get$width(receiver)), $.round$0$nx(t1.get$height(receiver)));
  },
  $isRect: function() {
    return true;
  },
  $asRect: function() {
    return null;
  }
});

$.$defineNativeClass("ClientRectList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Rect]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Rect]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.Rect]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("CSSRuleList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.CssRule]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.CssRule]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.CssRule]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("CSSValueList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.CssValue]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.CssValue]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.CssValue]; };
  }
});

$.$defineNativeClass("EntryArray", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Entry]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Entry]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.Entry]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("EntryArraySync", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.EntrySync]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.EntrySync]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.EntrySync]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("GamepadList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Gamepad]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Gamepad]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.Gamepad]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("NamedNodeMap", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SpeechInputResultList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.SpeechInputResult]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.SpeechInputResult]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.SpeechInputResult]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SpeechRecognitionResultList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.SpeechRecognitionResult]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.SpeechRecognitionResult]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.SpeechRecognitionResult]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("StyleSheetList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.StyleSheet]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.StyleSheet]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.StyleSheet]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("IDBCursor", {"": "key=",
  next$1: function(receiver, key) {
    return receiver.continue(key);
  },
  get$next: function(receiver) {
    return new $.Bound_next_Cursor(this, "next$1", receiver);
  }
});

$.$defineNativeClass("IDBCursorWithValue", {"": "_get_value:value=",
  get$value: function(receiver) {
    return $._convertNativeToDart_IDBAny($.get$_get_value$x(receiver));
  }
});

$.$defineNativeClass("IDBDatabase", {"": "name=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, evt) {
    return receiver.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function(receiver) {
    return $.CONSTANT18.forTarget$1(receiver);
  }
});

$.$defineNativeClass("IDBIndex", {"": "name="});

$.$defineNativeClass("IDBObjectStore", {"": "name=",
  add$2: function(receiver, value, key) {
    var request, e, stacktrace, t1, exception;
    try {
      request = null;
      t1 = $.getInterceptor$x(receiver);
      if (key != null)
        request = t1.$$dom_add$2(receiver, value, key);
      else
        request = t1.$$dom_add$1(receiver, value);
      t1 = $._completeRequest(request);
      return t1;
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      stacktrace = $.getTraceFromException(exception);
      return $.Future_Future$immediateError(e, stacktrace);
    }

  },
  add$1: function($receiver, value) {
    return this.add$2($receiver, value, null);
  },
  clear$0: function(receiver) {
    var e, stacktrace, t1, exception;
    try {
      t1 = $._completeRequest($.$$dom_clear$0$x(receiver));
      return t1;
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      stacktrace = $.getTraceFromException(exception);
      return $.Future_Future$immediateError(e, stacktrace);
    }

  },
  $$dom_add$2: function(receiver, value, key) {
    var t1 = $ === key;
    if (t1)
      key = null;
    if (!t1)
      return $._$dom_add_1$2$x(receiver, $._convertDartToNative_PrepareForStructuredClone(value), $._convertDartToNative_PrepareForStructuredClone(key));
    return $._$dom_add_2$1$x(receiver, $._convertDartToNative_PrepareForStructuredClone(value));
  },
  $$dom_add$1: function($receiver, value) {
    return this.$$dom_add$2($receiver, value, $);
  },
  _$dom_add_1$2: function(receiver, value, key) {
    return receiver.add(value,key);
  },
  _$dom_add_2$1: function(receiver, value) {
    return receiver.add(value);
  },
  $$dom_clear$0: function(receiver) {
    return receiver.clear();
  }
});

$.$defineNativeClass("IDBRequest", {"": "error=,_get_result:result=",
  get$result: function(receiver) {
    return $._convertNativeToDart_IDBAny($.get$_get_result$x(receiver));
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, evt) {
    return receiver.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function(receiver) {
    return $.CONSTANT18.forTarget$1(receiver);
  },
  get$onSuccess: function(receiver) {
    return $.CONSTANT19.forTarget$1(receiver);
  }
});

$.$defineNativeClass("IDBTransaction", {"": "error=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  dispatchEvent$1: function(receiver, evt) {
    return receiver.dispatchEvent(evt);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function(receiver) {
    return $.CONSTANT18.forTarget$1(receiver);
  }
});

$.$defineNativeClass("SVGAElement", {"": "target="});

$.$defineNativeClass("SVGAltGlyphElement", {
  format$1: function($receiver, arg0) {
    return this.format.call$1(arg0);
  }
});

$.$defineNativeClass("SVGAngle", {"": "value%"});

$.$defineNativeClass("SVGElementInstance", {"": "parentNode=",
  get$onChange: function(receiver) {
    return $.CONSTANT28.forTarget$1(receiver);
  },
  get$onClick: function(receiver) {
    return $.CONSTANT26.forTarget$1(receiver);
  },
  get$onError: function(receiver) {
    return $.CONSTANT18.forTarget$1(receiver);
  },
  get$onInput: function(receiver) {
    return $.CONSTANT29.forTarget$1(receiver);
  }
});

$.$defineNativeClass("SVGFEBlendElement", {"": "height=,result=,width="});

$.$defineNativeClass("SVGFEColorMatrixElement", {"": "type=,height=,result=,width="});

$.$defineNativeClass("SVGFEComponentTransferElement", {"": "height=,result=,width="});

$.$defineNativeClass("SVGFECompositeElement", {"": "height=,result=,width="});

$.$defineNativeClass("SVGFEConvolveMatrixElement", {"": "height=,result=,width="});

$.$defineNativeClass("SVGFEDiffuseLightingElement", {"": "height=,result=,width="});

$.$defineNativeClass("SVGFEDisplacementMapElement", {"": "height=,result=,width="});

$.$defineNativeClass("SVGFEFloodElement", {"": "height=,result=,width="});

$.$defineNativeClass("SVGFEGaussianBlurElement", {"": "height=,result=,width="});

$.$defineNativeClass("SVGFEImageElement", {"": "height=,result=,width="});

$.$defineNativeClass("SVGFEMergeElement", {"": "height=,result=,width="});

$.$defineNativeClass("SVGFEMorphologyElement", {"": "height=,result=,width="});

$.$defineNativeClass("SVGFEOffsetElement", {"": "height=,result=,width="});

$.$defineNativeClass("SVGFESpecularLightingElement", {"": "height=,result=,width="});

$.$defineNativeClass("SVGFETileElement", {"": "height=,result=,width="});

$.$defineNativeClass("SVGFETurbulenceElement", {"": "type=,height=,result=,width="});

$.$defineNativeClass("SVGFilterElement", {"": "height=,width="});

$.$defineNativeClass("SVGForeignObjectElement", {"": "height=,width="});

$.$defineNativeClass("SVGImageElement", {"": "height=,width="});

$.$defineNativeClass("SVGLength", {"": "value%"});

$.$defineNativeClass("SVGLengthList", {"": "numberOfItems=",
  $index: function(receiver, index) {
    return $.getItem$1$x(receiver, index);
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  get$length: function(receiver) {
    return $.get$numberOfItems$x(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.$eq($.get$length$asx(receiver), 0);
  },
  elementAt$1: function(receiver, index) {
    return $.getItem$1$x(receiver, index);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  clear$0: function(receiver) {
    return receiver.clear();
  },
  getItem$1: function(receiver, index) {
    return receiver.getItem(index);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Length]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Length]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.Length]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SVGMaskElement", {"": "height=,width="});

$.$defineNativeClass("SVGNumber", {"": "value%"});

$.$defineNativeClass("SVGNumberList", {"": "numberOfItems=",
  $index: function(receiver, index) {
    return $.getItem$1$x(receiver, index);
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  get$length: function(receiver) {
    return $.get$numberOfItems$x(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.$eq($.get$length$asx(receiver), 0);
  },
  elementAt$1: function(receiver, index) {
    return $.getItem$1$x(receiver, index);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  clear$0: function(receiver) {
    return receiver.clear();
  },
  getItem$1: function(receiver, index) {
    return receiver.getItem(index);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Number]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Number]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.Number]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SVGPathSegList", {"": "numberOfItems=",
  $index: function(receiver, index) {
    return $.getItem$1$x(receiver, index);
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  get$length: function(receiver) {
    return $.get$numberOfItems$x(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.$eq($.get$length$asx(receiver), 0);
  },
  elementAt$1: function(receiver, index) {
    return $.getItem$1$x(receiver, index);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  clear$0: function(receiver) {
    return receiver.clear();
  },
  getItem$1: function(receiver, index) {
    return receiver.getItem(index);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.PathSeg]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.PathSeg]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.PathSeg]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SVGPatternElement", {"": "height=,width="});

$.$defineNativeClass("SVGPointList", {
  clear$0: function(receiver) {
    return receiver.clear();
  }
});

$.$defineNativeClass("SVGRect", {"": "height=,width="});

$.$defineNativeClass("SVGRectElement", {"": "height=,width="});

$.$defineNativeClass("SVGScriptElement", {"": "type%"});

$.$defineNativeClass("SVGStringList", {"": "numberOfItems=",
  $index: function(receiver, index) {
    return $.getItem$1$x(receiver, index);
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  get$length: function(receiver) {
    return $.get$numberOfItems$x(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.$eq($.get$length$asx(receiver), 0);
  },
  elementAt$1: function(receiver, index) {
    return $.getItem$1$x(receiver, index);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  clear$0: function(receiver) {
    return receiver.clear();
  },
  getItem$1: function(receiver, index) {
    return receiver.getItem(index);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.String]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.String]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.String]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SVGStyleElement", {"": "type%"});

$.$defineNativeClass("SVGDocument", {
  $$dom_createEvent$1: function(receiver, eventType) {
    return receiver.createEvent(eventType);
  }
});

$.$defineNativeClass("SVGElement", {"": "_cssClassSet%",
  get$classes: function(receiver) {
    var t1 = $.getInterceptor$x(receiver);
    if (t1.get$_cssClassSet(receiver) == null)
      t1.set$_cssClassSet(receiver, $._AttributeClassSet$(receiver));
    return t1.get$_cssClassSet(receiver);
  },
  get$children: function(receiver) {
    return $.FilteredElementList$(receiver);
  },
  set$children: function(receiver, value) {
    var children = $.get$children$x(receiver);
    children.clear$0(children);
    children.addAll$1(children, value);
  },
  set$innerHtml: function(receiver, svg) {
    var container, t1;
    container = $.Element_Element$tag("div");
    t1 = $.getInterceptor$x(container);
    t1.set$innerHtml(container, "<svg version=\"1.1\">" + $.S(svg) + "</svg>");
    $.set$children$x(receiver, $.get$children$x($.$index$asx(t1.get$children(container), 0)));
  },
  get$$$dom_children: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot get dom_children on SVG."));
  },
  get$id: function(receiver) {
    return receiver.id;
  }
});

$.$defineNativeClass("SVGException", {"": "name=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("SVGSVGElement", {"": "height=,width="});

$.$defineNativeClass("SVGTransform", {"": "type="});

$.$defineNativeClass("SVGTransformList", {"": "numberOfItems=",
  $index: function(receiver, index) {
    return $.getItem$1$x(receiver, index);
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  get$length: function(receiver) {
    return $.get$numberOfItems$x(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.$eq($.get$length$asx(receiver), 0);
  },
  elementAt$1: function(receiver, index) {
    return $.getItem$1$x(receiver, index);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  clear$0: function(receiver) {
    return receiver.clear();
  },
  getItem$1: function(receiver, index) {
    return receiver.getItem(index);
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Transform]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Transform]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.Transform]; };
  }
});

$.$defineNativeClass("SVGUseElement", {"": "height=,width="});

$.$defineNativeClass("SVGElementInstanceList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return $.item$1$x(receiver, index);
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return $.item$1$x(receiver, index);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  item$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.ElementInstance]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.ElementInstance]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.ElementInstance]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SVGComponentTransferFunctionElement", {"": "type="});

$.$defineNativeClass("SVGFEDropShadowElement", {"": "height=,result=,width="});

$.$defineNativeClass("SVGGlyphRefElement", {
  format$1: function($receiver, arg0) {
    return this.format.call$1(arg0);
  }
});

$.$defineNativeClass("AudioBuffer", {"": "length="});

$.$defineNativeClass("AudioParam", {"": "name=,value%"});

$.$defineNativeClass("BiquadFilterNode", {"": "type%"});

$.$defineNativeClass("OscillatorNode", {"": "type%"});

$.$defineNativeClass("SQLResultSet", {"": "rows="});

$.$defineNativeClass("SQLResultSetRowList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return $.convertNativeToDart_Dictionary($._item_1$1$x(receiver, index));
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = $.get$iterator$ax(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return $.get$length$asx(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return $.convertNativeToDart_Dictionary($._item_1$1$x(receiver, index));
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = $.get$length$asx(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  _item_1$1: function(receiver, index) {
    return receiver.item(index);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Map]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Map]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.Map]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

// 231 dynamic classes.
// 388 classes
// 37 !leaf
(function() {
  var v0_Uint8Array = "Uint8Array|Uint8ClampedArray", v1_Text = "CDATASection|Text", v2__SVGComponentTransferFunctionElement = "SVGComponentTransferFunctionElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement", v3_MediaElement = "HTMLAudioElement|HTMLMediaElement|HTMLVideoElement", v4_SvgElement = [v2__SVGComponentTransferFunctionElement, "SVGAElement|SVGAltGlyphDefElement|SVGAltGlyphElement|SVGAltGlyphItemElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGCircleElement|SVGClipPathElement|SVGCursorElement|SVGDefsElement|SVGDescElement|SVGElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFloodElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMergeNodeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFEPointLightElement|SVGFESpecularLightingElement|SVGFESpotLightElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGHKernElement|SVGImageElement|SVGLineElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMaskElement|SVGMetadataElement|SVGMissingGlyphElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRadialGradientElement|SVGRectElement|SVGSVGElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStyleElement|SVGStyledElement|SVGSwitchElement|SVGSymbolElement|SVGTRefElement|SVGTSpanElement|SVGTextContentElement|SVGTextElement|SVGTextPathElement|SVGTextPositioningElement|SVGTitleElement|SVGUseElement|SVGVKernElement|SVGViewElement"].join("|"), v5_Element = [v3_MediaElement, v4_SvgElement, "Element|HTMLAnchorElement|HTMLAppletElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBaseFontElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDirectoryElement|HTMLDivElement|HTMLElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMarqueeElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement"].join("|"), v6_CharacterData = [v1_Text, "CharacterData|Comment"].join("|"), v7_Document = "Document|HTMLDocument|SVGDocument", v8_DocumentFragment = "DocumentFragment|ShadowRoot", v9_Node = [v5_Element, v6_CharacterData, v7_Document, v8_DocumentFragment, "Attr|DocumentType|EntityReference|Node|Notation|ProcessingInstruction"].join("|"), v10_AbstractWorker = "AbstractWorker|SharedWorker|Worker", v11_WorkerContext = "DedicatedWorkerContext|SharedWorkerContext|WorkerContext", v12_MediaStream = "LocalMediaStream|MediaStream", v13_Request = "IDBOpenDBRequest|IDBRequest";
  $.dynamicSetMetadata([["AbstractWorker", v10_AbstractWorker], ["Uint8Array", v0_Uint8Array], ["ArrayBufferView", [v0_Uint8Array, "ArrayBufferView|DataView|Float32Array|Float64Array|Int16Array|Int32Array|Int8Array|Uint16Array|Uint32Array"].join("|")], ["Blob", "Blob|File"], ["Text", v1_Text], ["CharacterData", v6_CharacterData], ["CSSRule", "CSSCharsetRule|CSSFontFaceRule|CSSHostRule|CSSImportRule|CSSMediaRule|CSSPageRule|CSSRule|CSSStyleRule|CSSUnknownRule|WebKitCSSFilterRule|WebKitCSSKeyframeRule|WebKitCSSKeyframesRule"], ["Document", v7_Document], ["DocumentFragment", v8_DocumentFragment], ["DOMTokenList", "DOMSettableTokenList|DOMTokenList"], ["HTMLMediaElement", v3_MediaElement], ["SVGComponentTransferFunctionElement", v2__SVGComponentTransferFunctionElement], ["SVGElement", v4_SvgElement], ["Element", v5_Element], ["Entry", "DirectoryEntry|Entry|FileEntry"], ["EntrySync", "DirectoryEntrySync|EntrySync|FileEntrySync"], ["Event", "AudioProcessingEvent|BeforeLoadEvent|CloseEvent|CompositionEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|ErrorEvent|Event|FocusEvent|HashChangeEvent|IDBVersionChangeEvent|KeyboardEvent|MediaKeyEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MouseEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|ProgressEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SVGZoomEvent|SpeechInputEvent|SpeechRecognitionError|SpeechRecognitionEvent|StorageEvent|TextEvent|TouchEvent|TrackEvent|TransitionEvent|UIEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent|WheelEvent|XMLHttpRequestProgressEvent"], ["Node", v9_Node], ["WorkerContext", v11_WorkerContext], ["MediaStream", v12_MediaStream], ["IDBRequest", v13_Request], ["EventTarget", [v9_Node, v10_AbstractWorker, v11_WorkerContext, v12_MediaStream, v13_Request, "AudioContext|BatteryManager|DOMApplicationCache|DOMWindow|EventSource|EventTarget|FileReader|FileWriter|IDBDatabase|IDBTransaction|MediaController|MediaSource|MediaStreamTrack|MessagePort|Notification|OfflineAudioContext|Performance|RTCDTMFSender|RTCDataChannel|RTCPeerConnection|SVGElementInstance|SourceBufferList|SpeechRecognition|TextTrack|TextTrackCue|TextTrackList|WebKitNamedFlow|WebSocket|XMLHttpRequest|XMLHttpRequestUpload"].join("|")], ["HTMLCollection", "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"], ["NodeList", "NodeList|RadioNodeList"], ["StyleSheet", "CSSStyleSheet|StyleSheet"], ["CSSValueList", "CSSValueList|WebKitCSSFilterValue|WebKitCSSMixFunctionValue|WebKitCSSTransformValue"], ["IDBCursor", "IDBCursor|IDBCursorWithValue"], ["AudioParam", "AudioGain|AudioParam"]]);
})();

$.main0.call$0 = $.main0;
// BEGIN invoke [main].
if (typeof document !== "undefined" && document.readyState !== "complete") {
  document.addEventListener("readystatechange", function () {
    if (document.readyState == "complete") {
      if (typeof dartMainRunner === "function") {
        dartMainRunner(function() { $.startRootIsolate($.main0); });
      } else {
        $.startRootIsolate($.main0);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.startRootIsolate($.main0); });
  } else {
    $.startRootIsolate($.main0);
  }
}
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        prototype["get$" + accessorName] = new Function(args, body);
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        prototype["set$" + accessorName] = new Function(args, body);
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = fields[i];
        field = generateAccessor(field, prototype);
        str += field;
        body += "this." + field + " = " + field + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = cls;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", ["f?"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var fields = desc[""], supr;
        if (typeof fields == "string") {
          var s = fields.split(";");
          supr = s[0];
          fields = s[1] == "" ? [] : s[1].split(",");
        } else {
          supr = desc.super;
        }
        isolateProperties[cls] = defineClass(cls, fields, desc);
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if ((!superclass || typeof superclass) != "string")
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var getter = new Function("{ return $." + fieldName + ";}");
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            $.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    isolateProperties.$currentScript = typeof document == "object" ? document.currentScript || document.scripts[document.scripts.length - 1] : null;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = Isolate.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
//@ sourceMappingURL=tarimas.html_bootstrap.dart.js.map
