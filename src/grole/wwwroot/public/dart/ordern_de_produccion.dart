// Auto-generated from ordern_de_produccion.html.
// DO NOT EDIT.

library ordern_de_produccion_html;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import '_from_packages/widget/components/modal.dart';
import 'dart:html';
import 'package:web_ui/web_ui.dart';
import 'package:intl/intl.dart' as intl;
import '../OrdenProduccion.dart';
import 'OrdenPP.dart';
import 'OrdenMP.dart';
import 'dart:json' as json;
import 'dart:async';


// Original code


String IdOrden = "";
OrdenProduccion POrdenProduccion = new OrdenProduccion();
ObservableList<OrdenPP> ListaOrdenPP = new ObservableList<OrdenPP>();
ObservableList<OrdenMP> ListaOrdenPMP = new ObservableList<OrdenMP>();
ObservableList<Receta> Recetas = new ObservableList<Receta>();

class Receta{
  int id;
  String descripcion;
}

String ObtenerIdOrden(){
  String p_query_string = window.location.search;
  String p_orden = p_query_string.split("=")[1];
  return p_orden;
}

void ObtenerOrdenProduccion(String AId){
  String pUrl = 'http://localhost:8031/rest/ordenp/OrdenProduccion_obtener/${AId}';
  
  HttpRequest.getString(pUrl, onProgress: null).then((data){
        print(data);
        POrdenProduccion = new OrdenProduccion.FromJSON(data);
        print(POrdenProduccion.estado);
    }).then((String Data) {
      
      String pUrl = 'http://localhost:8031/rest/ordenp/ordenpp_obtener_lista/${POrdenProduccion.id.toString()}';
      HttpRequest.getString(pUrl, onProgress: null).then((String Data){
        
      var pLista = json.parse(Data);
      
      for (var item in pLista){
        ListaOrdenPP.add(new OrdenPP.FromMap(item));
      }
      }).then((String Data){
      
        String pUrl = 'http://localhost:8031/rest/ordenp/ordenmp_obtener_lista/${POrdenProduccion.id.toString()}';
        HttpRequest.getString(pUrl, onProgress: null).then((String Data){
          
          var pLista = json.parse(Data);
          
          for (var item in pLista){
            ListaOrdenPMP.add(new OrdenMP.FromMap(item));
          }
        }).then((String Data) => DespliegaEntidad(POrdenProduccion));         
      });
    });
}

void DespliegaEntidad(OrdenProduccion AOrdenProduccion){
  document.query("#id").value              = AOrdenProduccion.id.toString();
  document.query("#id_orden").value        = AOrdenProduccion.descripcion;
  document.query("#fecha").value           = AOrdenProduccion.fecha;
  document.query("#lote_produccion").value = AOrdenProduccion.lote_produccion.toString();
  document.query("#spanEstado").text       = AOrdenProduccion.estado;
}

OrdenProduccion ObtenerEntidad(){
  OrdenProduccion pOrdenProduccion = new OrdenProduccion();
  pOrdenProduccion.id              = int.parse(document.query("#id").value);
  pOrdenProduccion.id_usuario      = int.parse(document.query("#id_usuario").value);
  pOrdenProduccion.id_tipo         = int.parse(document.query("#id_tipo").value);
  pOrdenProduccion.descripcion     = document.query("#id_orden").value;
  pOrdenProduccion.fecha           = document.query("#fecha").value;
  pOrdenProduccion.lote_produccion = document.query("#lote_produccion").value;
  pOrdenProduccion.estado          = document.query("#spanEstado").text;
  
  return pOrdenProduccion;
}

void guardar(){
  
  POrdenProduccion = ObtenerEntidad();
  
  if (POrdenProduccion.descripcion.trim().length == 0){
    window.alert("Se necesita agregar una descripción");
    query("#id_orden").focus();
    return;
  }
  
  if (ListaOrdenPP.length == 0){
    window.alert("Se necesita agregar producción");
    return;
  }
  
  if (ListaOrdenPMP.length == 0){
    window.alert("Se necesita agregar materia prima");
    return;
  }
  
  String pData    = POrdenProduccion.ToJson();
  String pUrl     = 'http://localhost:8031/rest/ordenp/OrdenProduccion_insertar';
  String pUrlPP   = 'http://localhost:8031/rest/ordenp/ordenpp_insertar';
  String pUrlMP   = 'http://localhost:8031/rest/ordenp/ordenmp_insertar';
  String pMethod  = "POST";
  Map<String, String> headers = new Map<String, String>();
  headers["content-type"] = "application/json";
  
  if (POrdenProduccion.id > 0){
    pUrl    = 'http://localhost:8031/rest/ordenp/OrdenProduccion_actualizar/${POrdenProduccion.id}';
    print(pUrl);
    pMethod = "PUT";
  }
  
  HttpRequest.request(pUrl, method: pMethod, requestHeaders:  headers , sendData:  pData).then((HttpRequest request){
    
    OrdenProduccion pOrden = new OrdenProduccion.FromJSON(request.responseText);
    
    print(request.responseText);
    
    String pData = "[";
    String pDataMP = "[";
    
    for (int i = 0; i <= ListaOrdenPP.length - 1; i++){
         ListaOrdenPP[i].id_orden  = pOrden.id;
         pData += ListaOrdenPP[i].toJSON() + ",";
    }
    
    for (int i = 0; i <= ListaOrdenPMP.length - 1; i++){
      ListaOrdenPMP[i].id_orden = pOrden.id;
      pDataMP += ListaOrdenPMP[i].toJSON() + ",";
    }
    
    pData = pData.substring(0, pData.length - 1);
    pData += "]";
    
    pDataMP = pDataMP.substring(0, pDataMP.length - 1);
    pDataMP += "]";
    
    print(pData);
    print(pDataMP);
    
    HttpRequest.request(pUrlPP, method: "POST", requestHeaders:  headers , sendData:  pData).then((HttpRequest request){
      print("...............");
      print(request.responseText);
    });
    HttpRequest.request(pUrlMP, method: "POST", requestHeaders:  headers , sendData:  pDataMP);
   }).then((request){
      window.alert("Se guardo orden de producción");
      window.location.href = "/ordenes_produccion";
   });
}

void cancelar(){
  if (window.confirm("¿Cancelar captura?")){
    window.location.href = "/ordenes_produccion";
  }
}

void agregar(){
   document.query("#mdlAgregarProductos").xtag.show();
   document.query("#pClave").focus();
}

void agregar_mp(){
   document.query("#mdlAgregarProductosMP").xtag.show();
   document.query("#mClave").focus();
}

void agrega_receta(int AReceta, double ACantidad, OrdenPP AOrden){
  
  var pUrl = "http://localhost:8031/obtener_detalle_receta/${AReceta.toString()}";
  
  bool pAgregado = false;
  
  HttpRequest.getString(pUrl).then((data){
    
    print("detalle receta ${data}");
    
    List pLista = json.parse(data);
    
    for (var item in pLista){

      var pData = ListaOrdenPMP.where((OrdenMP x) => x.producto == item["producto"]).toList();
      var pOrdenMP = new OrdenMP();
      bool pExiste = true;
      
      if (pData.length > 0){
         pOrdenMP = pData.first;
      }
      else{
         pExiste = false;  
      }
      
      pOrdenMP.producto     = item["producto"];
      pOrdenMP.descripcion  = item["descripcion"];
      
      HttpRequest.getString("http://localhost:8031/obtener_inventario_producto/${item['producto']}").then((data){
            
            double pInventario = 0.0;
            
            try
            {
              pInventario = json.parse(data);
            }
            catch(ex)
            {
              pInventario = 0.0;
            }
            
            item['rendimiento'] = (200 - (item['rendimiento']  * 100)) / 100;
            
            if (pOrdenMP.kilos + (item["rendimiento"] * ACantidad) < pInventario){
            
                if (pAgregado == false){
                  ListaOrdenPP.add(AOrden);
                  pAgregado = true;
                }
                
                var x = item["rendimiento"];
                x = x * ACantidad;
                pOrdenMP.kilos       += (item["rendimiento"] * ACantidad);
                
                if (pExiste == false){
                  ListaOrdenPMP.add(pOrdenMP);
            }
        }
        else{
            
          new Timer(new Duration(milliseconds: 300), (){
            
            window.alert("No hay suficiente inventario para el producto, ${item['producto']}, existencia ${pInventario.toString()}");
            ListaOrdenPMP.clear();
            ListaOrdenPP.remove(AOrden);
            
          });
            
            
        }
        
      });
    }
    
  });
}

void agregar_produccion(){
  
  OrdenPP pOrdenPP = new OrdenPP(); 
  
  document.query("#pReceta").disabled = true;
  
  pOrdenPP.producto    = query("#pClave").value;
  pOrdenPP.descripcion = query("#pDescripcion").value;
  pOrdenPP.kilos       = double.parse(query("#pKilos").value);
  pOrdenPP.receta      = int.parse(document.query("#pReceta").value, onError:(x){return 0;});
  
  if (pOrdenPP.descripcion.trim().length == 0){
    window.alert("El producto no es válido");
    query("#pClave").focus();
    return;
  }
  
  if (pOrdenPP.kilos <= 0){
    window.alert("Los kilos no son válidos");
    query("#pKilos").focus();
    return;
  }
  
  if (ListaOrdenPP.where((OrdenPP x) => x.producto == pOrdenPP.producto).length > 0){
    window.alert("El producto ya se encuentra en la lista");
    query("#pClave").focus();
    return;
  }
  
  query("#pClave").value       = "";
  query("#pDescripcion").value = "";
  query("#pKilos").value       = "0.0";
  
  query("#pClave").focus();
  
  if (pOrdenPP.receta > 0){
    agrega_receta(pOrdenPP.receta, pOrdenPP.kilos, pOrdenPP);
  }
}

void agregar_produccion_mp(){
  
  OrdenMP pOrdenMP = new OrdenMP(); 
  
  pOrdenMP.producto    = query("#mClave").value;
  pOrdenMP.descripcion = query("#mDescripcion").value;
  pOrdenMP.kilos       = double.parse(query("#mKilos").value);
  
  if (pOrdenMP.descripcion.trim().length == 0){
      window.alert("El producto no es válido");
      query("#pClave").focus();
      return;
  }
  
  if (pOrdenMP.kilos <= 0){
      window.alert("Los kilos no son válidos");
      query("#pKilos").focus();
      return;
  }
  
  if (ListaOrdenPMP.where((OrdenMP x) => x.producto == pOrdenMP.producto).length > 0){
      window.alert("El producto ya se encuentra en la lista");
      query("#pClave").focus();
      return;
  }
  
  HttpRequest.getString("http://localhost:8031/obtener_inventario_producto/${pOrdenMP.producto}").then((data){
    
      double pInventario = json.parse(data);
      
      if (pOrdenMP.kilos < pInventario){
        ListaOrdenPMP.add(pOrdenMP);
      }
      else{
        window.alert("No hay suficiente inventario para el producto, existencia ${pInventario.toString()}");
      }
    
   });
  
  query("#mClave").value       = "";
  query("#mDescripcion").value = "";
  query("#mKilos").value       = "0.0";
  
  query("#mClave").focus();
}

void eliminar_produccion(item){
  
  if (window.confirm("¿Eliminar Producción?")){
    ListaOrdenPP.remove(item);
  }
  
}

void eliminar_produccion_mp(item){
  
  if (window.confirm("¿Eliminar Materia Prima?")){
    ListaOrdenPMP.remove(item);
  }
  
}

void despliega_producto(){
  
  String pProducto = document.query("#pClave").value;
  
  if (pProducto.length > 0){
  
    String pUrl = "http://localhost:8031/rest/productos/obtener_descripcion/${pProducto}";
    
    HttpRequest.getString(pUrl).then((data){
      
      var pMap = json.parse(data);
      
      String pCodigo = pMap["clave"];
      
      if (pMap["clave"] != "0"){
        document.query("#pDescripcion").value = pMap["descripcion"];
      }
      else{
        window.alert("No existe el producto");
        document.query("#pClave").focus();
      }
    }).then((data){
        String pUrlRecetas = "http://localhost:8031/recetas_producto/${pProducto}";
        
        print("...");
        print(pUrlRecetas);
        
        HttpRequest.getString(pUrlRecetas).then((data){
          
          Recetas.clear();
          
          document.query("#pReceta").disabled = false;
          
          List pLista = json.parse(data);
          
          if (pLista.length > 0){
            for (int i = 0; i<= pLista.length -1; i++){
              Receta pReceta = new Receta();
              pReceta.id          = pLista[i]['id'];
              pReceta.descripcion = pLista[i]['descripcion'];
              
              Recetas.add(pReceta);
            }
          }
          else{
             document.query("#pReceta").disabled = true;
          }
          
        });
    });
  }
  
}

void despliega_producto_mp(){
  
  String pProducto = document.query("#mClave").value;
  
  if (pProducto.length > 0){
    String pUrl = "http://localhost:8031/rest/productos/obtener_descripcion/${pProducto}";
    
    HttpRequest.getString(pUrl).then((data){
      
      var pMap = json.parse(data);
      
      String pCodigo = pMap["clave"];
      
      if (pMap["clave"] != "0"){
        document.query("#mDescripcion").value = pMap["descripcion"];
      }
      else{
        window.alert("No existe el producto");
        document.query("#mClave").focus();
      }
 
    });
  }
}

void main() {
  ObtenerOrdenProduccion(ObtenerIdOrden());
  
  document.query("#mdlAgregarProductos").classes.remove("hiden");
  document.query("#mdlAgregarProductosMP").classes.remove("hiden");
  
  Timer.run(()=>document.query("#id_orden").focus());  
}
// Additional generated code
void init_autogenerated() {
  var __root = autogenerated.document.body;
  final __html0 = new autogenerated.Element.html('<option template="" repeat="item in Recetas"></option>'), __html1 = new autogenerated.Element.html('<tbody template="" repeat="item in ListaOrdenPP">\n            <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n              <td><a href="#" class="label" style="color: #ffffff; text-decoration: none;">x</a></td>\n            </tr>\n          </tbody>'), __html2 = new autogenerated.Element.html('<tbody template="" repeat="item in ListaOrdenPMP">\n            <tr>\n              <td></td>\n              <td></td>\n              <td></td>\n              <td><a href="#" class="label" style="color: #ffffff; text-decoration: none;">x</a></td>\n            </tr>\n          </tbody>');
  var __e0, __e18, __e19, __e28, __e29, __e3, __e30, __e4, __e5, __e6, __e7, __e8, __e9;
  var __t = new autogenerated.Template(__root);
  __e5 = __root.nodes[1].nodes[3].nodes[3];
  __e0 = __e5.nodes[3].nodes[1].nodes[1].nodes[3].nodes[1];
  __t.listen(__e0.onBlur, ($event) { despliega_producto(); });
  __e3 = __e5.nodes[3].nodes[1].nodes[7].nodes[3].nodes[1].nodes[1];
  __t.loop(__e3, () => Recetas, ($list, $index, __t) {
    var item = $list[$index];
    var __e2;
    __e2 = __html0.clone(true);
    var __binding1 = __t.contentBind(() => item.descripcion, false);
    __e2.nodes.add(__binding1);
    __t.oneWayBind(() => $index == 0, (e) { if (__e2.selected != e) __e2.selected = e; }, false, false);
    __t.oneWayBind(() => item.id.toString(), (e) { if (__e2.value != e) __e2.value = e; }, false, false);
  __t.add(__e2);
  });
  __e4 = __e5.nodes[5].nodes[3];
  __t.listen(__e4.onClick, ($event) { agregar_produccion(); });
  __t.component(new Modal()..host = __e5);
  __e8 = __root.nodes[1].nodes[3].nodes[5];
  __e6 = __e8.nodes[3].nodes[1].nodes[1].nodes[3].nodes[1];
  __t.listen(__e6.onBlur, ($event) { despliega_producto_mp(); });
  __e7 = __e8.nodes[5].nodes[3];
  __t.listen(__e7.onClick, ($event) { agregar_produccion_mp(); });
  __t.component(new Modal()..host = __e8);
  __e9 = __root.nodes[1].nodes[3].nodes[13].nodes[3].nodes[3].nodes[1];
  __t.listen(__e9.onClick, ($event) { agregar(); });
  __e18 = __root.nodes[1].nodes[3].nodes[13].nodes[5].nodes[1].nodes[3];
  __t.loop(__e18, () => ListaOrdenPP, ($list, $index, __t) {
    var item = $list[$index];
    var __e11, __e13, __e15, __e16, __e17;
    __e17 = __html1.clone(true);
    __e11 = __e17.nodes[1].nodes[1];
    var __binding10 = __t.contentBind(() => item.producto, false);
    __e11.nodes.add(__binding10);
    __e13 = __e17.nodes[1].nodes[3];
    var __binding12 = __t.contentBind(() => item.descripcion, false);
    __e13.nodes.add(__binding12);
    __e15 = __e17.nodes[1].nodes[5];
    var __binding14 = __t.contentBind(() => new intl.NumberFormat("###0.00").format(item.kilos), false);
    __e15.nodes.add(__binding14);
    __e16 = __e17.nodes[1].nodes[7].nodes[0];
    __t.listen(__e16.onClick, ($event) { eliminar_produccion(item); });
  __t.add(__e17);
  });
  __e19 = __root.nodes[1].nodes[3].nodes[13].nodes[7].nodes[3].nodes[1];
  __t.listen(__e19.onClick, ($event) { agregar_mp(); });
  __e28 = __root.nodes[1].nodes[3].nodes[13].nodes[9].nodes[1].nodes[3];
  __t.loop(__e28, () => ListaOrdenPMP, ($list, $index, __t) {
    var item = $list[$index];
    var __e21, __e23, __e25, __e26, __e27;
    __e27 = __html2.clone(true);
    __e21 = __e27.nodes[1].nodes[1];
    var __binding20 = __t.contentBind(() => item.producto, false);
    __e21.nodes.add(__binding20);
    __e23 = __e27.nodes[1].nodes[3];
    var __binding22 = __t.contentBind(() => item.descripcion, false);
    __e23.nodes.add(__binding22);
    __e25 = __e27.nodes[1].nodes[5];
    var __binding24 = __t.contentBind(() => new intl.NumberFormat("###0.00").format(item.kilos), false);
    __e25.nodes.add(__binding24);
    __e26 = __e27.nodes[1].nodes[7].nodes[0];
    __t.listen(__e26.onClick, ($event) { eliminar_produccion_mp(item); });
  __t.add(__e27);
  });
  __e29 = __root.nodes[1].nodes[3].nodes[13].nodes[11].nodes[1].nodes[1];
  __t.listen(__e29.onClick, ($event) { guardar(); });
  __e30 = __root.nodes[1].nodes[3].nodes[13].nodes[11].nodes[1].nodes[3];
  __t.listen(__e30.onClick, ($event) { cancelar(); });
  __t.create();
  __t.insert();
}

//# sourceMappingURL=ordern_de_produccion.dart.map